[["index.html", "Big Data Analytics Preface", " Big Data Analytics Ulrich Matter 2022-05-05 Preface This textbook provides an introduction to Big Data Analytics in the context of empirical economic research. The book covers the computational constraints underlying Big Data Analytics and how to handle them in the statistical computing environment R (local and in the cloud). Revisiting basic statistical/econometric concepts, the book looks at each step of dealing with large data sets in empirical economic research (storage/import, transformation, visualization, aggregation, analysis). Creative Commons License The online version of this book is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. Ulrich Matter St. Gallen, Switzerland "],["introduction.html", "Chapter 1 Introduction 1.1 What is big in “Big Data?” 1.2 Approaches to analyzing Big Data 1.3 Content overview 1.4 Prerequisits", " Chapter 1 Introduction Over the last decade, ‘Big Data’ has often been discussed as the new ‘most valuable’ resource in highly developed economies, driving the development of new products and services in various industries. Extracting knowledge from large data sets is increasingly seen as a strategic asset for firms, governments, and NGOs. In a similar vein, the increasing size of data sets in empirical economic research (both in number of observations and number of variables) offers new opportunities and poses new challenges for economists and business leaders. Successfully navigating the data-driven economy presupposes a certain understanding of the technologies and methods to gain insights from Big Data. This textbook introduces the reader to the basic concepts of Big Data Analytics to gain insights from large and complex data sets. Thereby, the focus of the book is on the practical application of econometrics/machine learning, given large/complex data sets, and all the steps involved before actually analyzing data (data storage, data import, data preparation). The book combines conceptual/theoretical material with the practical application of the concepts with the open source programming language R. Thereby, the reader will acquire the basic skill set to analyze large data sets both locally and in the cloud. Various code examples and tutorials, focused on empirical economic and business research, illustrate practical techniques to handle and analyze Big Data. 1.1 What is big in “Big Data?” Generally, we can think of Big Data as data that is (a) expensive to handle and (b) hard to get value from due to its size and complexity. The handling of Big Data is expensive as the data is often gathered from unorthodox sources, providing poorly structured data (e.g., raw text, web pages, images, etc.) as well as because of the infrastructure needed to store and load/process large amounts of data. Getting value/insights from Big Data is related to two distinct properties that render the analysis of large amounts of data difficult: The big P problem: a data set has more variables than observations, which renders the search for a good predictive model with traditional econometric techniques difficult or illusive. For example, suppose you run an e-commerce business that sells hundreds of thousands of products to tens of thousands of customers. You want to figure out from which product category a customer is most likely to buy an item from, based on her previous product page visits. That is, you want to (in simple terms) regress an indicator of purchasing from a specific category on indicators for previous product page visits. Given this set up, you would potentially end up with hundreds of thousands of explanatory indicator variables (and potentially even linear combinations of those), while you “only” have tens of thousands of observations (one per user/customer) to estimate your model. These sort of problems are at the core of the domain of modern predictive econometrics, which shows how machine learning approaches like the LASSO can be applied in order to get reasonable estimates of such a predictive model. The big N problem: a data set has massive amounts of observations (rows) such that it cannot be handled with standard data analytics techniques and/or on a standard desktop computer. For example, suppose you want to segment your e-commerce customers based on the traces they leave on your website’s server. Specifically, you plan to use the server log files (when does a customer visit the site from where, etc.) in combination with purchase records as well as written product reviews by the users. You focus on 50 variables that you measure on a daily basis over five years for all users. The resulting data set has \\(50,000 \\times 365 \\times 5=91,250,000\\) rows and with 50 variables (50 columns) over 4.5 billion cells. Such a data set can easily take up dozens of Gigabytes on the hard disk. Hence it will either not fit into the memory of a standard computer to begin with (import fails), or the standard programs to process and analyze the data will likely be very inefficient and take ages to finish when used on such a large data set. There are both econometric techniques as well as various specialized software and hardware tools to handle such a situation. While covering some aspects of both problem domains, most of this book focuses on practical challenges and solutions related to the big N problem in Big Data Analytics. 1.2 Approaches to analyzing Big Data Throughout the book, we consider four approaches on how to solve challenges related to analyzing Big Data. Those approaches should not be understood as mutually exclusive categories for Big Data tools, rather they should help us to look at a specific problem from different angles in order to find the most efficient tool/approach to proceed. Statistics/econometrics and machine learning: During the initial hype surrounding Big Data/Data Science about a decade ago, statisticians prominently (and justifiably) pointed out that statistics has always been a very useful tool when analyzing “all the data” (the entire population) is too costly.1 In simple terms, when confronted with the challenge of answering an empirical question based on a big N data set (which is too large to process on a normal computer), one might ask “why not simply take a random sample?” In some situations this might actually be a very reasonable question, and we should be sure to have a good answer for it before we rent a cluster computer with specialized software for distributed computing. After all, statistical inference is there to help us answering empirical questions in situations where collecting data on the entire population would be practically impossible or simply way too costly. In today’s world, digital data is abundant in many domains and the collection is not so much the problem anymore but our standard data analytics tools are not made to analyze such amounts of data. Depending on the question and data at hand, it might thus make sense to simply use well-established “traditional” statistics/econometrics in order to properly address the empirical question. Note, though, that there are also various situations in which this would not work well. For example, consider online advertising. If you want to figure out which user characteristics make a user significantly more likely to click on a specific type of ad, you likely need hundreds of millions of data points because the expected probability that a specific user clicks on an ad is likely generally very low. That is, in many practical big data analytics settings you might expect rather small effects. Consequently, you need to rely on a big-N data set in order to get the statistical power to distinguish an actual effect from a zero effect. However, even then, it might make sense to first look at newer statistical procedures that are specifically made for big-N data before renting a cluster computer. Similarly, traditional statistical/econometric approaches might help to deal with big-p data, but they are usually rather inefficient or have rather problematic statistical properties in such a situation. However, there are also well-established machine learning approaches to better address these problems. In sum, before focusing on specialized software like Hadoop and scaling up hardware resources, make sure to use the adequate statistical tools for a big-data situation. This can save a lot of time and money. Once you have found the most efficient statistical procedure for the problem at hand, you can focus on how to compute it. Writing efficient code: no matter how suitable a statistical procedure theoretically is to analyze a large data set, there are always various ways of how this procedure can be implemented in software. Some ways will be less efficient than others. When working with small or moderately sized data sets you might not even notice whether your data analytics script is written in an efficient way. However, it might get unconfortable to run your script once you confront it with a large data set. Hence the question you should ask yourself when taking this perspective is, “can I write this script in a different way to make it faster (but achieve the same result)?” Before introducing you to specialized R-packages to work with large data sets, we thus look at a few important aspects of how to write efficient/fast code in R. Use limited local computing resources more efficiently: there are several strategies to use the available local computing resources (your PC) more efficiently, and many of those have been around for a while. In simple terms, these strategies are based on the idea of more explicitly telling the computer how to allocate and use the available hardware resources as part of a data analytics task (something that is usually automatically taken care of by the PC’s operating system). We will touch upon several of these strategies, such as multi-core processing and the efficient use of virtual memory and then practically implement these strategies with the help of specialized R packages. Unlike writing more efficient R code, these packages/strategies usually come with an overhead. That is, they help you safe time only after a certain threshold. In other words, not using these approaches can be faster if the data set is not “too big.” In addition, there can be trade-offs between using one vs the other hardware component more efficiently. Hence, using these strategies can be tricky and the best approach might well depend on the specific situation. The aim is thus to make you comfortable with answering the question “how can I use my local computing environment more efficiently to further speed up this specific analytics task?” Scale up and scale out: once you have properly considered all of the above, but the task still cannot be done in a reasonable amount of time, you will need to either scale up or scale out the available computing resources. Scaling up refers to enlarging your machine (e.g., add more random access memory) or to switching to a more powerful machine altogether. Technically, this can mean literally building an additional hardware-device into your PC, today it usually means renting a virtual server in the cloud. Instead of using a “bigger machine,” scaling out means using several machines in concert (cluster computer, distributed systems). While this also has often been done locally (connecting several PCs to a cluster of PCs in order to combine all their computing power), today this too is usually done in the cloud (due to the much easier set up and maintenance). Practically, a key difference between scaling out and scaling up is that by-and-large scaling up does not require you to get familiar with specialized software. You can simply run the exact same script you tested locally on a larger machine in the cloud. Although most of the tools and services available to scale out your analyses are by now quite easy to use, you will have to get familiar with some additional software components and programming paradigms to really make use of the latter.2 In addition, in some situations, scaling up might be perfectly sufficient while in others only scaling out makes sense (particularly if you need massive amounts of memory). In any event, you should be comfortable dealing with the question “does it make sense to scale up or scale out?” and “if yes, how can it be done?” in a given situation.3 1.3 Content overview The book is organized in three main parts. The first part introduces the reader to the set of software tools primarily used throughout the book: (advanced) R and SQL. It then covers the conceptual basics of modern computing environments and discusses how different hardware components matter in practical local Big Data Analytics as well as how virtual servers in the cloud help to scale up and scale out analyses when the local hardware does not have enough computing resources. The second part focuses on all the steps in a data pipeline that precede the actual analysis of the data: data storage, data import/ingestion, data cleaning/transformation, and data aggregation. The chapters in this part of the book discuss basic concepts such as the split-apply-combine approach and demonstrate the practical application of these concepts when working with large data sets in R. Finally, the third part of this book focuses on explorative visualization of big data (with a particular focus on GIS) and the application of modern econometrics to large data sets (both locally and in the cloud). The code examples, illustrations, and tutorials provided throughout the book focus on data analytics contexts in empirical economics as well as business data science/business analytics. However, the basic concepts and tools covered in the book are not domain-specific and could easily be transferred to other fields of modern data analytics/data science. 1.4 Prerequisits This book builds extensively on programming in R. The reader is expected to already be familiar with R and basic programming concepts such as loops, control statements and functions. In addition, the book presupposes some familiarity with undergraduate and basic graduate statistics/econometrics. David Donoho has nicely summarized this critique in a paper titled “50 Years of Data Science” (Donoho (2017)), which I warmly recommend.↩︎ Not thought, that this aspect of scaling out has recently become much more user-friendly and is likely to get even more so over the next few years. Therefore, we will focus primarily on how to set up such a solution with the help of high-level/easy-to-use interfaces.↩︎ Importantly, the perspective on scaling up and scaling out provided in this book is solely focused on Big Data Analytics in the context of economic/business research. There is a large array of practical problems and corresponding solutions/tools to deal with “Big Data Analytics” in the context of application development (e.g. tools related to data streams) which this book does not cover.↩︎ "],["big-data-econometrics.html", "Chapter 2 Big Data Econometrics 2.1 A practical big P problem 2.2 A practical big N problem", " Chapter 2 Big Data Econometrics Econometrics in the field of Big Data Analytics can be broadly categorized in two domains: techniques/estimators to address big P-problems and techniques/estimators to address big N problems. While this book presupposes some knowledge in at least one of these domains and mainly focuses on on aspects of Big Data Analytics that precede the estimation of econometric models, it is useful to set the stage for the rest of the chapters with two practical examples concerning big P and big N econometric methods. 2.1 A practical big P problem Due to the abundance of digital data on all kind of human activities, empirical economists as well as business analysts are increasingly confronted with high-dimensional data (many signals, many variables). While having a lot of variables to work with sounds kind of like a good thing, it introduces new problems for coming up with useful predictive models. In the extreme case of having more variables in the model than observations, traditional methods cannot be used at all. In the less extreme case of just having dozens or hundreds of variables in a model (and plenty of observations) we risk to “falsely” discover seemingly influential variables and consequently come up with a model with potentially very misleading out-of-sample predictions. Thus, how can we find a reasonable model?4 Let’s look at a real-life example. Suppose you work for Google’s e-commerce platform www.googlemerchandiseshop.com and you are in charge of predicting purchases (i.e., a user is actually buying something from your store in a given session) based on user and browser-session characteristics.5 The dependent variable purchase is an indicator equal to 1 if the corresponding shop visit lead to a purchase and equal to 0 otherwise. All other variables contain information about the user and the session (where is the user located? which browser is she using? etc.). As the dependent variable is binary, we will use in a first step a simple logit model, in which we use the origins of the store visitors (how did a visitor end up in the shop) as explanatory variables. Note that many of these variables are categorical and the model matrix thus contains a lot of dummies. The plan in this (intentionally naive) first approach is to simply add a lot of explanatory variables to the model, run logit, and then select the variables with statistically significant coefficient estimates as the final predictive model. # import/inspect data ga &lt;- read.csv(&quot;data/ga.csv&quot;) head(ga) ## visits source browser isMobile city ## 1 1 google Chrome TRUE San Jose ## 2 1 (direct) Edge FALSE Charlotte ## 3 1 (direct) Safari TRUE San Francisco ## 4 1 (direct) Safari TRUE Los Angeles ## 5 1 (direct) Chrome FALSE Chicago ## 6 1 (direct) Chrome FALSE Sunnyvale ## country channelGrouping purchase ## 1 United States (Other) 1 ## 2 United States Direct 1 ## 3 United States Direct 1 ## 4 United States Direct 1 ## 5 United States Direct 1 ## 6 United States Direct 1 # create model matrix (dummy vars) mm &lt;- cbind(ga$purchase, model.matrix(purchase~source, data=ga,)[,-1]) mm_df &lt;- as.data.frame(mm) # clean variable names names(mm_df) &lt;- c(&quot;purchase&quot;, gsub(&quot;source&quot;, &quot;&quot;, names(mm_df)[-1])) # run logit model1 &lt;- glm(purchase ~ ., data=mm_df, family=binomial) Now we can perform the t-tests and filter out the “relevant” variables. model1_sum &lt;- summary(model1) # select &quot;significant&quot; variables for final model pvalues &lt;- model1_sum$coefficients[,&quot;Pr(&gt;|z|)&quot;] vars &lt;- names(pvalues[which(pvalues&lt;0.05)][-1]) vars ## [1] &quot;bing&quot; ## [2] &quot;dfa&quot; ## [3] &quot;docs.google.com&quot; ## [4] &quot;facebook.com&quot; ## [5] &quot;google&quot; ## [6] &quot;google.com&quot; ## [7] &quot;m.facebook.com&quot; ## [8] &quot;Partners&quot; ## [9] &quot;quora.com&quot; ## [10] &quot;siliconvalley.about.com&quot; ## [11] &quot;sites.google.com&quot; ## [12] &quot;t.co&quot; ## [13] &quot;youtube.com&quot; Finally, we re-estimate our “final” model # specify and estimate the final model finalmodel &lt;- glm(purchase ~., data = mm_df[, c(&quot;purchase&quot;, vars)], family = binomial) The first problem with this approach is that we should not trust the coefficient t-tests based on which we have selected the covariates too much. The first model model contains 62 explanatory variables (+ the intercept). With that many hypothesis tests, we quite likely reject the NULL of no predictive effect although there is actually no predictive effect. In addition, this approach turns out to be unstable. There might be correlation between some variables in the original set of variables and adding/removing even one variable might substantially affect the predictive power of the model (and the apparent relevance of individual variables). We see this already from the summary of our final model estimate. One of the apparently relevant predictors (dfa) is not at all significant anymore in this specification. Thus, we might be tempted to further change the model, which in turn would again change the apparent relevance of other covariates, etc. summary(finalmodel) ## ## Call: ## glm(formula = purchase ~ ., family = binomial, data = mm_df[, ## c(&quot;purchase&quot;, vars)]) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -0.669 -0.669 -0.417 -0.021 4.093 ## ## Coefficients: ## Estimate Std. Error z value ## (Intercept) -1.3831 0.0146 -94.61 ## bing -1.4647 0.5145 -2.85 ## dfa -0.1865 0.1223 -1.53 ## docs.google.com -2.0181 1.0166 -1.99 ## facebook.com -1.1663 0.3287 -3.55 ## google -1.0149 0.0367 -27.62 ## google.com -2.9607 0.7118 -4.16 ## m.facebook.com -3.6920 1.0032 -3.68 ## Partners -4.3747 0.5784 -7.56 ## quora.com -3.1277 1.0056 -3.11 ## siliconvalley.about.com -2.2456 0.5851 -3.84 ## sites.google.com -0.5968 0.1863 -3.20 ## t.co -2.0509 0.7186 -2.85 ## youtube.com -6.9935 0.7065 -9.90 ## Pr(&gt;|z|) ## (Intercept) &lt; 2e-16 *** ## bing 0.00442 ** ## dfa 0.12714 ## docs.google.com 0.04714 * ## facebook.com 0.00039 *** ## google &lt; 2e-16 *** ## google.com 3.2e-05 *** ## m.facebook.com 0.00023 *** ## Partners 3.9e-14 *** ## quora.com 0.00187 ** ## siliconvalley.about.com 0.00012 *** ## sites.google.com 0.00136 ** ## t.co 0.00432 ** ## youtube.com &lt; 2e-16 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 40908 on 51934 degrees of freedom ## Residual deviance: 36783 on 51921 degrees of freedom ## AIC: 36811 ## ## Number of Fisher Scoring iterations: 10 An alternative approach would be to estimate models based on all possible combinations of covariates and then use that sequence of models to select the final model based on some out-of-sample prediction performance measure. Clearly such an approach would take a long time to compute. Instead, the lasso estimator provides a convenient and efficient way to get a sequence of candidate model. The key idea behind the lasso is to penalize model complexity (the cause for instability) during the estimation procedure.6 In a second step, we can then select a final model from the sequence of candidate models based on, for example, “out-of-sample” prediction in a k-fold cross validation. The gamlr package provides both parts of this procedure (lasso for the sequence of candidate models, and selection of “best” model based on k-fold CV). # load packages library(gamlr) # create model matrix mm &lt;- model.matrix(purchase~source, data = ga) In cases with both many observations and many candidate explanatory variables, the model matrix might get very large. Even just computing the model matrix might be a computational burden, as we might run out of memory to hold the model matrix object. If this large model matrix is sparse (i.e, has a lot of 0-entries) there is an alternative way to store it in an R object more memory efficient. # create the sparse model matrix mm_sparse &lt;- sparse.model.matrix(purchase~source, data = ga) # the sparse representation needs less than 15% of the memory needed for # the standard matrix representation in this case: as.numeric(object.size(mm_sparse)/object.size(mm)) ## [1] 0.1329 Finally, we run the lasso estimation with K-fold cross-validation. # run K-fold cross-validation lasso cvpurchase &lt;- cv.gamlr(mm, ga$purchase, family=&quot;binomial&quot;) We then can illustrate the performance of the selected final model, for example, with a ROC curve. # load packages library(PRROC) # use &quot;best&quot; model for prediction # (model selection based on average OSS deviance, here CV1se rule pred &lt;- predict(cvpurchase$gamlr, mm, type=&quot;response&quot;) # compute tpr, fpr, plot ROC comparison &lt;- roc.curve(scores.class0 = pred, weights.class0=ga$purchase, curve=TRUE) plot(comparison) Hence, econometrics techniques such as the lasso help deal with big P problems by providing reasonable ways to select a good predictive model (in other words, decide which of the many variables should be included). 2.2 A practical big N problem Big N problems are situations in which we know what type of model we want to use but the number of observations is too big to run the estimation (computer crashes or slows down a lot). The simplest statistical solution to such a problem is usually to just estimate the model based on a smaller sample. However, we might not want to do that for other reasons (see introduction above). As an illustration of how an alternative statistical procedure can speed up the analysis of big N datasets, we look at a procedure to estimate linear models when the classical OLS estimator is computationally too demanding when analyzing large datasets: The Uluru algorithm (Dhillon et al. 2013). 2.2.1 OLS as a point of reference Recall the OLS estimator in matrix notation, given the linear model \\(\\mathbf{y}=\\mathbf{X}\\beta + \\epsilon\\): \\(\\hat{\\beta}_{OLS} = (\\mathbf{X}^\\intercal\\mathbf{X})^{-1}\\mathbf{X}^{\\intercal}\\mathbf{y}\\). In order to compute \\(\\hat{\\beta}_{OLS}\\), we have to compute \\((\\mathbf{X}^\\intercal\\mathbf{X})^{-1}\\), which implies a computationally expensive matrix inversion.7 If our data set is large, \\(\\mathbf{X}\\) is large and the inversion can take up a lot of computation time. Moreover, the inversion and matrix multiplication to get \\(\\hat{\\beta}_{OLS}\\) needs a lot of memory. In practice, it might well be that the estimation of a linear model via OLS with the standard approach in R (lm()) brings a computer to its knees, as there is not enough RAM available. To further illustrate the point, we implement the OLS estimator in R. beta_ols &lt;- function(X, y) { # compute cross products and inverse XXi &lt;- solve(crossprod(X,X)) Xy &lt;- crossprod(X, y) return( XXi %*% Xy ) } Now, we will test our OLS estimator function with a few (pseudo) random numbers in a Monte Carlo study. First, we set the sample size parameters n (how many observations shall our pseudo sample have?) and p (how many variables shall describe these observations?) and initiate the data set X. # set parameter values n &lt;- 10000000 p &lt;- 4 # Generate sample based on Monte Carlo # generate a design matrix (~ our &#39;dataset&#39;) with four variables and 10000 observations X &lt;- matrix(rnorm(n*p, mean = 10), ncol = p) # add column for intercept X &lt;- cbind(rep(1, n), X) Now we define how the real linear model looks like that we have in mind and compute the output y of this model, given the input X.8 # MC model y &lt;- 2 + 1.5*X[,2] + 4*X[,3] - 3.5*X[,4] + 0.5*X[,5] + rnorm(n) Finally, we test our beta_ols function. # apply the ols estimator beta_ols(X, y) ## [,1] ## [1,] 2.0004 ## [2,] 1.5000 ## [3,] 4.0006 ## [4,] -3.5004 ## [5,] 0.4999 2.2.2 The Uluru algorithm as an alternative to OLS Following Dhillon et al. (2013), we implement a procedure to compute \\(\\hat{\\beta}_{Uluru}\\): \\[\\hat{\\beta}_{Uluru}=\\hat{\\beta}_{FS} + \\hat{\\beta}_{correct}\\], where \\[\\hat{\\beta}_{FS} = (\\mathbf{X}_{subs}^\\intercal\\mathbf{X}_{subs})^{-1}\\mathbf{X}_{subs}^{\\intercal}\\mathbf{y}_{subs}\\], and \\[\\hat{\\beta}_{correct}= \\frac{n_{subs}}{n_{rem}} \\cdot (\\mathbf{X}_{subs}^\\intercal\\mathbf{X}_{subs})^{-1} \\mathbf{X}_{rem}^{\\intercal}\\mathbf{R}_{rem}\\], and \\[\\mathbf{R}_{rem} = \\mathbf{Y}_{rem} - \\mathbf{X}_{rem} \\cdot \\hat{\\beta}_{FS}\\]. The key idea behind this is that the computational bottleneck of the OLS estimator, the cross product and matrix inversion,\\((\\mathbf{X}^\\intercal\\mathbf{X})^{-1}\\), is only computed on a sub-sample (\\(X_{subs}\\), etc.), not the entire data set. However, the remainder of the data set is also taken into consideration (in order to correct a bias arising from the sub-sampling). Again, we implement the estimator in R to further illustrate this point. beta_uluru &lt;- function(X_subs, y_subs, X_rem, y_rem) { # compute beta_fs (this is simply OLS applied to the subsample) XXi_subs &lt;- solve(crossprod(X_subs, X_subs)) Xy_subs &lt;- crossprod(X_subs, y_subs) b_fs &lt;- XXi_subs %*% Xy_subs # compute \\mathbf{R}_{rem} R_rem &lt;- y_rem - X_rem %*% b_fs # compute \\hat{\\beta}_{correct} b_correct &lt;- (nrow(X_subs)/(nrow(X_rem))) * XXi_subs %*% crossprod(X_rem, R_rem) # beta uluru return(b_fs + b_correct) } Test it with the same input as above: # set size of subsample n_subs &lt;- 1000 # select subsample and remainder n_obs &lt;- nrow(X) X_subs &lt;- X[1L:n_subs,] y_subs &lt;- y[1L:n_subs] X_rem &lt;- X[(n_subs+1L):n_obs,] y_rem &lt;- y[(n_subs+1L):n_obs] # apply the uluru estimator beta_uluru(X_subs, y_subs, X_rem, y_rem) ## [,1] ## [1,] 2.0500 ## [2,] 1.4986 ## [3,] 3.9922 ## [4,] -3.4970 ## [5,] 0.5007 This looks quite good already. Let’s have a closer look with a little Monte Carlo study. The aim of the simulation study is to visualize the difference between the classical OLS approach and the Uluru algorithm with regard to bias and time complexity if we increase the sub-sample size in Uluru. For simplicity, we only look at the first estimated coefficient \\(\\beta_{1}\\). # define subsamples n_subs_sizes &lt;- seq(from = 1000, to = 500000, by=10000) n_runs &lt;- length(n_subs_sizes) # compute uluru result, stop time mc_results &lt;- rep(NA, n_runs) mc_times &lt;- rep(NA, n_runs) for (i in 1:n_runs) { # set size of subsample n_subs &lt;- n_subs_sizes[i] # select subsample and remainder n_obs &lt;- nrow(X) X_subs &lt;- X[1L:n_subs,] y_subs &lt;- y[1L:n_subs] X_rem &lt;- X[(n_subs+1L):n_obs,] y_rem &lt;- y[(n_subs+1L):n_obs] mc_results[i] &lt;- beta_uluru(X_subs, y_subs, X_rem, y_rem)[2] # the first element is the intercept mc_times[i] &lt;- system.time(beta_uluru(X_subs, y_subs, X_rem, y_rem))[3] } # compute ols results and ols time ols_time &lt;- system.time(beta_ols(X, y)) ols_res &lt;- beta_ols(X, y)[2] Let’s visualize the comparison with OLS. # load packages library(ggplot2) # prepare data to plot plotdata &lt;- data.frame(beta1 = mc_results, time_elapsed = mc_times, subs_size = n_subs_sizes) First, let’s look at the time used estimate the linear model. ggplot(plotdata, aes(x = subs_size, y = time_elapsed)) + geom_point(color=&quot;darkgreen&quot;) + geom_hline(yintercept = ols_time[3], color = &quot;red&quot;, size = 1) + theme_minimal() + ylab(&quot;Time elapsed&quot;) + xlab(&quot;Subsample size&quot;) The horizontal red line indicates the computation time for estimation via OLS, the green points indicate the computation time for the estimation via the Ulruru algorithm. Note that even for large sub-samples, the computation time is substantially lower than for OLS. Finally, let’s have a look at how close the results are to OLS. ggplot(plotdata, aes(x = subs_size, y = beta1)) + geom_hline(yintercept = ols_res, color = &quot;red&quot;, size = 1) + geom_hline(yintercept = 1.5, color = &quot;green&quot;, size = 1) + geom_point(color=&quot;darkgreen&quot;) + theme_minimal() + ylab(&quot;Estimated coefficient&quot;) + xlab(&quot;Subsample size&quot;) The horizontal red line indicates the size of the estimated coefficient, when using OLS. The horizontal green line indicates the size of the actual coefficient. The green points indicate the size of the same coefficient estimated by the Uluru algorithm for different sub-sample sizes. Note that even relatively small sub-samples already deliver estimates very close to the OLS estimates. Note that finding a model with good in-sample prediction performance is trivial when you have a lot of variables, simply adding more variables will improve the performance. However, that will inevitably result in a non-sense model as even highly significant variables might not have any actual predictive power when looking at out-of-sample predictions. Hence, in this kind of exercise we should exclusively focus on out-of-sample predictions when assessing the performance of candidate models.↩︎ We will in fact be working with a real-life Google Analytics data from www.googlemerchandiseshop.com, see here for details about the data set: https://www.blog.google/products/marketingplatform/analytics/introducing-google-analytics-sample/.↩︎ This is done by adding \\(\\lambda\\sum_k{|\\beta_k|}\\) as a ‘cost’ to the optimization problem.↩︎ The computational complexity of this is larger than \\(O(n^{2})\\). That is, for an input of size \\(n\\), the time needed to compute (or the number of operations needed) is \\(n^2\\).↩︎ In reality we would not know this, of course. Acting as if we knew the real model is exactly the point of Monte Carlo studies. It allows us to analyze the properties of estimators by simulation.↩︎ "],["software-programming-with-big-data.html", "Chapter 3 Software: Programming with (Big) Data 3.1 Domains of programming with (big) data 3.2 Measuring R performance 3.3 Writing efficient R code 3.4 SQL basics", " Chapter 3 Software: Programming with (Big) Data The programming language and computing environment R is particularly made for writing code in a data analytics context. However, the language was developed at a time when data analytics was primarily focused on moderately sized data sets that can easily be loaded/imported and worked with on a common PC. Depending on the field or industry you work in, this is not anymore the case today. In this chapter, we will explore some of R’s (potential) weaknesses as well as learn how to avoid them and how to exploit some of R’s strengths when it comes to working with large data sets. The first part of this chapter is primarily focused on understanding code profiling and improving code with the aim of making computationally intense data analytics scripts in R run faster. This chapter presupposes basic knowledge of R data structures and data types as well as experience with basic programming concepts such as loops.9 While R is a very useful tool for many aspects of big data analytics that we will cover in the following chapters, R alone is not enough for a basic big data analytics toolbox. The second part of this chapter introduces the reader to the Structured Query Language (SQL), a programming language designed for managing data in relational databases. Although the type of databases where SQL is traditionally encountered would not necessarily be considered part of big data analytics today, some versions of SQL are now used with systems particularly designed for big data analytics (such as Amazon Athena and Google BigQuery). Hence, with a good knowledge of R in combination with basic SQL skills, you will be able to productively engage with a large array of practical big data analytics problems. 3.1 Domains of programming with (big) data Programming tasks in the context of data analytics typically fall into one of the following broad categories. Procedures to import/export data. Procedures to clean and filter data. Implement functions for statistical analysis. When writing a program to process large amounts of data in any of these areas, it is helpful to take into consideration the following design choices: Which basic (already implemented) R functions are more or less suitable as building blocks for the program?10 How can we exploit/avoid some of R’s lower-level characteristics in order to write more efficient code? Is there a need to interface with a lower-level programming language in order to speed up the code? (advanced topic) Finally, there is an additional important point to be made regarding the writing of code for statistical analysis: Independent of how we write a statistical procedure in R (or in any other language, for that matter), keep in mind that there might be an alternative statistical procedure/algorithm that is faster but delivers approximately the same result (as long as we use a sufficiently large sample). 3.2 Measuring R performance When writing a data analysis script in R to process large amounts of data, it generally makes sense to first test each crucial part of the script with a small sub-sample. In order to nevertheless quickly recognize potential bottle necks, there are a couple of R packages that help you keep track of how long exactly each component of your script needs to process as well as how much memory it uses. The table below lists some of the packages and functions that you should keep in mind when “profiling” and testing your code. package function purpose utils object.size() Provides an estimate of the memory that is being used to store an R object. pryr object_size() Works similarly to object.size(), but counts more accurately and includes the size of environments. pryr mem_used() Returns the total amount of memory (in megabytes) currently used by R. pryr mem_change() Shows the change in memory (in megabytes) before and after running code. base system.time() Returns CPU (and other) times that an R expression used. microbenchmark microbenchmark() Highly accurate timing of R expression evaluation. bench mark() Benchmark a series of functions. profvis profvis() Profiles an R expression and visualizes the profiling data (usage of memory, time elapsed, etc.). Most of these functions are used in an interactive way in the R console. They serve either of two purposes that are central to profiling and improving your code’s performance. First, in order to assess the performance of your R code you probably want to know how long it takes to run your entire script or a specific part of your script. The system.time()-function provides an easy way to check this. This function is loaded by default with R, there is no need to install an additional package. Simply wrap it around the line(s) of code that you want to assess. # how much time does it take to run this loop? system.time(for (i in 1:100) {i + 5}) ## user system elapsed ## 0.002 0.000 0.001 Note that each time you run this line of code, the returned amount of time varies slightly. This has to do with the fact that the actual time needed to run a line of code can depend on various other processes happening at the same time on your computer. The microbenchmark and bench packages provide additional functions to measure execution time in more sophisticated ways. In particular, they account for the fact that the processing time for the same code might vary and automatically run the code several times in order to return statistics about the processing time. In addition, microbenchmark() provides highly detailed and highly accurate timing of R expression evaluation. The function is particularly useful to accurately find even “minor” room for improvement when testing a data analysis script on a smaller sub-sample (which might scale when working on a large data set). For example, suppose you need to run a for-loop over millions of iterations and there are different ways to implement the loop of the body (which does not take too much time to process in one iteration). Note that the function actually evaluates the R expression in question many times and returns a statistical summary of the timings. # load package library(microbenchmark) # how much time does it take to run this loop (exactly)? microbenchmark(for (i in 1:100) {i + 5}) ## Unit: milliseconds ## expr min lq mean median ## for (i in 1:100) { i + 5 } 1.09 1.136 1.26 1.178 ## uq max neval ## 1.213 7.361 100 Second, a key aspect to improving the performance of data analysis scripts in R is to detect inefficient memory allocation as well as avoiding that an R-object is either growing too much or is generally too large to handle in memory. To this end, you might want to monitor how much memory R occupies at different points in your script as well as how much memory is taken up by individual R objects. For example, object.size() returns the size of an R object, that is the amount of memory it takes up in the R environment in bytes (pryr::object_size() counts slightly more accurately). hello &lt;- &quot;Hello, World!&quot; object.size(hello) ## 120 bytes This is useful to implementing your script with a generally less memory-intense approach. For example, for a specific task it might not matter whether a particular variable is stored as a character vector or a factor. But storing it as character turns out to be more memory intense (why?). # initiate a large string vector containing letters large_string &lt;- rep(LETTERS[1:20], 1000^2) head(large_string) ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; # store the same information as a factor in a new variable large_factor &lt;- as.factor(large_string) # is one bigger than the other? object.size(large_string) - object.size(large_factor) ## 79999456 bytes pryr::mem_change() is useful to track how different parts of your script affect the overall memory occupied by R. # load package library(pryr) ## Registered S3 method overwritten by &#39;pryr&#39;: ## method from ## print.bytes Rcpp # initiate a vector with 1000 (pseudo)-random numbers mem_change( thousand_numbers &lt;- runif(1000) ) ## 488 B # initiate a vector with 1M (pseudo)-random numbers mem_change( a_million_numbers &lt;- runif(1000^2) ) ## 528 B bench::mark() allows you to easily compare the performance of several different implementations of a code chunk both regarding timing and memory usage. The following code example illustrates this in a comparison of two approaches to computing the product of each element in a vector x with a factor z. # load packages library(bench) # initiate variables x &lt;- 1:10000 z &lt;- 1.5 # approach 1: loop multiplication &lt;- function(x,z) { result &lt;- c() for (i in 1:length(x)) {result &lt;- c(result, x[i]*z)} return(result) } result &lt;- multiplication(x,z) head(result) ## [1] 1.5 3.0 4.5 6.0 7.5 9.0 # approach II: &quot;R-style&quot; result2 &lt;- x * z head(result2) ## [1] 1.5 3.0 4.5 6.0 7.5 9.0 # comparison benchmarking &lt;- mark( result &lt;- multiplication(x,z), result2 &lt;- x * z, min_iterations = 50 ) benchmarking[, 4:9] ## # A tibble: 2 x 3 ## `itr/sec` mem_alloc `gc/sec` ## &lt;dbl&gt; &lt;bch:byt&gt; &lt;dbl&gt; ## 1 13.7 382MB 7.72 ## 2 84960. 78.2KB 0 In addition, the bench package provides a simple way to visualize these outputs: plot(benchmarking, type = &quot;boxplot&quot;) ## Loading required namespace: tidyr Finally, to analyze the performance of your entire script/program the profvis package provides visual summaries to quickly detect the most prominent bottle necks. You can either call this via the profvis() function with the code section to be profiled as argument, or via the RStudio user interface by clicking on the Code Tools menu in the editor window and select “Profile selected lines.” # load package library(profvis) # analyse performance of several lines of code profvis({ x &lt;- 1:10000 z &lt;- 1.5 # approach 1: loop multiplication &lt;- function(x,z) { result &lt;- c() for (i in 1:length(x)) {result &lt;- c(result, x[i]*z)} return(result) } result &lt;- multiplication(x,z) # approach II: &quot;R-style&quot; result2 &lt;- x * z head(result2) }) 3.3 Writing efficient R code This subsection touches upon several prominent aspects of writing efficient/fast R code.11 3.3.1 Memory allocation and growing objects R tends to “grow” already initiated objects in memory when they are modified. At the initiation of the object a small amount of memory is occupied at some location in memory. In simple terms, once the object grows, it might not have enough space where it is currently located. Hence, it needs to be “moved” to another location in memory with more space available. This moving, or “re-allocation” of memory, needs time and slows down the overall process. This potential is most practically illustrated with a for-loop in which each iteration’s result is stored as an element of a vector (the object in question). To avoid growing this object, you need to instruct R to pre-allocate the memory necessary to contain the final result. If we don’t do that, each iteration of the loop causes R to re-allocate memory because the number of elements in the vector/list is changing. In simple terms, this means that R needs to execute more steps in each iteration. In the following example, we compare the performance of two functions. One taking this principle into account, the other not. The functions take a numeric vector as input and return the square root of each element of the numeric vector. # naïve implementation sqrt_vector &lt;- function(x) { output &lt;- c() for (i in 1:length(x)) { output &lt;- c(output, x[i]^(1/2)) } return(output) } # implementation with pre-allocation of memory sqrt_vector_faster &lt;- function(x) { output &lt;- rep(NA, length(x)) for (i in 1:length(x)) { output[i] &lt;- x[i]^(1/2) } return(output) } As a proof of concept we use system.time() to measure the difference in speed for various input sizes.12 # the different sizes of the vectors we will put into the two functions input_sizes &lt;- seq(from = 100, to = 10000, by = 100) # create the input vectors inputs &lt;- sapply(input_sizes, rnorm) # compute outputs for each of the functions output_slower &lt;- sapply(inputs, function(x){ system.time(sqrt_vector(x))[&quot;elapsed&quot;] } ) output_faster &lt;- sapply(inputs, function(x){ system.time(sqrt_vector_faster(x))[&quot;elapsed&quot;] } ) The following plot shows the difference in the performance of the two functions. # load packages library(ggplot2) # initiate data frame for plot plotdata &lt;- data.frame(time_elapsed = c(output_slower, output_faster), input_size = c(input_sizes, input_sizes), Implementation= c(rep(&quot;sqrt_vector&quot;, length(output_slower)), rep(&quot;sqrt_vector_faster&quot;, length(output_faster)))) # plot ggplot(plotdata, aes(x=input_size, y= time_elapsed)) + geom_point(aes(colour=Implementation)) + theme_minimal(base_size = 18) + theme(legend.position = &quot;bottom&quot;) + ylab(&quot;Time elapsed (in seconds)&quot;) + xlab(&quot;No. of elements processed&quot;) Clearly, the version with pre-allocation of memory (avoiding growing an object) is overall much faster. In addition, we see that the problem with the growing object in the naive implementation tends to get worse with each iteration. The take-away message for the practitioner: if possible, always initiate the “container” object (list, matrix, etc.) for iteration results as an empty object of the final size/dimensions. The attentive reader and experienced R coder will have noticed by this point, that both of the functions implemented above are not really smart practice to solve the problem at hand. If you consider yourself part of this group the next subsection will make you more comfortable. 3.3.2 Vectorization in basic R functions We can further improve the performance of this function by exploiting a particular characteristic of R: in R ‘everything is a vector’ and many of the most basic R functions (such as math operators) are vectorized. In simple terms, this means that an operation is implemented to directly work on vectors in such a way that it can take advantage of the similarity of each of the vector’s elements. That is, R only has to figure out once how to apply a given function to a vector element in order to apply it to all elements of the vector. In a simple loop, R has to go through the same ‘preparatory’ steps again and again in each iteration. Following up on the problem from the previous subsection, we implement an additional function called sqrt_vector_fastest that exploits the fact that math operators in R are vectorized functions. We then re-run the same speed test as above with this function. # implementation with vectorization sqrt_vector_fastest &lt;- function(x) { output &lt;- x^(1/2) return(output) } # speed test output_fastest &lt;- sapply(inputs, function(x){ system.time(sqrt_vector_fastest(x))[&quot;elapsed&quot;] } ) Let’s have a look at whether this improves the function’s performance further. # load packages library(ggplot2) # initiate data frame for plot plotdata &lt;- data.frame(time_elapsed = c(output_faster, output_fastest), input_size = c(input_sizes, input_sizes), Implementation= c(rep(&quot;sqrt_vector_faster&quot;, length(output_faster)), rep(&quot;sqrt_vector_fastest&quot;, length(output_fastest)))) # plot ggplot(plotdata, aes(x=time_elapsed, y=Implementation)) + geom_boxplot(aes(colour=Implementation), show.legend = FALSE) + theme_minimal(base_size = 18) + xlab(&quot;Time elapsed (in seconds)&quot;) Clearly, the vectorized implementation is even faster. The take-away message: make use of vectorized basic R functions where possible. At this point you might wonder: why not always use vectorization over loops, when working with R? This question (and closely related similar questions) have been fiercely debated in the R online community over the last few years. Also the debate contains and has contained several (in my view) slightly misleading arguments. A simple answer to this question is: it is in fact not that simple to use actual vectorization for every kind of problem in r. There are a number of functions often mentioned to achieve “vectorization” easily in R, however, they do not actually implement actual vectorization in its original technical sense (the type just demonstrated here with the R math operators). Since this point is very prominent in debates about how to improve R code, the next subsection attempts to summarize the most important aspects to keep in mind. 3.3.3 apply-type functions and vectorization There are basically two ways to make use of some form of “vectorization” instead of writing loops. One approach is to use an apply-type function instead of loops. Note though, that the apply-type functions primarily make the writing of code more efficient. They still run a loop under the hood. Nevertheless, some apply-type functions might still outperform an explicit loops as they are might be better implemented.13 Consider, for example, lapply(), a function that takes a vector (atomic or list) as input and applies a function FUN to each of its elements. It is a straightforward alternative to for-loops in many situations (and it automatically takes care of the “growing objects” problem discussed above). The following example shows how we can get the same result by either writing a loop or using lapply(). The aim of the code example is to import the Health News in Twitter Data Set by Karami et al. (2017). The raw data consists of several text files that need to be imported to R consecutively. The text-files are located in data/twitter_texts/. For either approach of importing all of these files, we first need a list of the paths to all of the files. We can get this with list.files(). Also, for either approach we will make use of the fread-function in the data.table-package. # load packages library(data.table) # get a list of all file-paths textfiles &lt;- list.files(&quot;data/twitter_texts&quot;, full.names = TRUE) Now we can read in all the text files with a for-loop as follows. # prepare loop all_texts &lt;- list() n_files &lt;- length(textfiles) length(all_texts) &lt;- n_files # read all files listed in textfiles for (i in 1:n_files) { all_texts[[i]] &lt;- fread(textfiles[i]) } The imported files are now stored as data.table-objects in the list all_texts. With the following line of code we combine all of them in one data.table. # combine all in one data.table twitter_text &lt;- rbindlist(all_texts) # check result str(twitter_text) ## Classes &#39;data.table&#39; and &#39;data.frame&#39;: 42422 obs. of 3 variables: ## $ V1:integer64 585978391360221184 585947808772960257 585947807816650752 585866060991078401 585794106170839041 585733482413891584 585733481608646657 585701601131765761 ... ## $ V2: chr &quot;Thu Apr 09 01:31:50 +0000 2015&quot; &quot;Wed Apr 08 23:30:18 +0000 2015&quot; &quot;Wed Apr 08 23:30:18 +0000 2015&quot; &quot;Wed Apr 08 18:05:28 +0000 2015&quot; ... ## $ V3: chr &quot;Breast cancer risk test devised http://bbc.in/1CimpJF&quot; &quot;GP workload harming care - BMA poll http://bbc.in/1ChTBRv&quot; &quot;Short people&#39;s &#39;heart risk greater&#39; http://bbc.in/1ChTANp&quot; &quot;New approach against HIV &#39;promising&#39; http://bbc.in/1E6jAjt&quot; ... ## - attr(*, &quot;.internal.selfref&quot;)=&lt;externalptr&gt; Alternatively, we can make use of lapply as follows in order to achieve exactly the same. # use lapply instead of loop all_texts &lt;- lapply(textfiles, fread) # combine all in one data.table twitter_text &lt;- rbindlist(all_texts) # check result str(twitter_text) ## Classes &#39;data.table&#39; and &#39;data.frame&#39;: 42422 obs. of 3 variables: ## $ V1:integer64 585978391360221184 585947808772960257 585947807816650752 585866060991078401 585794106170839041 585733482413891584 585733481608646657 585701601131765761 ... ## $ V2: chr &quot;Thu Apr 09 01:31:50 +0000 2015&quot; &quot;Wed Apr 08 23:30:18 +0000 2015&quot; &quot;Wed Apr 08 23:30:18 +0000 2015&quot; &quot;Wed Apr 08 18:05:28 +0000 2015&quot; ... ## $ V3: chr &quot;Breast cancer risk test devised http://bbc.in/1CimpJF&quot; &quot;GP workload harming care - BMA poll http://bbc.in/1ChTBRv&quot; &quot;Short people&#39;s &#39;heart risk greater&#39; http://bbc.in/1ChTANp&quot; &quot;New approach against HIV &#39;promising&#39; http://bbc.in/1E6jAjt&quot; ... ## - attr(*, &quot;.internal.selfref&quot;)=&lt;externalptr&gt; Finally, we can make use of Vectorization() in order to “vectorize” our own import function (written for this example). Again, this does not make use of vectorization in its original technical sense. # initiate the import function import_file &lt;- function(x) { parsed_x &lt;- fread(x) return(parsed_x) } # &#39;vectorize&#39; it import_files &lt;- Vectorize(import_file, SIMPLIFY = FALSE) # Apply the vectorized function all_texts &lt;- import_files(textfiles) twitter_text &lt;- rbindlist(all_texts) # check the result str(twitter_text) ## Classes &#39;data.table&#39; and &#39;data.frame&#39;: 42422 obs. of 3 variables: ## $ V1:integer64 585978391360221184 585947808772960257 585947807816650752 585866060991078401 585794106170839041 585733482413891584 585733481608646657 585701601131765761 ... ## $ V2: chr &quot;Thu Apr 09 01:31:50 +0000 2015&quot; &quot;Wed Apr 08 23:30:18 +0000 2015&quot; &quot;Wed Apr 08 23:30:18 +0000 2015&quot; &quot;Wed Apr 08 18:05:28 +0000 2015&quot; ... ## $ V3: chr &quot;Breast cancer risk test devised http://bbc.in/1CimpJF&quot; &quot;GP workload harming care - BMA poll http://bbc.in/1ChTBRv&quot; &quot;Short people&#39;s &#39;heart risk greater&#39; http://bbc.in/1ChTANp&quot; &quot;New approach against HIV &#39;promising&#39; http://bbc.in/1E6jAjt&quot; ... ## - attr(*, &quot;.internal.selfref&quot;)=&lt;externalptr&gt; The take-away message: instead of writing simple loops, use apply-type functions to save time writing code (and make the code easier to read) and automatically avoid memory-allocation problems. 3.3.4 Avoid unnecessary copying The “growing objects” problem discussed above is only one aspect that can lead to inefficient use of memory when working with R. Another potential problem of using up more memory than necessary during an execution of an R-script, is how R handles objects/variables and their names. Consider the following line of code. a &lt;- runif(10000) what is usually said to describe what is happening here is something along the lines of “we initiate a variable called a and assign a numeric vector with 10,000 random numbers. What in fact happens is that the name a is assigned to the integer vector (which in turn exists at a specific memory address). Thus values do not have names but names have values. This has important consequences for memory allocation and performance. For example, because a is in fact just a name attached to a value, the following does not involve any copying of values. It simply”binds\" another name, b, to the same value to which a is already bound. b &lt;- a We can prove this in two ways. First, if what I just stated was not true, the line above would actually lead to more memory being occupied by the current R session. However, this is not the case: object_size(a) ## 80 kB mem_change(c &lt;- a) ## -662 kB Second, we can see that the values to which a and b are bound are stored at the same memory address. Hence, they are the same values. # load packages library(lobstr) ## ## Attaching package: &#39;lobstr&#39; ## The following objects are masked from &#39;package:pryr&#39;: ## ## ast, mem_used # check memory addresses of objects obj_addr(a) ## [1] &quot;0x564123472140&quot; obj_addr(b) ## [1] &quot;0x564123472140&quot; Now you probably wonder, what happens to b if we modify a. After all, if the values to which b is bound are changed when we write code concerning a, we might end up with very surprising output. The answer is, and this is key (!), once we modify a, the values need to be copied in order to ensure the integrity of b. Only at this point, our program will require more memory. # check the first element&#39;s value a[1] ## [1] 0.6808 b[1] ## [1] 0.6808 # modify a, check memory change mem_change(a[1] &lt;- 0) ## 77.5 kB # check memory addresses obj_addr(a) ## [1] &quot;0x56412328b450&quot; obj_addr(b) ## [1] &quot;0x564123472140&quot; Note that the entire vector needed to be copied for this. There is, of course, a lesson from all this regarding writing efficient code. Knowing how actual copying of values does occur helps avoiding unnecessary copying. The larger an object, the more time it will take to copy it in memory. Objects with a single binding get modified in place (no copying): mem_change(d &lt;- runif(10000)) ## 112 B mem_change(d[1] &lt;- 0) ## 672 B 3.3.5 Releasing memory Closely related to the issue of copy-upon-modify, is the issue of “releasing” memory via “garbage collection.” If your program uses up a lot of (too much) memory (typical for working with large data sets), all processes on your computer might substantially slow down (we will look more closely into why this is the case in the next chapter). Hence, you might want to remove/delete an object once you do not need it anymore. This can be done with the rm() function. mem_change(large_vector &lt;- runif(10^8)) ## 800 MB mem_change(rm(large_vector)) ## -800 MB rm() removes objects that are currently accessible in the global R environment. However, some objects/values might technically not be visible/accessible anymore (for example, objects that have been created in a function which has since returned the function output). To also release memory occupied by these objects you can call gc() (the garbage collector). While R will automatically collect the garbage once it is close to running out of memory, explicitly calling gc can still improve the performance of your script when working with large data sets. This is in particular the case when R is not the only data-intense process running on your computer. For example, when running an R script involving the repeated querying of data from a local SQL database and the subsequent memory-intense processing of this data in R, you can avoid using up too much memory by running rm and gc explicitly.14 3.3.6 Beyond R So far, we have explored idiosyncrasies of R we should be aware of when writing programs to handle and analyze large data sets. While this has shown that R has many advantages for working with data, it also revealed some aspects of R that might result in low performance compared other programming languages. A simple generic explanation for this is that R is an interpreted language, meaning that when we execute R code, it is processed (statement by statement) by an ‘interpreter’ that translates the code into machine code (without the user giving any specific instructions). In contrast, when writing code in a ‘compiled language,’ we first have to explicitly compile the code and then run the compiled program. Running code that is already compiled is typically much faster than running R code that has to be interpreted before it can actually be processed by the CPU. For advanced programmers, R offers various options to directly make use of compiled programs (for example, written in C, C++, or FORTRAN). In fact several of the core R functions installed with the basic R distribution are implemented in one of these lower-level programming languages and the R function we call simply interacts with these functions. We can actually investigate this by looking at the source code of an R function. When simply typing the name of a function (such as our import_file()) to the console, R is printing the function’s source code to the console. import_file ## function(x) { ## parsed_x &lt;- fread(x) ## return(parsed_x) ## } ## &lt;bytecode: 0x564129a3a600&gt; However, if we do the same for function sum, we don’t see any actual source code. sum ## function (..., na.rm = FALSE) .Primitive(&quot;sum&quot;) Instead .Primitive() indicates that sum() is actually referring to an internal function (in this case implemented in C). While the use of functions implemented in a lower-level language is a common technique to improve the speed of ‘R’ functions, it is particularly prominent in the context of functions/packages made to deal with large amounts of data (such as the data.table package). 3.4 SQL basics Are tomorrow’s bigger computers going to solve the problem? For some people, yes—their data will stay the same size and computers will get big enough to hold it comfortably. For other people it will only get worse—more powerful computers means extraordinarily larger datasets. If you are likely to be in this latter group, you might want to get used to working with databases now. (Burns 2011) The Structured Query Language (SQL) has become a bread-and-butter tool for data analysts and data scientists due to its broad application in systems used to store large amounts of data. While traditionally only encountered in the context of structured data stored in relational database management systems, some versions of it are now also used to query data from data warehouse systems (e.g. Amazon Redshift) and even to query massive amounts (terabytes or even petabytes) of data stored in data lakes (e.g., Amazon Athena). In all of these applications, SQL’s purpose (from the data analytics’ perspective) is to provide a convenient and efficient way to query data from mass storage for analysis. Instead of importing a CSV file into R and then filtering it in order to get to the analytic data set, we use SQL to express how the analytic data set should look like (which variables and rows should be included). The latter point is very important to keep in mind when already having experience with a language like R and learning SQL for the first time. In R we write code to instruct the computer what to do with the data. For example, we tell it to import a csv file called economics.csv as a data.table, then we instruct it to remove observations which are older than a certain date according to the date column, then we instruct it to compute the average of the unemploy column values for each year based on the date column and then return the result as a separate data frame. # import data econ &lt;- read.csv(&quot;data/economics.csv&quot;) # filter econ2 &lt;- econ[&quot;1968-01-01&quot;&lt;=econ$date,] # compute yearly averages (basic R approach) econ2$year &lt;- lubridate::year(econ2$date) years &lt;- unique(econ2$year) averages &lt;- sapply(years, FUN = function(x) mean(econ2[econ2$year==x,&quot;unemploy&quot;])) output &lt;- data.frame(year=years, average_unemploy=averages) # inspect the first few lines of the result head(output) ## year average_unemploy ## 1 1968 2797 ## 2 1969 2830 ## 3 1970 4127 ## 4 1971 5022 ## 5 1972 4876 ## 6 1973 4359 In contrast, when using SQL we write code that describes how the final result is supposed to look like. The SQL engine processing the code then takes care of the rest and returns the result in the most efficient way.15 SELECT strftime(&#39;%Y&#39;, `date`) AS year, AVG(unemploy) AS average_unemploy FROM econ WHERE &quot;1968-01-01&quot;&lt;=`date` GROUP BY year LIMIT 6; Table 3.1: 6 records year average_unemploy 1968 2797 1969 2830 1970 4127 1971 5022 1972 4876 1973 4359 For the moment, we will only focus on the code and ignore the underlying hardware and database concepts (those will be discussed in more detail in chapter 5). 3.4.1 First steps in SQL(ite) In order to get familiar with coding in SQL, we work with a free and easy-to-use version of SQL called SQLite. SQLite is a free full-featured SQL database engine widely used across platforms. It comes usually pre-installed with Windows and Mac/OSX distributions and has (from the user’s perspective) all the core features of more sophisticated SQL versions. Unlike the more sophisticated SQL systems, SQLite does not rely explicitly on a client/server-model. That is, there is no need to set up your database on a server and then query it from a client interface. In fact, setting it up is straightforward. In the terminal, we can directly call SQLite as a command-line tool (on most modern computers the command is now sqlite3, SQLite version 3). In this first code example, we set up an SQLite database using the command line. In the file structure of the book repository, we first switch to the data directory. cd data With one simple command, we start up SQLite, create a new database called mydb.sqlite and connect to the newly created database.16 sqlite3 mydb.sqlite This created a new file mydb.sqlite in our data directory which contains the newly created database. And, we are now running sqlite in the terminal (indicated with the sqlite&gt;. This means we can now type SQL code in the terminal to run queries and other SQL commands. At this point, the newly created database does not contain any data yet. There are no tables in it. We can see this by running the .tables command. .tables As expected, nothing is returned. Now, let’s create our first table and import the economics.csv data set to it. In SQLite, it makes sense to first set up an empty table in which all column data types are defined before importing data from a CSV-file to it. If a CSV is directly imported to a new table (without type definitions), all columns will be set to TEXT (similar to character in R) by default. Setting the right data type for each variable follows essentially the same logic as setting the data types of a data frame’s columns in R (with the difference that in SQL this also affects how the data is stored on disk).17 In a first step, we thus create a new table called econ. -- Create the new table CREATE TABLE econ( &quot;date&quot; DATE, &quot;pce&quot; REAL, &quot;pop&quot; REAL, &quot;psavert&quot; REAL, &quot;uempmed&quot; REAL, &quot;unemploy&quot; INTEGER ); Then, we can import the data from the csv file, by first switching to CSV mode via the command .mode csv and then importing the data to econ with .import. The .import command expects as a first argument the path to the CSV file on disk and as a second argument the name of the table to import the data to. -- prepare import .mode csv -- import data from csv .import --skip 1 economics.csv econ Now we can have a look at the new database table in SQLite. .tables shows that we now have one table called econ in our database and .schema displays the structure of the new econ table. .tables # econ .schema econ # CREATE TABLE econ( # &quot;date&quot; DATE, # &quot;pce&quot; REAL, # &quot;pop&quot; REAL, # &quot;psavert&quot; REAL, # &quot;uempmed&quot; REAL, # &quot;unemploy&quot; INTEGER # ); With this, we can start querying data with SQLite. In order to make the query results easier to read, we first set two options regarding how query results are displayed in the terminal. .header on enables the display of the column names in the returned query results. And .mode columns arranges the query results in columns. .header on .mode columns In our first query, we select all (*) variable values of the observation of January 1968. select * from econ where date = &#39;1968-01-01&#39;; Table 3.2: 1 records date pce pop psavert uempmed unemploy 1968-01-01 531.5 199808 11.7 5.1 2878 3.4.1.1 Simple queries Now let’s select all dates and unemployment values of observations with more than 15 million unemployed, ordered by date. select date, unemploy from econ where unemploy &gt; 15000 order by date; Table 3.3: 9 records date unemploy 2009-09-01 15009 2009-10-01 15352 2009-11-01 15219 2009-12-01 15098 2010-01-01 15046 2010-02-01 15113 2010-03-01 15202 2010-04-01 15325 2010-11-01 15081 3.4.2 Joins So far, we have only considered queries involving one table of data. However, SQL provides a very efficient way to join data from various tables. Again, the way of writing SQL code is the same: you describe how the final table should look like and from where the data is to be selected. Let’s extend the previous example by importing an additional table to our mydb.sqlite. The additional data is stored in the file inflation.csv in the book’s data folder and contains information on the US yearly inflation rate measured in percent.18 -- Create the new table CREATE TABLE inflation( &quot;date&quot; DATE, &quot;inflation_percent&quot; REAL ); -- prepare import .mode csv -- import data from csv .import --skip 1 inflation.csv inflation -- switch back to column mode .mode columns Note that the data stored in econ contains monthly observations, while inflation contains yearly observations. We can thus only meaningfully combine the two data sets at the level of years. Again using the combination of data sets in R as a reference point, here is what we would like to achieve expressed in R. The aim is to get a table that serves as basis for a Phillips curve plot, with yearly observations and the variables year, average_unemp_percent, and inflation_percent. # import data econ &lt;- read.csv(&quot;data/economics.csv&quot;) inflation &lt;- read.csv(&quot;data/inflation.csv&quot;) # prepare variable to match observations econ$year &lt;- lubridate::year(econ$date) inflation$year &lt;- lubridate::year(inflation$date) # create final output years &lt;- unique(econ$year) averages &lt;- sapply(years, FUN = function(x) { mean(econ[econ$year==x,&quot;unemploy&quot;]/econ[econ$year==x,&quot;pop&quot;])*100 } ) unemp &lt;- data.frame(year=years, average_unemp_percent=averages) # combine via the year column # keep all rows of econ output&lt;- merge(unemp, inflation[, c(&quot;year&quot;, &quot;inflation_percent&quot;)], by=&quot;year&quot;) # inspect output head(output) ## year average_unemp_percent inflation_percent ## 1 1967 1.512 2.773 ## 2 1968 1.394 4.272 ## 3 1969 1.396 5.462 ## 4 1970 2.013 5.838 ## 5 1971 2.419 4.293 ## 6 1972 2.324 3.272 Now let’s look at how the same table can be created in SQLite. SELECT strftime(&#39;%Y&#39;, econ.date) AS year, AVG(unemploy/pop)*100 AS average_unemp_percent, inflation_percent FROM econ INNER JOIN inflation ON year = strftime(&#39;%Y&#39;, inflation.date) GROUP BY year Table 3.4: Displaying records 1 - 6 year average_unemp_percent inflation_percent 1967 1.512 2.773 1968 1.394 4.272 1969 1.397 5.462 1970 2.013 5.838 1971 2.419 4.293 1972 2.324 3.272 When done working with the database, we can exit SQLite with the .quit command. Appendix B reviews the most relevant concepts regarding data types and data structures in R.↩︎ Throughout the rest of this book, I will point to specialized R packages and functions that are particularly designed to work with large amounts of data. Where necessary, we will also look more closely at the underlying concepts that explain why these specialized packages work better with large amounts of data than the standard approaches.↩︎ This is not intended to be a definitive guide to writing efficient R code in every aspect. Instead the subsection aims at covering most of the typical pitfalls to avoid and to provide an easy-to-remember number of tricks to keep in mind when writing R code for computationally intense tasks.↩︎ We generate the numeric input by drawing vectors of (pseudo) random numbers via rnorm().↩︎ If you know how to implement efficient for-loops in R (as you are certainly expected at this point), there is not much to gain from using an apply-type function instead of a loop, apart from making your code easier to read (and faster to write).↩︎ Note that running gc() takes some time, so you should not overdo it. As a rule of thumb, run gc() after removing a really large object.↩︎ In particular, the user does not need to explicitly instruct SQL at which point in the process which part (filtering, selecting variables, aggregating, creating new variables etc.) of the query should be processed. SQL will automatically find the most efficient way to process the query.↩︎ If there is already a database called mydb.sqlite in this folder, the same command would simply start up SQLite and connect to the existing database.↩︎ The most commonly used data types in SQL all have a very similar R equivalent: DATE is like Date in R, REAL like numeric/double, INTEGER like integer, and TEXT like character.↩︎ Like the data stored in economics.csv, the data stored in inflation.csv is provided by the Federal Reserve Bank’s (FRED)[https://fred.stlouisfed.org/] website.↩︎ "],["hardware-computing-resources.html", "Chapter 4 Hardware: Computing Resources 4.1 Components of a standard computing environment 4.2 Mass storage 4.3 Random access memory (RAM) 4.4 Combining RAM and hard-disk: virtual memory 4.5 CPU and parallelization 4.6 GPUs for scientific computing", " Chapter 4 Hardware: Computing Resources In order to better understand how we can use the available computing resources most efficiently in an analytics task, this chapter first provides a basic conceptual introduction to the most important hardware components and how they matter for computation. 4.1 Components of a standard computing environment Figure 4.1 illustrates the key components of a standard computing environment to process digital data. In our case, these components serve the purpose of computing a statistic, given a large data set as input. Figure 4.1: Basic components of a standard computing environment. Mass Storage refers to the type of computer memory we use to store data in the long run. This is what we call the hard drive or hard disk. In order to work with data (e.g., in R), it first has to be loaded into the memory of our computer. More specifically, into the Random Access Memory (RAM). Typically, data is only loaded in the RAM as long as we work with it. The component actually processing data is the Central Processing Unit (CPU). When using R to process data, R commands are translated into complex combinations of a small set of basic operations which the CPU then executes. For what follows, consider the main difference between ‘data analytics’ and ‘Big Data analytics’ that in the latter case, the standard usage of one or several of these components fails or works very inefficiently because the amount of data overwhelms its normal capacity. From the hardware-perspective, there are two basic strategies to cope with the situation that one of these components is overwhelmed by the amount of data: Scale up (‘horizontal scaling’): Extend the physical capacity of the affected component by building a system with large RAM shared between applications. This sounds like a trivial solution (‘if RAM is too small, buy more RAM…’), but in practice it can be very expensive. Scale out (‘vertical scaling’): Distribute the workload over several computers (or separate components of a system). From a software-perspective, there are many (context-specific) strategies that can help us to use the resources available more efficiently in order to process large amounts of data. In the following sub-sections, we first get an idea of what we mean by capacity and big regarding the most important hardware components. First we focus on mass storage and memory, then on 4.2 Mass storage In a simple computing environment, the mass storage device (hard disk) is where the data is stored to be analyzed. So, in what units to we measure the size of data sets and consequently the mass storage capacity of a computer? The smallest unit of information in computing/digital data is called a bit (from binary digit; abbrev. ‘b’) and can take one of two (symbolic) values, either a 0 or a 1 (“off” or “on”). Consider, for example, the decimal number 139. Written in the binary system, 139 corresponds to the binary number 10001011. In order to store this number on a hard disk, we require a capacity of 8 bits, or one byte (1 byte = 8 bits; abbrev. ‘B’). Historically, one byte encoded a single character of text (i.e., in the ASCII character encoding system). 4 bytes (or 32 bits) are called a word. When thinking of a given data set in its raw/binary representation, we can simply think of it as a row of 0s and 1s. Bigger units for storage capacity usually build on bytes: \\(1 \\text{ kilobyte (KB)} = 1000^{1} \\approx 2^{10} \\text{ bytes}\\) \\(1 \\text{ megabyte (MB)} = 1000^{2} \\approx 2^{20} \\text{ bytes}\\) \\(1 \\text{ gigabyte (GB)} = 1000^{3} \\approx 2^{30} \\text{ bytes}\\) \\(1 \\text{ terabyte (TB)} = 1000^{4} \\approx 2^{40} \\text{ bytes}\\) \\(1 \\text{ petabyte (PB)} = 1000^{5} \\approx 2^{50} \\text{ bytes}\\) \\(1 \\text{ exabyte (EB)} = 1000^{6} \\approx 2^{60} \\text{ bytes}\\) \\(1 \\text{ zettabyte (ZB)} = 1000^{7} \\approx 2^{70} \\text{ bytes}\\) \\[1 ZB = 1000000000000000000000\\text{ bytes} = 1 \\text{ billion terabytes} = 1 \\text{ trillion gigabytes}.\\] Currently, a common laptop or desktop computer has several hundred GBs or 1-2 TBs of mass storage capacity. The problems related to a lack of mass storage capacity in Big Data Analytics are likely the easiest to understand. Suppose you collect large amounts of data from an online source such as the Twitter API. At some point, R will throw an error and stop the data collection procedure as the operating system will not allow R to use up more disk space. The simplest solution to this problem is to clean up your hard disk: empty the trash, archive files in the cloud or on an external drive and delete them on the main disk, etc. In addition, there are some easy-to-learn tricks to use from within R to safe some disk space. 4.2.1 Avoid redundancies Different formats to structure data stored on disk use up more or less space. A simple example is the comparison of JSON (JavaScript Object Notaion) to CSV (Comma Separated Values), both data structures that are widely used to store data for analytics purposes. JSON is much more flexible in that it allows the definition of abundantly complex hierarchical data structures (and even allows for hints at data types). However, this flexibility comes with some overhead in the usage of special characters to define the structure. Consider the following JSON excerpt of an economic time series fetched from the Federal Reserve’s FRED API. { &quot;realtime_start&quot;: &quot;2013-08-14&quot;, &quot;realtime_end&quot;: &quot;2013-08-14&quot;, &quot;observation_start&quot;: &quot;1776-07-04&quot;, &quot;observation_end&quot;: &quot;9999-12-31&quot;, &quot;units&quot;: &quot;lin&quot;, &quot;output_type&quot;: 1, &quot;file_type&quot;: &quot;json&quot;, &quot;order_by&quot;: &quot;observation_date&quot;, &quot;sort_order&quot;: &quot;asc&quot;, &quot;count&quot;: 84, &quot;offset&quot;: 0, &quot;limit&quot;: 100000, &quot;observations&quot;: [ { &quot;realtime_start&quot;: &quot;2013-08-14&quot;, &quot;realtime_end&quot;: &quot;2013-08-14&quot;, &quot;date&quot;: &quot;1929-01-01&quot;, &quot;value&quot;: &quot;1065.9&quot; }, { &quot;realtime_start&quot;: &quot;2013-08-14&quot;, &quot;realtime_end&quot;: &quot;2013-08-14&quot;, &quot;date&quot;: &quot;1930-01-01&quot;, &quot;value&quot;: &quot;975.5&quot; }, ..., { &quot;realtime_start&quot;: &quot;2013-08-14&quot;, &quot;realtime_end&quot;: &quot;2013-08-14&quot;, &quot;date&quot;: &quot;2012-01-01&quot;, &quot;value&quot;: &quot;15693.1&quot; } ] } The JSON format is very practical here to separate metadata (like what time frame is covered by this data set etc.) in the first few lines on top from the actual data in \"observations\" further down. However, note that due to this structure the key names like \"date\", and \"value\" occur for each observation in that time series. In addition \"realtime_start\" and \"realtime_end\" occur both in the metadata section and again in each observation. Each of those occurrences costs some bytes of storage space on your hard disk but does not add any information once you have parsed and imported the time series into R. The same information could also be stored in a more efficient way on your hard disk by simply storing the metadata in a separate text file and the actual observations in a CSV file (in a table-like structure): &quot;date&quot;,&quot;value&quot; &quot;1929-01-01&quot;, &quot;1065.9&quot; &quot;1930-01-01&quot;, &quot;975.5&quot; ..., &quot;2012-01-01&quot;, 15693.1&quot; In fact, in that particular example, storing the data in JSON format would take up more than double the hard-disk space than CSV. Of course, this is not to say that one should generally store data in CSV files. In many situations, you might really have to rely on JSON’s flexibility to represent more complex structures. However, in practice it is very much worth the while to think about whether you can improve storage efficiency by simply storing the raw data in a different format. Another related point to storing data in CSV files is to remove redundancies by splitting the data into several tables/CSV-files, whereby each table contains the variables exclusively describing the type of observation in it. For example, when analyzing customer data for marketing purposes, the data set stored in one CSV file might be at the level of individual purchases. That is each row contains both information on what has been purchased on which day by which customer as well as additional variables describing the customer (such as customer id, name, address, etc.). Instead of keeping all of this data in one file, we could split it into two files, where one only contains the order ids and corresponding customer ids as well as attributes of individual orders (but not additional attributes of the customers themselves) and the other contains the customer ids and all customer attributes. Thereby, we avoid redundancies in the form of repeatedly storing the same values of customer attributes (like name and address) for each order.19 4.2.2 Data compression Data compression essentially follows from the same basic idea of avoiding redundancies in data storage as the simple approaches discussed above. However, it happens on a much more fundamental level. Data compression algorithms encode the information contained in the original representation of the data with fewer bits. In the case of lossless compression, this results in a new data file containing the exact same information but taking up less space on disk. In simple terms, compression replaces repeatedly occurring sequences with shorter expressions and keeps track of replacements in a table. Based on the table, the file can then again be de-compressed to show the original representation of the data. For example, consider the following character string containing. &quot;xxxxxyyyyyzzzz&quot; The same data could be represented with fewer bits as: &quot;5x6y4z&quot; which needs less than half the bits to be stored (but contains the same information). There are several easy ways to use your mass storage capacity more efficiently with data compression in R. Most conveniently, some functions to import/export data in R directly allow for reading and writing of compressed formats. For example, the fread()/fwrite() functions provided in the data.table-package will automatically use the GZIP (de-)compression utility when writing to (reading from) a CSV file with a .gz file extension in the file name. # load packages library(data.table) # load example data from basic R installation data(&quot;LifeCycleSavings&quot;) # write data to normal csv file and check size fwrite(LifeCycleSavings, file=&quot;lcs.csv&quot;) file.size(&quot;lcs.csv&quot;) ## [1] 1441 # write data to a GZIPPED (compressed) csv file and check size fwrite(LifeCycleSavings, file=&quot;lcs.csv.gz&quot;) file.size(&quot;lcs.csv.gz&quot;) ## [1] 744 # read/import the compressed data lcs &lt;- data.table::fread(&quot;lcs.csv.gz&quot;) Alternatively, you can also use other types of data compressions as follows. # common ZIP compression (independent of data.table package) write.csv(LifeCycleSavings, file=&quot;lcs.csv&quot;) file.size(&quot;lcs.csv&quot;) ## [1] 1984 zip(zipfile = &quot;lcs.csv.zip&quot;, files = &quot;lcs.csv&quot;) file.size(&quot;lcs.csv.zip&quot;) ## [1] 1205 # unzip/decompress and read/import data lcs_path &lt;- unzip(&quot;lcs.csv.zip&quot;) lcs &lt;- read.csv(lcs_path) Note that data compression is subject to a time-memory trade-off. Compression and de-compression is computationally intense and needs time. When using compression in order to make more efficient use of the available mass storage capacity, think about how frequently you expect the data to be loaded into R as part of the data analysis tasks ahead and for how long your will need to keep the data stored on your hard disk. Importing GBs of compressed data can be uncomfortably slower than importing from a decompressed file. So far, we have only focused on data size in the context of mass storage capacity. But what happens once you load a large data set into R (e.g., by means of read.csv()? A program called a “parser” is executed that reads the raw data from the hard disk and creates a representation of that data in the R environment, that is, in random access memory (RAM). All common computers have more GBs of mass storage available than GBs of RAM. Hence, new problems to hardware capacity loom at the stage of data import, which brings us to the next subsection. 4.3 Random access memory (RAM) Currently, a common laptop or desktop computer has 8-32 GB of RAM capacity. These are more-or-less the numbers you should keep in the back of your mind for the examples/discussions that follow. That is, we will consider a data set as “big” if it takes up several GBs in RAM (and therefore might overwhelm a machine with 8GB RAM capacity). There are several types of problems that you might run into in practice when attempting to import and analyze a data set of the size close to or larger than your computers RAM capacity. First, importing the data might take much longer than expected, your computer might freeze during import (or later during the analysis), R/Rstudio might crash, you might get an Error message hinting at a lack of RAM. How can you anticipate such problems and what can you do about them? Many of the techniques and packages discussed in the following chapters are in one or the other way solutions to this kind of problems. However, there are a few relatively simple things to keep in mind before we go into these details. The same data stored on the mass storage device (e.g., in a CSV file) might take up more or less space in RAM. This is due to the fact that the data is (technically speaking) structured differently in a CSV or JSON file than in, for example, a data table or a matrix in R. For example, it is reasonable to anticipate that the example JSON file with the economic time series data, will take up less space as a time series object in R (in RAM) than it does on the hard disk (for one thing just simply due to the fact that we will not keep the redundancies mentioned before). The import might work well but some parts of the data analysis script might require much more memory to run through even without loading additional data from disk. A classical example for this is regression analysis performed with, for example, lm() in R. As part of the OLS estimation procedure, lm will need to create the model matrix (usually denoted \\(X\\)). Depending on the model you want to estimate, the model matrix might actually be larger than the data frame containing the data set. In fact, this can happen quite easily if you specify a fixed effects model in which you want to account for the fixed effects via dummy variables (for example, for each country except for one).20 Again, the result can be one of several. An error message hinting to a lack of memory, a crash, or the computer slowing down a lot. Anticipating these types of problems is very tricky since the memory problems are often caused at a lower level of a function from the package that provides you with the data analytics routine you intend to use. Accordingly, error messages might be rather cryptic. Keep in mind that you have some leeway to guide how much space imported data takes up in R by considering data structures and data types. For example, you can use factors instead of character vectors when importing categorical variables into R (the default in read.csv) and for some operations it makes sense to work with matrices instead of data frames. Finally, recall the lessons regarding memory usage from the section “Writing efficient R code” in chapter 1. 4.4 Combining RAM and hard-disk: virtual memory what if all RAM of our computer is not enough to store all the data we want to analyze? Modern operating systems have a way to dealing with such a situation. Once all RAM is used up by the currently running programs, the OS allocates parts of the memory back to the hard-disk which then works as virtual memory. The following figure illustrates this point. Figure 4.2: Virtual memory. Figure by Ehamberg (CC BY-SA 3.0). For example, when we implement an R-script that imports one file after the other into the R environment, ignoring the RAM capacity of our computer, the OS will start paging data to the virtual memory. This happens ‘under the hood’ without explicit instructions by the user. We quite likely notice that the computer slows down a lot when this happens. While this default usage of virtual memory by the OS is helpful to run several applications at the same time, each taking up a moderate amount of memory, it is not a really useful tool for processing large amounts of data in one application (R). However, the underlying idea of using both RAM and Mass storage simultaneously in order to cope with a lack of memory is very useful in the context of big data analytics. Several R packages have been developed that exploit the idea behind virtual memory explicitly for analyzing large amounts of data. The basic idea behind these packages is to map a data set to the hard disk when loading it into R. The actual data values are stored in chunks on the hard-disk, while the structure/metadata of the data set is loaded into R. See this week’s slide set as well as Walkowiak (2016), Chapter 3 for more details and example code. 4.5 CPU and parallelization The actual processing of the data is done in the computer’s central processing unit (CPU). Consequently, the performance of the CPU has a substantial effect on how fast a data analytics task runs. Thereby, a CPU’s performance is usually denoted by its clock rate measured in gigaherz (GHz). In simple terms, a CPU with a clock rate of 4.8 GHz can execute 4.8 billion basic operations per second. Holding all other aspects constant, you can thus expect an analytics task to run faster if it runs on a computer with higher CPU clock rate. Alternatively to scaling up the CPU, we can exploit that modern CPUs have several cores. In the normal usage of a PC, the operating system makes use of these cores in order to run several applications smoothly in parallel (e.g., you listen to music on Spotify while browsing the web and running some analytics script in RStudio in the background). Modern computing environments such as R allow us to explicitly run parts of the same analytics task in parallel, that is, on several CPU cores at the same time. Following the same logic, we can also connect several computers (each with several CPU cores) in a cluster computer and run the program in parallel on all of these computing nodes. Both of these approaches are generally referred to as parallelization and both are supported in several R packages. Thereby, an R program run in parallel typically involves the following steps First, several instances of R are running at the same time (across one machine with multiple CPU cores or across a cluster computer). One of the instances (i.e., the master instance) breaks the computation into batches and sends those to the other instances. Second, each of the instances processes its batch and sends the results back to the master instance. Finally, the master instance combines the partial results to the final result and returns it to the user. To illustrate this point, consider the following econometric problem: you have a customer data set with detailed data on customer characteristics, past customer behavior and information on online marketing campaigns. Your task is to figure out, which customers are more likely to react positively to the most recent online marketing campaign. The aim is to optimize personalized marketing campaigns in the future based on insights gained from this exercise. In a first step you take a computationally intense “brute force” approach: you run all possible regressions with the dependent variable Response (equal to 1 if the customer took the offer in the campaign and 0 otherwise). In total you have 21 independent variables, thus you need to run \\(2^20=1048576\\) logit regressions (this is without considering linear combinations of covariates etc.). Finally, you want to select the model with the best fit according to deviance. A simple sequential implementation to solve this problem could look like this (for the sake of time, we cap the number of regression models with N=10). # you can download the data set from # https://www.kaggle.com/jackdaoud/marketing-data?select=marketing_data.csv # PREPARATION ----------------------------- # packages library(stringr) # import data marketing &lt;- read.csv(&quot;data/marketing_data.csv&quot;) # clean/prepare data marketing$Income &lt;- as.numeric(gsub(&quot;[[:punct:]]&quot;, &quot;&quot;, marketing$Income)) marketing$days_customer &lt;- as.Date(Sys.Date())- as.Date(marketing$Dt_Customer, &quot;%m/%d/%y&quot;) marketing$Dt_Customer &lt;- NULL # all sets of independent vars indep &lt;- names(marketing)[ c(2:19, 27,28)] combinations_list &lt;- lapply(1:length(indep), function(x) combn(indep, x, simplify = FALSE)) combinations_list &lt;- unlist(combinations_list, recursive = FALSE) models &lt;- lapply(combinations_list, function(x) paste(&quot;Response ~&quot;, paste(x, collapse=&quot;+&quot;))) # COMPUTE REGRESSIONS -------------------------- N &lt;- 10 # just for illustration, the actual code is N &lt;- length(models) pseudo_Rsq &lt;- list() length(pseudo_Rsq) &lt;- N for ( i in 1:N) { # fit the logit model via maximum likelihood fit &lt;- glm(models[[i]], data=marketing, family = binomial()) # compute the proportion of deviance explained by the independent vars (~R^2) pseudo_Rsq[[i]] &lt;- 1-(fit$deviance/fit$null.deviance) } # SELECT THE WINNER --------------- models[[which.max(pseudo_Rsq)]] ## [1] &quot;Response ~ MntWines&quot; 4.5.1 Naive multi-session approach There is actually a simple way of doing this “manually” on a multi-core PC, which intuitively illustrates the point of parallelization (although it would not be a very practical approach): you write an R script that loads the data set, runs the fist \\(n\\) of the total of \\(N\\) regressions and stores the result in a local text file. Next, you run the script in your current RStudio session, open an additional RStudio session and run the script with the next \\(n\\) regressions, and so on until all cores are occupied with one RStudio session. In the end you collect all of the results from the separate text files and combine them to get the final result. Depending on the problem at hand, this could indeed speed up the overall task and it is technically speaking a form of a “multi-session” approach. However, as you have surely noticed, this is unlikely a very practical approach. 4.5.2 Multi-core and multi-node approach A more practical approach is to write one R script (with the help of some specialized packages) that instructs R to automatically distribute the batches to different cores (or different computing nodes in a cluster computer), control and monitor the progress in all cores, and then automatically collect and combine the results from all cores. There are several approaches to achieve this in R. 4.5.2.1 Parallel for-loops using socket Likely the most intuitive approach to parallelizing a task in R is the foreach package. It allows you to write a foreach statement that is very similar to the for-loop syntax in R. Hence, you can straightforwardly “translate” an already implemented sequential approach with a common for-loop to a parallel implementation. # COMPUTE REGRESSIONS IN PARALLEL (MULTI-CORE) -------------------------- # packages for parallel processing library(parallel) library(doSNOW) ## Loading required package: foreach ## Loading required package: iterators ## Loading required package: snow ## ## Attaching package: &#39;snow&#39; ## The following objects are masked from &#39;package:parallel&#39;: ## ## clusterApply, clusterApplyLB, clusterCall, ## clusterEvalQ, clusterExport, clusterMap, ## clusterSplit, makeCluster, parApply, ## parCapply, parLapply, parRapply, parSapply, ## splitIndices, stopCluster # get the number of cores available ncores &lt;- parallel::detectCores() # set cores for parallel processing ctemp &lt;- makeCluster(ncores) registerDoSNOW(ctemp) # prepare loop N &lt;- 10000 # just for illustration, the actual code is N &lt;- length(models) # run loop in parallel pseudo_Rsq &lt;- foreach ( i = 1:N, .combine = c) %dopar% { # fit the logit model via maximum likelihood fit &lt;- glm(models[[i]], data=marketing, family = binomial()) # compute the proportion of deviance explained by the independent vars (~R^2) return(1-(fit$deviance/fit$null.deviance)) } # SELECT THE WINNER --------------- models[[which.max(pseudo_Rsq)]] ## [1] &quot;Response ~ Year_Birth+Teenhome+Recency+MntWines+days_customer&quot; With relatively few cases, this approach is not very fast due to the overhead of “distributing” variables/objects from the master process to all cores/workers. In simple terms, the socket approach means that the cores do not share the same variables/the same environment, which creates overhead. However, this approach is usually very stable and runs on all platforms. 4.5.2.2 Parallel lapply using forking # COMPUTE REGRESSIONS IN PARALLEL (MULTI-CORE) -------------------------- # prepare parallel lapply (based on forking, here clearly faster than foreach) N &lt;- 10000 # just for illustration, the actual code is N &lt;- length(models) # run parallel lapply pseudo_Rsq &lt;- mclapply(1:N, mc.cores = ncores, FUN = function(i){ # fit the logit model via maximum likelihood fit &lt;- glm(models[[i]], data=marketing, family = binomial()) # compute the proportion of deviance explained by the independent vars (~R^2) return(1-(fit$deviance/fit$null.deviance)) }) # SELECT THE WINNER, SHOW FINAL OUTPUT --------------- best_model &lt;- models[[which.max(pseudo_Rsq)]] best_model ## [1] &quot;Response ~ Year_Birth+Teenhome+Recency+MntWines+days_customer&quot; #summary(glm(best_model, data=marketing, family = binomial())) In the fork approach, each core works with the same objects/variables in a shared environment, which makes this approach very fast. However, depending on what exactly is computed, sharing an environment can cause problems.21 If you are not sure whether your set up might run into issues with forking, better rely on a non-fork approach. 4.6 GPUs for scientific computing The success of the computer games industry in the late 1990s/early 2000s led to an interesting positive externality for scientific computing. The ever more demanding graphics of modern computer games and the huge economic success of the computer games industry set incentives for hardware producers to invest in research and development of more powerful ‘graphic cards,’ extending a normal PC/computing environment with additional computing power solely dedicated to graphics. At the heart of these graphic cards are so-called GPUs (Graphic Processing Units), microprocessors specifically optimized for graphics processing. The image below depicts a modern graphics card with NVIDIA GPUs, which is quite common in today’s ‘gaming’ PCs. Why did the hardware industry not simply invest in the development of more powerful CPUs to deal with the more demanding PC games? The main reason is that the architecture of CPUs is designed not only for efficiency but also flexibility. That is, a CPU needs to perform well in all kind of computations, some parallel, some sequential, etc. Computing graphics is a comparatively narrow domain of computation and designing a processing unit architecture that is custom-made to excel just at this one task is thus much more cost efficient. Interestingly, this graphics-specific architecture (specialized on highly parallel numerical [floating point] workloads) turns out to be also very useful in some core scientific computing tasks. In particular, matrix multiplications (see Fatahalian, Sugerman, and Hanrahan (2004) for a detailed discussion of why that is the case). A key aspect of GPUs is that they are composed of several multiprocessor units, of which each has in turn several cores. GPUS thus can perform computations with hundreds or even thousands of threads in parallel. The figure below illustrates this point. While, initially, programming GPUs for scientific computing required a very good understanding of the hardware. Graphics card producers have realized that there is an additional market for their products (in particular with the recent rise of deep learning), and provide several high-level APIs to use GPUs for other tasks than graphics processing. Over the last few years more high-level software has been developed, which makes it much easier to use GPUs in parallel computing tasks. The following subsections shows some examples of such software in the R environment.22 4.6.1 GPUs in R 4.6.1.1 GPU computing example: Matrix multiplication comparison (gpuR) The gpuR package provides basic R functions to compute with GPUs from within the R environment. In the following example we compare the performance of the CPU with the GPU based on a matrix multiplication exercise. For a large \\(N\\times P\\) matrix \\(X\\), we want to compute \\(X^tX\\). In a first step, we load the gpuR-package.23 Note the output to the console. It shows the type of GPU identified by gpuR. This is the platform on which gpuR will compute the GPU examples. In order to compare the performances, we also load the bench package. # load package library(bench) library(gpuR) ## Number of platforms: 1 ## - platform: NVIDIA Corporation: OpenCL 3.0 CUDA 11.6.134 ## - context device index: 0 ## - NVIDIA GeForce GTX 1650 ## checked all devices ## completed initialization Next, we initiate a large matrix filled with pseudo random numbers, representing a data set with \\(N\\) observations and \\(P\\) variables. # initiate data set with pseudo random numbers N &lt;- 10000 # number of observations P &lt;- 100 # number of variables X &lt;- matrix(rnorm(N * P, 0, 1), nrow = N, ncol =P) For the GPU examples to work, we need one more preparatory step. GPUs have their own memory, which they can access faster than they can access RAM. However, this GPU memory is typically not very large compared to the memory CPUs have access to. Hence, there is a potential trade-off between losing some efficiency but working with more data or vice versa.24 Here, we show both variants. With gpuMatrix() we create an object representing matrix X for computation on the GPU. However, this only points the GPU to the matrix and does not actually transfer data to the GPU’s memory. The latter is done in the other variant with vclMatrix(). # prepare GPU-specific objects/settings gpuX &lt;- gpuMatrix(X, type = &quot;float&quot;) # point GPU to matrix (matrix stored in non-GPU memory) vclX &lt;- vclMatrix(X, type = &quot;float&quot;) # transfer matrix to GPU (matrix stored in GPU memory) Now we run the three examples: first, based on standard R, using the CPU. Then, computing on the GPU but using CPU memory. And finally, computing on the GPU and using GPU memory. In order to make the comparison fair, we force bench::mark() to run at least 20 iterations per benchmarked variant. # compare three approaches (gpu_cpu &lt;- bench::mark( # compute with CPU cpu &lt;- t(X) %*% X, # GPU version, GPU pointer to CPU memory (gpuMatrix is simply a pointer) gpu1_pointer &lt;- t(gpuX) %*% gpuX, # GPU version, in GPU memory (vclMatrix formation is a memory transfer) gpu2_memory &lt;- t(vclX) %*% vclX, check = FALSE, memory = FALSE, min_iterations = 20)) ## # A tibble: 3 x 6 ## expression min median ## &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt; ## 1 cpu &lt;- t(X) %*% X 71.87ms 75.2ms ## 2 gpu1_pointer &lt;- t(gpuX) %*% gpuX 33.18ms 34.6ms ## 3 gpu2_memory &lt;- t(vclX) %*% vclX 9.71ms 15.6ms ## # … with 3 more variables: itr/sec &lt;dbl&gt;, ## # mem_alloc &lt;bch:byt&gt;, gc/sec &lt;dbl&gt; The performance comparison is visualized with boxplots. plot(gpu_cpu, type = &quot;boxplot&quot;) The theoretically expected pattern becomes clearly visible. When using the GPU + GPU memory, the matrix operation takes on average less than 20ms , with GPU + RAM over 30ms and with the common CPU operation close to 100ms to finish. In the chapters on applied data analysis, we will look at some applications of GPUs in the domain of deep learning (which heavily relies on matrix multiplications). This concept of organizing data in several tables is the basis of relational database management systems, which we will look at in more detail in chapter 5. However, the basic idea is also very useful to store the raw data efficiently even if there is not intention to later build a database and run SQL queries on it.↩︎ For example, if you specify something like lm(y~x1 + x2 + country, data=mydata) and country is a categorical variable (factor).↩︎ Also, this approach does not work on Windows machines (see ?mclapply for details).↩︎ Note that while these examples are easy to implement and run, setting up a GPU for scientific computing still can involve many steps and some knowledge of your computer’s system. The examples presuppose that all installation and configuration steps (GPU drivers, CUDA, etc.) have already been completed successfully.↩︎ As with the setting up of GPUs on your machine in general, installing all prerequisites to make gpuR work on your local machine can be a bit of work and can depend a lot on your system.↩︎ If we instruct the GPU to use the own memory, but the data does not fit in it, the program will result in an error.↩︎ "],["distributed-systems.html", "Chapter 5 Distributed Systems 5.1 MapReduce 5.2 Hadoop 5.3 Spark 5.4 Spark with R 5.5 Spark with SQL 5.6 Spark with R + SQL", " Chapter 5 Distributed Systems When working with very large data sets (i.e., terabytes of data), processing the data on one common computer might not work due to a lack of memory or would be way too slow due to a lack of computing power (CPU cores). The architecture or basic hardware set up of a common computer is subject to a limited amount of RAM and a limited number of CPUs/CPU cores. Hence simply scaling up might not be sufficient. Instead we need to scale out. In simple terms, this means to connect several computers (each with their own RAM, CPU, mass storage) in a network, distribute the data set across all computers (“nodes”) in this network, and work on the data simultaneously across all nodes. Such a computing system is commonly referred to as a “distributed system.” From a technical standpoint the key difference between a distributed system and the more familiar parallel system (e.g. our desktop computer with its multicore CPU) is that in distributed systems the different components do not share the same memory (and storage). Figure 5.1 illustrates this point. Figure 5.1: (a), (b): a distributed system. (c): a parallel system.I llustration by Miym (CC BY-SA 3.0). In a distributed system, the data set is literally split up into pieces that then reside separately on different nodes. This requires an additional “layer” of software (that coordinates the distribution/loading of data as well as the simultaneous processing) and a different approach (a different “programming model”) to defining computing/data analytics tasks. Below, we will look at both of these aspects in turn. 5.1 MapReduce The most broadly used programming model and its implementation for processing big data on distributed systems is called MapReduce. It essentially consists of two procedures and is conceptually very close to the “split-apply-combine” strategy in data analysis. First, the Map function sorts/filters the data (on each node). Then, a Reduce function aggregates the sorted/filtered data. In the background, the MapReduce “framework” orchestrates these processes across all nodes, collects the results, and returns them to the user. Let us illustrate the basic idea behind MapReduce with a simple example. Suppose you are working on a text mining task in which all the raw text in thousands of digitized books (stored as text files) need to be processed. In a first step, you want to compute word frequencies (countthe number of occurrences of specific words in all books combined). For simplicity, let us only focus on the following excerpts from two exemplary (and rather cryptic) books on botany: Text in book 1: Apple Orange Mango   Orange Grapes Plum   Text in book 2: Apple Plum Mango   Apple Apple Plum   The figure below illustrates the MapReduce process. First, the data is loaded from the original text files. Each line of text is then passed to individual mapper instances which separately split the lines of text into key-value pairs. Then the system sorts and shuffles all key-value pairs across all instances and finally. The reducer aggregates the sorted/shuffled key-value pairs (here: counts the number of word occurrences) and, finally, the master instance collects all the results and returns the final output. From this simple example, a key aspect of MapReduce should become clear: for the key tasks of mapping and reducing the data processing on one node/instance can happen completely independent from the processing on the other instances. Note that not for every data anlytics task this is so easily conceivable as for computing word frequencies. Figure 5.2: Illustration of the MapReduce programming model. 5.1.1 Map/Reduce Concept Illustrated in R In order to better understand the basic concept behind the MapReduce-Framework on a distributed system, let’s look at how we can combine the functions map() and reduce() in R to implement the basic MapReduce example shown above (this is just to illustrate the underlying idea, not to suggest that MapReduce actually is simply an application of the classical map and reduce (fold) functions in functional programming).25 The overall aim of the program is to count the number of times each word is repeated in a given text. The input to the program is thus a text, the output is a list of key-value pairs with the unique words occurring in the text as keys and their respective number of occurrences as values. In the code example, we will use the following text as input. # initiate the input text (for simplicity as one text string) input_text &lt;- &quot;Apple Orange Mango Orange Grapes Plum Apple Plum Mango Apple Apple Plum&quot; 5.1.2 Mapper The Mapper first splits the text into lines, and then splits the lines into key-value pairs, assigning to each key the value 1. For the first step we use strsplit() that takes a character string as input and splits it into a list of substrings according to the matches of a substring (here \"\\n\", indicating the end of a line). # Mapper splits input into lines lines &lt;- as.list(strsplit(input_text, &quot;\\n&quot;)[[1]]) lines ## [[1]] ## [1] &quot;Apple Orange Mango&quot; ## ## [[2]] ## [1] &quot;Orange Grapes Plum&quot; ## ## [[3]] ## [1] &quot;Apple Plum Mango&quot; ## ## [[4]] ## [1] &quot;Apple Apple Plum&quot; In a second step, we apply our own function (map_fun()) to each line of text via Map(). map_fun() splits each line into words (keys) and assigns a value of 1 to each key. # Mapper splits lines into Key-Value pairs map_fun &lt;- function(x){ # remove special characters x_clean &lt;- gsub(&quot;[[:punct:]]&quot;, &quot;&quot;, x) # split line into words keys &lt;- unlist(strsplit(x_clean, &quot; &quot;)) # initiate key-value pairs key_values &lt;- rep(1, length(keys)) names(key_values) &lt;- keys return(key_values) } kv_pairs &lt;- Map(map_fun, lines) # look at the result kv_pairs ## [[1]] ## Apple Orange Mango ## 1 1 1 ## ## [[2]] ## Orange Grapes Plum ## 1 1 1 ## ## [[3]] ## Apple Plum Mango ## 1 1 1 ## ## [[4]] ## Apple Apple Plum ## 1 1 1 5.1.3 Reducer The Reducer first sorts and shuffles the input from the Mapper and then reduces the key-value pairs by summing up the values for each key. # order and shuffle kv_pairs &lt;- unlist(kv_pairs) keys &lt;- unique(names(kv_pairs)) keys &lt;- keys[order(keys)] shuffled &lt;- lapply(keys, function(x) kv_pairs[x == names(kv_pairs)]) shuffled ## [[1]] ## Apple Apple Apple Apple ## 1 1 1 1 ## ## [[2]] ## Grapes ## 1 ## ## [[3]] ## Mango Mango ## 1 1 ## ## [[4]] ## Orange Orange ## 1 1 ## ## [[5]] ## Plum Plum Plum ## 1 1 1 Now we can sum up the keys in order to get the word count for the entire input. sums &lt;- lapply(shuffled, Reduce, f=sum) names(sums) &lt;- keys sums ## $Apple ## [1] 4 ## ## $Grapes ## [1] 1 ## ## $Mango ## [1] 2 ## ## $Orange ## [1] 2 ## ## $Plum ## [1] 3 5.2 Hadoop Hadoop is probably the most broadly known and used system to implement the MapReduce framework. A decade ago big data analytics with really large data sets often involved directly interacting with/ working in Hadoop to run MapReduce jobs. However, over the last few years various higher-level interfaces have been developed that make the usage of MapReduce/Hadoop for data analysts much more easily accessible. The purpose of this section is thus to give a lightweight introduction to the underlying basics that power some of the code examples and tutorials discussed in the data analytics chapters towards the end of this book. 5.2.1 Hadoop word count example To get an idea of how running a Hadoop job looks like, we run the same simple word count example introduced above on a local Hadoop installation. The example presupposes a local installation of Hadoop version 2.10.1 (see Appendix C for details) and can easily be run on a completely normal desktop/laptop computer running Ubuntu Linux. As a side remark, this actually illustrates an important aspect of developing MapReduce scripts in Hadoop (and many of the software packages building on it): the code can be easily developed tested locally on a small machine and only later transferred to the actual Hadoop cluster to be run on the full data set. The basic Hadoop installation comes with a few templates for very typical map/reduce programs.26 Below we replicate the same word-count example as shown in simple R code above. In a first step, we create an input directory where we store the input file(s) to feed to Hadoop. # create directory for input files (typically text files) mkdir ~/input Then we add a text file containing the same text as in the example above. echo &quot;Apple Orange Mango Orange Grapes Plum Apple Plum Mango Apple Apple Plum&quot; &gt;&gt; ~/input/text.txt Now we can run the MapReduce/Hadoop word count as follows, storing the results in a new directory called wordcount_example. This is where we use the already implemented Hadoop script to run a word count job Map/Reduce style. This is where we rely on the already implemented wordcount example provided with the Hadoop installation (located in /usr/local/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.10.1.jar) # run mapreduce word count /usr/local/hadoop/bin/hadoop jar /usr/local/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.10.1.jar wordcount ~/input ~/wc_example What this line says is: run the Hadoop program called wordcount implemented in the jar-file hadoop-mapreduce-examples-2.10.1.jar, use the files in directory ~/input containing the raw text as input and store the final output in directory ~/wc_example. cat ~/wc_example/* ## Apple 4 ## Grapes 1 ## Mango 2 ## Orange 2 ## Plum 3 What looks rather simple in this example can get very complex once you want to write an entire data analysis script with all kind of analysis for Hadoop. Also, Hadoop was designed for batch processing and does not offer a simple interface for interactive sessions. All of this makes it rather impractical for a usual analytics workflow as we know it from working with R. This is where Apache Spark comes to the rescue. 5.3 Spark Also building on the MapReduce model, Spark is a cluster computing platform particularly made for data analytics. It partially relies on Hadoop for handling storage and resource management, but offers way more easy-to-use high-level interfaces for typical analytics tasks. From the technical perspective (in very simple terms), Spark also addresses some shortcomings of the Hadoop platform, further improving efficiency/speed for many data analysis tasks. More importantly for our purposes, in contrast to Hadoop, Spark is specifically made for interactively developing and runnin data analytics scripts and therefore more easily accessible for people with an applied econometrics background but no substantial knowledge in MapReduce cluster computing. In particular, it comes with several high-level operators that make it rather easy to implement analytics tasks. Moreover, as we will see in later chapters, it is very easy to use interactively from within R (and other languages like Python, SQL, and Scala). This makes the platform much more accessible and worth the while for empirical economic research, even for relatively simple econometric analyses. The following figure illustrates the basic components of Spark. The main functionality, including memory management, task scheduling, and the implementation of Spark’s capabilities to handle and manipulate data distributed across many nodes in parallel. Several built-in libraries extend the core implementation, covering specific domains of practical data analytics tasks (querying structured data via SQL, processing streams of data, machine learning, and network/graph analysis). The latter two provide various common functions/algorithms frequently used in data analytics/applied econometrics, such as generalized linear regression, summary statistics, and principal component analysis. Figure 5.3: Basic Spark stack (source: https://spark.apache.org/images/spark-stack.png) At the heart of big data analytics with Spark is the fundamental data structure called ‘resilient distributed data set’ (RDD). When loading/importing data into Spark, the data is automatically distributed across the cluster in RDDs (~ as distributed collections of elements) and manipulations are then executed in parallel in these RDDs. However, the entire Spark framework also works locally on a simple laptop or desktop computer. This is of great advantage when learning Spark and testing/debugging an analytics script on a small sample of the real data set. 5.4 Spark with R There are two prominent packages to use Spark in connection to R: SparkR and RStudio’s sparklyr, the former is in some ways closer to Spark’s Python API, the latter is closer to the dplyr-type of data handling (and is ‘compatible’ with the ‘tidyverse’).27 For the very simple introductory examples below, either package could have been used equally well. For the general introduction we focus on SparkR and later have a look at a simple regression example based on sparklyr. To install and use Spark from the R shell, only a few preparatory steps are needed. The following examples are based on installing/running Spark on a Linux machine with the SparkR package. SparkR depends on Java (version 8). Thus, we first should make sure the right Java version is installed. If several Java versions are installed, we might have to select version 8 manually via the following terminal command (Linux). With the right version of Java running, we can install SparkR from GitHub (needs the devtools-package) devtools::install_github(\"cran/SparkR\"). After installing SparkR, the call SparkR::install.spark() will download and install Apache Spark to a local directory.28 Now we can start an interactive SparkR session from the terminal with $ SPARK-HOME/bin/sparkR where SPARK-HOME is a placeholder for the path to your local Spark installation (printed to the console after running SparkR::install.spark()). Or simply run SparkR from within RStudio by loading SparkR and initiating Spark with sparkR.session(). # to install use # devtools::install_github(&quot;cran/SparkR&quot;) # load packages library(SparkR) # start session sparkR.session() By default this starts a local standalone session (no connection to a cluster computer needed). While the examples below are all intended to run on a local machine, it is straightforward to connect to a remote Spark cluster and run the same examples there.29 5.4.1 Data import and summary statistics First, we want to have a brief look at how to perform the first few steps of a typical econometric analysis: import data and compute summary statistics. We analyze the already familiar flights.csv data set. The basic Spark installation provides direct support to import common data formats such as CSV and JSON via the read.df() function (for many additional formats, specific Spark libraries are available). To importflights.csv, we set the source-argument to \"csv\". # Import data and create a SparkDataFrame (a distributed collection of data, RDD) flights &lt;- read.df(&quot;data/flights.csv&quot;, source = &quot;csv&quot;, header=&quot;true&quot;) # inspect the object class(flights) ## [1] &quot;SparkDataFrame&quot; ## attr(,&quot;package&quot;) ## [1] &quot;SparkR&quot; head(flights) ## year month day dep_time sched_dep_time dep_delay ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 542 540 2 ## 4 2013 1 1 544 545 -1 ## 5 2013 1 1 554 600 -6 ## 6 2013 1 1 554 558 -4 ## arr_time sched_arr_time arr_delay carrier flight ## 1 830 819 11 UA 1545 ## 2 850 830 20 UA 1714 ## 3 923 850 33 AA 1141 ## 4 1004 1022 -18 B6 725 ## 5 812 837 -25 DL 461 ## 6 740 728 12 UA 1696 ## tailnum origin dest air_time distance hour minute ## 1 N14228 EWR IAH 227 1400 5 15 ## 2 N24211 LGA IAH 227 1416 5 29 ## 3 N619AA JFK MIA 160 1089 5 40 ## 4 N804JB JFK BQN 183 1576 5 45 ## 5 N668DN LGA ATL 116 762 6 0 ## 6 N39463 EWR ORD 150 719 5 58 ## time_hour ## 1 2013-01-01T10:00:00Z ## 2 2013-01-01T10:00:00Z ## 3 2013-01-01T10:00:00Z ## 4 2013-01-01T10:00:00Z ## 5 2013-01-01T11:00:00Z ## 6 2013-01-01T10:00:00Z By default, all variables have been imported as type character. For several variables this is, of course, not the optimal data type to compute summary statistics. We thus first have to convert some columns to other data types with the cast function. flights$dep_delay &lt;- cast(flights$dep_delay, &quot;double&quot;) flights$dep_time &lt;- cast(flights$dep_time, &quot;double&quot;) flights$arr_time &lt;- cast(flights$arr_time, &quot;double&quot;) flights$arr_delay &lt;- cast(flights$arr_delay, &quot;double&quot;) flights$air_time &lt;- cast(flights$air_time, &quot;double&quot;) flights$distance &lt;- cast(flights$distance, &quot;double&quot;) Suppose we only want to compute average arrival delays per carrier for flights with a distance over 1000 miles. Variable selection and filtering of observations is implemented in select() and filter() (as in the dplyr package). # filter long_flights &lt;- select(flights, &quot;carrier&quot;, &quot;year&quot;, &quot;arr_delay&quot;, &quot;distance&quot;) long_flights &lt;- filter(long_flights, long_flights$distance &gt;= 1000) head(long_flights) ## carrier year arr_delay distance ## 1 UA 2013 11 1400 ## 2 UA 2013 20 1416 ## 3 AA 2013 33 1089 ## 4 B6 2013 -18 1576 ## 5 B6 2013 19 1065 ## 6 B6 2013 -2 1028 Now we summarize the arrival delays for the subset of long flights by carrier. This is the ‘split-apply-combine’ approach applied in SparkR. # aggregation: mean delay per carrier long_flights_delays&lt;- summarize(groupBy(long_flights, long_flights$carrier), avg_delay = mean(long_flights$arr_delay)) head(long_flights_delays) ## carrier avg_delay ## 1 UA 3.2622 ## 2 AA 0.4958 ## 3 EV 15.6876 ## 4 B6 9.0364 ## 5 DL -0.2394 ## 6 OO -2.0000 Finally, we want to convert the result back into a usual data.frame (loaded in our current R session) in order to further process the summary statistics (output to LaTex table, plot, etc.). Note that as in the previous aggregation exercises with the ff package, the computed summary statistics (in the form of a table/df) are obviously much smaller than the raw data. However, note that converting a SparkDataFrame back into a native R object generally means all the data stored in the RDDs constituting the SparkDataFrame object are loaded into local RAM. Hence, when working with actual big data on a Spark cluster, this type of operation can quickly overflow local RAM. # Convert result back into native R object delays &lt;- collect(long_flights_delays) class(delays) ## [1] &quot;data.frame&quot; delays ## carrier avg_delay ## 1 UA 3.2622 ## 2 AA 0.4958 ## 3 EV 15.6876 ## 4 B6 9.0364 ## 5 DL -0.2394 ## 6 OO -2.0000 ## 7 F9 21.9207 ## 8 US 0.5567 ## 9 MQ 8.2331 ## 10 HA -6.9152 ## 11 AS -9.9309 ## 12 VX 1.7645 ## 13 WN 9.0842 ## 14 9E 6.6730 5.5 Spark with SQL Instead of interacting with Spark via R, you can do the same via SQL. This can be very convenient at the stage of data exploration and data preparation. Also note that this is a very good example of how knowing some SQL can be very useful when working with Big Data even if you are not interacting with an actual relational database.30 To directly interact with Spark via SQL, open a terminal window, switch to the SPARK-HOME directory, cd SPARK-HOME and enter the following command, $ bin/spark-sql where SPARK-HOME is again the placeholder for the path to your local Spark installation (printed to the console after running SparkR::install.spark()). This will start up Spark and connect to it via Spark’s sql interface. You will notice that the prompt in the terminal changes (similar to when you start sqlite). Let’s run some example queries. The Spark installation comes with several data and script examples. The example data sets are located at SPARK-HOME/examples/src/main/resources. For example, the file employees.json contains the following records in JSON format: {&quot;name&quot;:&quot;Michael&quot;, &quot;salary&quot;:3000} {&quot;name&quot;:&quot;Andy&quot;, &quot;salary&quot;:4500} {&quot;name&quot;:&quot;Justin&quot;, &quot;salary&quot;:3500} {&quot;name&quot;:&quot;Berta&quot;, &quot;salary&quot;:4000} We can query this data directly via SQL commands by referring to the location of the original JSON file. Select all observations SELECT * FROM json.`examples/src/main/resources/employees.json` ; Michael 3000 Andy 4500 Justin 3500 Berta 4000 Time taken: 0.099 seconds, Fetched 4 row(s) Filter observations SELECT * FROM json.`examples/src/main/resources/employees.json` WHERE salary &lt;4000 ; Michael 3000 Justin 3500 Time taken: 0.125 seconds, Fetched 2 row(s) Compute the average salary SELECT AVG(salary) AS mean_salary FROM json.`examples/src/main/resources/employees.json` ; 3750.0 Time taken: 0.142 seconds, Fetched 1 row(s) 5.6 Spark with R + SQL Most conveniently, you can combine the SQL query features of Spark and SQL with running R on Spark. First, initiate the Spark session in RStudio and import the data as Spark data frame. # to install use # devtools::install_github(&quot;cran/SparkR&quot;) # load packages library(SparkR) # start session sparkR.session() ## Java ref type org.apache.spark.sql.SparkSession id 1 # read data flights &lt;- read.df(&quot;data/flights.csv&quot;, source = &quot;csv&quot;, header=&quot;true&quot;) Now we can make the Spark data frame accessible for SQL queries by registering it as a temporary table/view with createOrReplaceTempView() and then run SQL queries on it from within the R session via the sql()-function. sql() will return the results as Spark data frame (this means the result is also located on the cluster and does hardly affect the master node’s memory). # register the data frame as a table createOrReplaceTempView(flights, &quot;flights&quot; ) # now run SQL queries on it query &lt;- &quot;SELECT DISTINCT carrier, year, arr_delay, distance FROM flights WHERE 1000 &lt;= distance&quot; long_flights2 &lt;- sql(query) head(long_flights2) ## carrier year arr_delay distance ## 1 DL 2013 -30 1089 ## 2 UA 2013 -11 1605 ## 3 DL 2013 -42 1598 ## 4 UA 2013 -5 1585 ## 5 AA 2013 6 1389 ## 6 UA 2013 -23 1620 For a more detailed discussion of what map and reduce have actually to do with MapReduce see this post.↩︎ More sophisticated programs need to be custom made, written in Java.↩︎ See this blog post for a more detailed comparison and discussion of advantages of either package.↩︎ Note that after the installation, the location of Spark is printed to the R console. Alternatively, you can also first install the sparklyr-package and then run sparklyr::spark_install() to install Spark. In the data analysis examples later in the book we will work both with SparkR and sparklyr.↩︎ Simply set the master argument of sparkR.session() to the URL of the Spark master node of the remote cluster. Importantly, the local Spark and Hadoop versions should match the corresponding versions on the remote cluster.↩︎ Importantly, this also means that we cannot use SQL commands related to configuring such databases such as .tables etc. Instead we use SQL commands to directly query data from JSON or CSV files.↩︎ "],["cloud-computing.html", "Chapter 6 Cloud Computing 6.1 Scaling up with AWS EC2 and R/RStudio 6.2 EC2 with RStudio and GPUs 6.3 GPUs on Google Colab 6.4 AWS EMR: MapReduce in the cloud", " Chapter 6 Cloud Computing So far we have focused on the available computing resources on our local machines (desktop/laptop) and how to use them optimally when dealing with large amounts of data and/or computationally demanding tasks. A key aspect of this has been to understand why our local machine is struggling with a computing task when there is a large amount of data to be processed and then identify potential avenues to use the available resources more efficiently. For example, by using one of the following approaches: Computationally intense tasks (but not pushing RAM to the limit): parallelization, using several CPU cores (nodes) in parallel. Memory-intense tasks (data still fits into RAM): efficient memory allocation. Memory-intense tasks (data does not fit into RAM): efficient use of virtual memory (use parts of mass storage device as virtual memory). Storage: efficient storage (avoid redundancies). In practice, data sets might be too large for our local machine even if we take all of the techniques listed above into account. That is, a parallelized task might still take ages to complete because our local machine has too few cores available, a task involving virtual memory would use up way too much space on our hard-disk, etc. In such situations, we have to think about horizontal and vertical scaling beyond our local machine. That is, we outsource tasks to a bigger machine (or a cluster of machines) to which our local computer is connected (typically, over the Internet). While only one or two decades ago most organizations had their own large centrally hosted machines (database servers, cluster computers) for such tasks, today they often rely on third-party solutions ‘in the cloud’. That is, specialized companies provide computing resources (usually, virtual servers) that can be easily accessed via a broadband Internet-connection and rented on an hourly (or even minutes or seconds) basis. Given the obvious economies of scale in this line of business, a few large players have emerged who practically dominate most of the global market: Amazon Web Services (AWS). Microsoft Azure Google Cloud Platform IBM Cloud Alibaba Cloud Tencent Cloud and others. When we use such cloud services to scale up (vertical scaling) the computing resources, the transition from our local implementation of a data analytics task to the cloud implementation is often rather simple. Once we have set up a cloud instance and figured out how to communicate with it, we typically can run the exact same R-script locally and in the cloud. This is usually the case for parallelized tasks (simply run the same script on a machine with more cores), in-memory tasks (rent a machine with more RAM but still use data.table() etc.), or even setting up a Spark cluster in the cloud. In the following, we look first at scaling up more familiar approaches in the cloud. For the sake of simplicity, we will primarily focus on how to use cloud instances provided by AWS. Note, however, that once you are familiar with setting things up on AWS, also using Google Cloud, Azure, etc. will be easy. Most of the core services are provided by all providers and once you understand the basics the different dashboards will look quite familiar. In order to get started, first go to https://aws.amazon.com/ and create an account. You will only be charged for the time you use an AWS service. However, even when using some cloud instances, several of AWS’ cloud products offer a free tier to test and try out products. The following examples rely whenever possible on free-tier instances, otherwise I explicitly that running the example in the cloud will generate some costs. 6.1 Scaling up with AWS EC2 and R/RStudio One of the easiest ways to set up an AWS EC2 instance for R/RStudio is to use Louis Aslett’s Amazon Machine Image (AMI). This way you do not need to install R/Rstudio yourself. Simply follow these five steps: Depending on the region in which you want to initiate your EC2 instance, click on the corresponding AMI link in https://www.louisaslett.com/RStudio_AMI/. For example, if you want to initiate the instance in Frankfurt click on ami-076abd591c4335092. You will be automatically directed to the AWS page where you can select the type of EC2 instance you want to initiate. Per default the free tier T2.micro instance is selected (I recommend using this type of instance, if you simply want to try out the examples below). After selecting the instance type, click on “Review and Launch.” On the opened page, select “Edit security groups.” There should be one entry with SSH selected in the drop-down menu. Click on this drop-down menu and select HTTP (instead of SSH). Click again on “Review and Launch” to confirm the change. Then, click “Launch” to initiate the instance. From the pop-up concerning the key pair, select “Proceed without a key pair” from the drop-down menu and check the box below (“I acknowledge …”). Click “Launch” to confirm. A page opens. Click on “View” instances to see all of your instances and their status. Wait until “Status check” is “2/2 checks passed” (you might want to refresh the instance overview or browser window). Click on the instance ID of your newly launched instance and copy the public IPv4 address, open a new browser window/tab, type in http://, paste the IP address, and hit enter (the address in your browser bar will be something like http://3.66.120.150; http, not https!) . You should see the login-interface to RStudio on your cloud instance. The username is rstudio and the password is the instance ID of your newly launched instance (it might take a while to load R/Rstudio). Once RStudio is loaded, you are ready to go. NOTE: the instructions above help you set up your own EC2 instance with R/RStudio to run some example scripts and tryout R on EC2. For more serious/professional (long-term) usage of an EC2 instance, I strongly recommend to set it up manually and improve the security settings accordingly! The above set up will theoretically result in your instance being accessible for anyone in the Web (something you might want to avoid). 6.1.1 Parallelization with an EC2 instance This short tutorial illustrates how to scale the computation up by running it on an AWS EC2 instance. Thereby, we build on the techniques discussed in the previous chapter. Note that our EC2 instance is a Linux machine. When running R on a Linux machine, there is sometimes an additional step to install R packages (at least for most of the packages): R packages need to be compiled before they can be installed. The command to install packages is exactly the same (install.packages()) and normally you only notice a slight difference in the output shown in the R console during installation (and the installation process takes a little longer than what you are used to). In some cases you might also have to install additional dependencies directly in Linux. Apart from that, using R via RStudio Server in the cloud looks/feels very similar if not identical as when using R/RStudio locally. 6.1.1.1 Preparatory steps If your EC2 instance with RStudio-Server is not running yet, do the following. In the AWS console, navigate to EC2, select your EC2 instance (with RStudio Server installed) , and click on “Instance state/Start instance.” You will have to wait until you see “2/2 checks passed.” Then, open a new browser window, enter the address of your EC2/RStudio-Server instance (see above, e.g. http://3.66.120.150), and log in to RStudio. First, we need to install the parallel and doSNOW packages. In addition we will rely on the stringr package. # install packages for parallelization install.packages(&quot;parallel&quot;, &quot;doSNOW&quot;, &quot;stringr&quot;) Once the installations have finished, you can load the packages and verify the number of cores available on your EC2 instance as follows. In case you have chosen the free tier T2.micro instance type when setting up your EC2 instance, you will see that you only have one core available. Do not worry. It is reasonable practice to test your parallelization script with a few iterations on a small machine before bringing out the big guns. The specialized packages we use for parallelization here do not mind if you have one or 32 cores, the same code runs on either machine (obviously not very fast with only one core). # load packages library(parallel) library(doSNOW) # verify no. of cores available n_cores &lt;- detectCores() n_cores Finally, we have to upload the data that we want to process as part of the parallelization task. To this end, in RStudio-Server, navigate to the file explorer in the lower-right corner. The graphical user interface of a local RStudio installation and RStudio-Server is almost identical. However, you will find in the file explorer pane a “Upload”-button to transfer files from your local machine to the EC2 instance. In this demonstration, we will work with the previously introduced marketing_data.csv dataset. You can thus click on “Upload” and upload it to the current target directory (the home directory of RStudio-Server). As soon as the file is uploaded you can work with it as usual (as on the local RStudio installation). To keep things like in the local examples, use the file explorer to create a new data folder and move marketing_data.csv in this new folder. Figure 6.1: File explorer and Upload-button on Rstudio-Server. To test if all is set up properly to run a in parallel on our EC2 instance, open a new R-script in RStudio-Server and copy/paste the preparatory steps and the simple parallelization example from Section 4.5 into the R-Script. # PREPARATION ----------------------------- # packages library(stringr) # import data marketing &lt;- read.csv(&quot;data/marketing_data.csv&quot;) # clean/prepare data marketing$Income &lt;- as.numeric(gsub(&quot;[[:punct:]]&quot;, &quot;&quot;, marketing$Income)) marketing$days_customer &lt;- as.Date(Sys.Date())- as.Date(marketing$Dt_Customer, &quot;%m/%d/%y&quot;) marketing$Dt_Customer &lt;- NULL # all sets of independent vars indep &lt;- names(marketing)[ c(2:19, 27,28)] combinations_list &lt;- lapply(1:length(indep), function(x) combn(indep, x, simplify = FALSE)) combinations_list &lt;- unlist(combinations_list, recursive = FALSE) models &lt;- lapply(combinations_list, function(x) paste(&quot;Response ~&quot;, paste(x, collapse=&quot;+&quot;))) 6.1.1.2 Test parallelized code Now, we can start testing the code on EC2 without registering the one core for cluster processing. This way %dopart% will automatically resort to running the code sequentially. Make sure to set N to 10 (or another small number) for this test. # set cores for parallel processing # ctemp &lt;- makeCluster(ncores) # registerDoSNOW(ctemp) # prepare loop N &lt;- 10 # just for illustration, the actual code is N &lt;- length(models) # run loop in parallel pseudo_Rsq &lt;- foreach ( i = 1:N, .combine = c) %dopar% { # fit the logit model via maximum likelihood fit &lt;- glm(models[[i]], data=marketing, family = binomial()) # compute the proportion of deviance explained by the independent vars (~R^2) return(1-(fit$deviance/fit$null.deviance)) } Once the test has run through successfully, we are ready to scale up and run the actual workload in parallel in the cloud. 6.1.1.3 Scale up and run in parallel First, switch back to the AWS EC2 console and stop the instance by selecting the tick-mark in the corresponding row, and click on “Instance state/stop instance.” Once the Instance state is “Stopped,” click on “Actions/Instance settings/change instance type.” You will be presented with a drop-down menu from which you can select the new instance type and confirm. The example bellow is based on selecting the t2.2xlarge (with 8 vCPUs and 32MB of RAM). Now you can start the instance again, log in to RStudio-Server (as above) and run the script again but this time with the following lines not commented out (in order to make use of all eight cores). # set cores for parallel processing ctemp &lt;- makeCluster(ncores) registerDoSNOW(ctemp) In order to monitor the usage of computing resources on your instance, switch to the Terminal tab, enter htop, and hit enter. This will open the interactive process viewer called htop. With the default free tier T2.micro instance, you will again notice that only one core is available. Figure 6.2: Monitor resources and proceses with htop. 6.2 EC2 with RStudio and GPUs To start a ready-made EC2 instance with GPUs and RStudio installed, go to this service provided by RStudio on the AWS Marketplace: https://aws.amazon.com/marketplace/pp/B0785SXYB2. Click on Subscribe. Figure 6.3: AWS Marketplace product provided by RStudio to run RStudio Server with Tensorflow-GPU on AWS EC2. Then, click on Continue to Configuration and Continue to Launch. If you want to use the smallest/cheapest EC2 instance, select under “EC2 Instance Type” g3s.xlarge. If necessary, create a new key pair under ‘Key Pair Settings,’ otherwise keep all the default settings as they are. Then, at the bottom, click on Launch. This will launch a new EC2 instance with a GPU and with RStudio server installed.31 Figure 6.4: Launch RStudio Server with Tensorflow-GPU on AWS EC2. Once the instance is launched go to the EC2 dashboard, click on the new instance, copy its public dns, open a new browser window and go to http://&lt;ec2_instance_public_dns&gt;:8787. You should see the RStudio server login. You can log in with username rstudio-user and the instance_id of your newly created instance as the password.32 6.3 GPUs on Google Colab Google Colab provides a very easy way to run R code on GPUs from Google Cloud. All you need is a Google account. Open a new browser window, go to https://colab.to/r and log in with your Google account if prompted to do so. Colab will open a Jupyter notebook with an R runtime. Click on “Runtime/Change runtime type” and select in the drop-down menu under ‘Hardware accelerator’ the option ‘GPU.’ Figure 6.5: Colab notebook with R runtime and GPUs. Then, you can install the packages you need to work with GPU acceleration (e.g., gpuR, keras and tensorflow) and the code relying on GPU processing will be run on GPUs (or even TPUs). Under the following link you find a Colab-notebook set up for running a simply image classification tutorial with keras on TPUs: bit.ly/bda_colab. 6.4 AWS EMR: MapReduce in the cloud Many cloud computing providers offer specialized services for MapReduce tasks in the cloud. Here we look at a comparatively easy-to-use solution provided by AWS, called Elastic MapReduce (AWS EMR). It allows to set up a Hadoop cluster in the cloud within minutes and requires essentially no additional configuration if the cluster is being used for the kind of data analytics tasks discussed in this book. 6.4.1 Set up an EMR cluster to run with R Setting up a default AWS EMR cluster via the AWS console is straightforward. Simply go to https://console.aws.amazon.com/elasticmapreduce/, click on “Create cluster” and adjust the default selection of settings if necessary. Alternatively, we can set up an EMR cluster via the AWS command-line interface (CLI). In the following tutorials, we will work with AWS EMR via R/Rstudio (specifically, via the package sparklyr). Per default, RStudio is not part of the EMR cluster set up. However, AWS EMR offers a very flexible way to install/configure additional software on virtual EMR clusters via so-called “bootstrap” scripts. These scripts can be shared on AWS S3 and used by others, which is what we do in the following cluster set up via the CLI.33 The following command (aws emr create-cluster) initiates our EMR cluster with a specific set of options (all of these options can also be modified via the AWS console in the browser). --applications Name=Hadoop Name=Spark Name=Hive Name=Pig Name=Tez Name=Ganglia specifies which type of basic applications (that are essential to running different types of MapReduce tasks) should be installed on the cluster. Unless you really know what you are doing, do not change that setting. --name \"EMR 6.1 RStudio + sparklyr simply specifies how the newly initiated cluster should be called (this name will then appear on your list of clusters in the AWS console). More relevant for what follows is the line specifying what type of virtual servers (EC2 instances) should be used as part of the cluster: --instance-groups InstanceGroupType=MASTER,InstanceCount=1,InstanceType=m5a.2xlarge specifies that the master node (the machine distributing tasks and coordinating the MapReduce procedure) should be an instance of type m5a.2xlarge; InstanceGroupType=CORE,InstanceCount=4,InstanceType=m5a.2xlarge specifies that the other nodes are also of type m5a.2xlarge. --bootstrap-action Path=s3://aws-bigdata-blog/artifacts/aws-blog-emr-rstudio-sparklyr/rstudio_sparklyr_emr6.sh,Name=\"Install RStudio\" tells the set-up application to run the corresponding bootstrap script on the cluster in order to install the additional software (here RStudio). Finally, there are two important aspects to note: First, in order to initiate the cluster in this way, you need to have an SSH-keypair (for your EC2 instances) set up, which you then instruct the cluster to use with KeyName=. That is, KeyName=\"sparklyr\" means that the user already has create an SSH keypair called sparklyr and that this is the keypair that will be used with the cluster nodes for SSH connections. Second, the --region argument defines in which AWS region the cluster should be created. Importantly, in this particular case, the bootstrap script used to install RStudio on the cluster is stored in the us-east-1 region, hence we need to set up the cluster also in this region --region us-east-1 (otherwise the set up will fail as the set-up application will not find the bootstrap script and terminate with an error!). aws emr create-cluster \\ --release-label emr-6.1.0 \\ --applications Name=Hadoop Name=Spark Name=Hive Name=Pig Name=Tez Name=Ganglia \\ --name &quot;EMR 6.1 RStudio + sparklyr&quot; \\ --service-role EMR_DefaultRole \\ --instance-groups InstanceGroupType=MASTER,InstanceCount=1,InstanceType=m5a.2xlarge \\ InstanceGroupType=CORE,InstanceCount=4,InstanceType=m5a.2xlarge \\ --bootstrap-action Path=&#39;s3://aws-bigdata-blog/artifacts/aws-blog-emr-rstudio-sparklyr/rstudio_sparklyr_emr6.sh&#39;,Name=&quot;Install RStudio&quot; --ec2-attributes InstanceProfile=EMR_EC2_DefaultRole,KeyName=&quot;sparklyr&quot; \\ --configurations &#39;[{&quot;Classification&quot;:&quot;spark&quot;,&quot;Properties&quot;:{&quot;maximizeResourceAllocation&quot;:&quot;true&quot;}}]&#39; \\ --region us-east-1 Setting up this cluster with all the additional software and configurations from the bootstrap script will take around 40 minutes. You can always follow the progress in the AWS console on . Once the cluster is ready, you will see something like this: Figure 6.6: AWS EMR console indicating the successful set up of the EMR cluster In order to access RStudio on the EMR cluster’s master node, follow these steps: First, follow the prerequisites to connect to EMR via SSH: https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-connect-ssh-prereqs.html. Then initiate the SSH tunnel to the EMR cluster as instructed here: https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-ssh-tunnel.html. Protect your key-file (sparklyr.pem) by navigating to the location of the key-file on your computer in the terminal and run chmod 600 sparklyr.pem before connecting. Also make sure your IP address is still the one you have entered in the previous step (you can check your current IP address by visiting https://whatismyipaddress.com/). In the terminal, connect to the EMR cluster via SSH by running ssh -i ~/sparklyr.pem -ND 8157 hadoop@ec2-52-87-248-175.compute-1.amazonaws.com (if you have protected the key-file as super user, i.e. sudo chmod, you will need to use sudo ssh here). In your Firefox browser, install the FoxyProxy add on. Follow these instructions to set up the proxy via FoxyProxy: https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-connect-master-node-proxy.html. Select the newly created Socks5 proxy in FoxyProxy. Go to http://localhost:8787/ and enter with username hadoop and password hadoop. Now you can run sparklyr on the AWS EMR cluster. Note that you might not have the required vCPU limit to additionally launch such an instance. In that case you will get an error message You have requested more vCPU capacity than your current vCPU limit of 0 allows for the instance bucket that the specified instance type belongs to. Please visit http://aws.amazon.com/contact-us/ec2-request to request an adjustment to this limit.. Simply follow the indicated URL and send your request to increase the capacity. After your limit is adjusted, click again on Launch as per the procedure outlined above.↩︎ It is strongly recommended to change the password afterwards. In o#rder to do that, click on “Tools” and select “shell.” Then type “password” into the shell/terminal and enter the current password (the instance id) and then enter the new password, hit enter, and enter again the new password to confirm.↩︎ Specifically, we will use the bootstrap script provided by the AWS Big Data Blog, which is stored here: s3://aws-bigdata-blog/artifacts/aws-blog-emr-rstudio-sparklyr/rstudio_sparklyr_emr6.sh↩︎ "],["data-collection-and-data-storage.html", "Chapter 7 Data Collection and Data Storage 7.1 Gathering and compilation of raw data 7.2 Data import and memory allocation 7.3 Efficient local data storage 7.4 Connecting R to RDBMS 7.5 Cloud solutions for (big) data storage", " Chapter 7 Data Collection and Data Storage 7.1 Gathering and compilation of raw data 7.1.1 NYC taxi data The NYC Taxi &amp; Limousine Commission (TLC) provides detailed data on all trip records including pick-up and drop-off times/locations. When combining all available trip records (2009-2018), we get a rather large data set of over 200GB. The code examples below illustrate how to collect and compile the entire data set. In order to avoid long computing times, the code examples shown below are based on a small sub-set of the actual raw data (however, all examples involving virtual memory, are in theory scalable to the extent of the entire raw data set). The raw data consists of several monthly CSV-files and can be downloaded via the TLC’s website. The following short R-script automates the downloading of all available trip-record files. NOTE: Downloading all files can take several hours and will occupy over 200GB! ################################# # Fetch all TLC trip recrods # Data source: # https://www1.nyc.gov/site/tlc/about/tlc-trip-record-data.page # Input: Monthly csv files from urls # Output: one large csv file # UM, St. Gallen, January 2019 ################################# # SET UP ----------------- # load packages library(data.table) library(rvest) library(httr) # fix vars BASE_URL &lt;- &quot;https://s3.amazonaws.com/nyc-tlc/trip+data/yellow_tripdata_2018-01.csv&quot; OUTPUT_PATH &lt;- &quot;data/tlc_trips.csv&quot; START_DATE &lt;- as.Date(&quot;2009-01-01&quot;) END_DATE &lt;- as.Date(&quot;2018-06-01&quot;) # BUILD URLS ----------- # parse base url base_url &lt;- gsub(&quot;2018-01.csv&quot;, &quot;&quot;, BASE_URL) # build urls dates &lt;- seq(from= START_DATE, to = END_DATE, by = &quot;month&quot;) year_months &lt;- gsub(&quot;-01$&quot;, &quot;&quot;, as.character(dates)) data_urls &lt;- paste0(base_url, year_months, &quot;.csv&quot;) # FETCH AND STACK CSVS ---------------- # download, parse all files, write them to one csv for (url in data_urls) { # download to temporary file tmpfile &lt;- tempfile() download.file(url, destfile = tmpfile) # parse downloaded file, write to output csv, remove tempfile csv_parsed &lt;- fread(tmpfile) fwrite(csv_parsed, file = OUTPUT_PATH, append = TRUE) unlink(tmpfile) } 7.2 Data import and memory allocation Consider the first steps of a data pipeline in R. The first part of our script to import and clean the data looks as follows. ########################################################### # Big Data Statistics: Flights data import and preparation # # U. Matter, January 2019 ########################################################### # SET UP ----------------- # fix variables DATA_PATH &lt;- &quot;data/flights.csv&quot; # DATA IMPORT ---------------- flights &lt;- read.csv(DATA_PATH) # DATA PREPARATION -------- flights &lt;- flights[,-1:-3] When running this script, we notice that some of the steps need a noticeable amount of time to process. Moreover, while none of these steps obviously involves a lot of computation (such as a matrix inversion or numerical optimization), it quite likely involves memory allocation. We first read data into RAM (allocated to R by our operating system). It turns out that there are different ways to allocate RAM when reading data from a CSV file. Depending on the amount of data to be read in, one or the other approach might be faster. We first investigate the RAM allocation in R with mem_change() and mem_used(). # SET UP ----------------- # fix variables DATA_PATH &lt;- &quot;data/flights.csv&quot; # load packages library(pryr) # check how much memory is used by R (overall) mem_used() ## 1.71 GB # check the change in memory due to each step # DATA IMPORT ---------------- mem_change(flights &lt;- read.csv(DATA_PATH)) ## 4.04 MB # DATA PREPARATION -------- flights &lt;- flights[,-1:-3] # check how much memory is used by R now mem_used() ## 1.71 GB The last result is kind of interesting. The object flights must have been larger right after importing it than at the end of the script. We have thrown out several variables, after all. Why does R still use that much memory? R does by default not ‘clean up’ memory unless it is really necessary (meaning no more memory is available). In this case, R has still way more memory available from the operating system, thus there is no need to ‘collect the garbage’ yet. However, we can force R to collect the garbage on the spot with gc(). This can be helpful to better keep track of the memory needed by an analytics script. gc() ## used (Mb) gc trigger (Mb) max used ## Ncells 6348774 339.1 10550368 563.5 10550368 ## Vcells 169481293 1293.1 450132776 3434.3 312469873 ## (Mb) ## Ncells 563.5 ## Vcells 2384.0 Now, let’s see how we can improve the performance of this script with regard to memory allocation. Most memory is allocated when importing the file. Obviously, any improvement of the script must still result in importing all the data. However, there are different ways to read data into RAM. read.csv() reads all lines of a csv file consecutively. In contrast, data.table::fread() first ‘maps’ the data file into memory and only then actually reads it in line by line. This involves an additional initial step, but the larger the file, the less relevant is this first step with regard to the total time needed to read all the data into memory. By switching on the verbose option, we can actually see what fread is doing. # load packages library(data.table) ## ## Attaching package: &#39;data.table&#39; ## The following object is masked from &#39;package:pryr&#39;: ## ## address # DATA IMPORT ---------------- flights &lt;- fread(DATA_PATH, verbose = TRUE) ## OpenMP version (_OPENMP) 201511 ## omp_get_num_procs() 12 ## R_DATATABLE_NUM_PROCS_PERCENT unset (default 50) ## R_DATATABLE_NUM_THREADS unset ## R_DATATABLE_THROTTLE unset (default 1024) ## omp_get_thread_limit() 2147483647 ## omp_get_max_threads() 12 ## OMP_THREAD_LIMIT unset ## OMP_NUM_THREADS unset ## RestoreAfterFork true ## data.table is using 6 threads with throttle==1024. See ?setDTthreads. ## freadR.c has been passed a filename: data/flights.csv ## [01] Check arguments ## Using 6 threads (omp_get_max_threads()=12, nth=6) ## NAstrings = [&lt;&lt;NA&gt;&gt;] ## None of the NAstrings look like numbers. ## show progress = 0 ## 0/1 column will be read as integer ## [02] Opening the file ## Opening file data/flights.csv ## File opened, size = 29.53MB (30960660 bytes). ## Memory mapped ok ## [03] Detect and skip BOM ## [04] Arrange mmap to be \\0 terminated ## \\n has been found in the input and different lines can end with different line endings (e.g. mixed \\n and \\r\\n in one file). This is common and ideal. ## [05] Skipping initial rows if needed ## Positioned on line 1 starting: &lt;&lt;year,month,day,dep_time,sched_&gt;&gt; ## [06] Detect separator, quoting rule, and ncolumns ## Detecting sep automatically ... ## sep=&#39;,&#39; with 100 lines of 19 fields using quote rule 0 ## Detected 19 columns on line 1. This line is either column names or first data row. Line starts as: &lt;&lt;year,month,day,dep_time,sched_&gt;&gt; ## Quote rule picked = 0 ## fill=false and the most number of columns found is 19 ## [07] Detect column types, good nrow estimate and whether first row is column names ## Number of sampling jump points = 100 because (30960659 bytes from row 1 to eof) / (2 * 8882 jump0size) == 1742 ## Type codes (jump 000) : 555555555C5CCC5555B Quote rule 0 ## Type codes (jump 100) : 555555555C5CCC5555B Quote rule 0 ## &#39;header&#39; determined to be true due to column 1 containing a string on row 1 and a lower type (int32) in the rest of the 10048 sample rows ## ===== ## Sampled 10048 rows (handled \\n inside quoted fields) at 101 jump points ## Bytes from first data row on line 2 to the end of last row: 30960501 ## Line length: mean=92.03 sd=3.56 min=68 max=98 ## Estimated number of rows: 30960501 / 92.03 = 336403 ## Initial alloc = 370043 rows (336403 + 9%) using bytes/max(mean-2*sd,min) clamped between [1.1*estn, 2.0*estn] ## ===== ## [08] Assign column names ## [09] Apply user overrides on column types ## After 0 type and 0 drop user overrides : 555555555C5CCC5555B ## [10] Allocate memory for the datatable ## Allocating 19 column slots (19 - 0 dropped) with 370043 rows ## [11] Read the data ## jumps=[0..30), chunk_size=1032016, total_size=30960501 ## Read 336776 rows x 19 columns from 29.53MB (30960660 bytes) file in 00:00.064 wall clock time ## [12] Finalizing the datatable ## Type counts: ## 14 : int32 &#39;5&#39; ## 1 : float64 &#39;B&#39; ## 4 : string &#39;C&#39; ## ============================= ## 0.000s ( 0%) Memory map 0.029GB file ## 0.003s ( 5%) sep=&#39;,&#39; ncol=19 and header detection ## 0.000s ( 0%) Column type detection using 10048 sample rows ## 0.001s ( 1%) Allocation of 370043 rows x 19 cols (0.033GB) of which 336776 ( 91%) rows used ## 0.060s ( 94%) Reading 30 chunks (0 swept) of 0.984MB (each chunk 11225 rows) using 6 threads ## + 0.017s ( 27%) Parse to row-major thread buffers (grown 0 times) ## + 0.027s ( 42%) Transpose ## + 0.015s ( 24%) Waiting ## 0.000s ( 0%) Rereading 0 columns due to out-of-sample type exceptions ## 0.064s Total Let’s put it all together and look at the memory changes and usage. For a fair comparison, we first have to delete flights and collect the garbage with gc(). # SET UP ----------------- # fix variables DATA_PATH &lt;- &quot;data/flights.csv&quot; # load packages library(pryr) library(data.table) # housekeeping flights &lt;- NULL gc() ## used (Mb) gc trigger (Mb) max used ## Ncells 6406594 342.2 10550368 563.5 10550368 ## Vcells 166466481 1270.1 450132776 3434.3 312469873 ## (Mb) ## Ncells 563.5 ## Vcells 2384.0 # check the change in memory due to each step # DATA IMPORT ---------------- mem_change(flights &lt;- fread(DATA_PATH)) ## 35.8 MB 7.3 Efficient local data storage In this section, we are concerned with \\((I)\\) how we can store large data sets permanently on a mass storage device in an efficient way (here, efficient can be understood as ‘not taking up too much space’) and \\((II)\\) how we can load (parts of) this data set in an efficient way (here, efficient~fast) for analysis. We look at this problem in two situations: The data needs to be stored locally (e.g., on the hard disk of our laptop). The data can be stored on a server ‘in the cloud.’ Various tools have been developed over the last few years to improve the efficiency of storing and accessing large amounts of data (see Walkowiak (2016), chapters 5 and 6 for an overview). Here, we focus on the basic concept of Relational Database Systems (RDBMS) and a well-known tool based on this concept, the Structured Query Language (SQL; more specifically, SQLite) 7.3.1 RDBMS basics RDBMSs have two key features that tackle the two efficiency concerns mentioned above: The relational data model: The overall data set is split by columns (covariates) into tables in order to reduce the storage of redundant variable-value repetitions. The resulting database tables are then linked via key-variables (unique identifiers). Thus (simply put), each type of entity on which observations exist resides in its own database table. Within this table, each observation has it’s unique id. Keeping the data in such a structure is very efficient in terms of storage space used. Indexing: The key-columns of the database tables are indexed, meaning (in simple terms) ordered on disk. Indexing a table takes time but it has to be performed only once (unless the content of the table changes). The resulting index is then stored on disk as part of the database. These indices substantially reduce the number of disk accesses required to query/find specific observations. Thus, they make the loading of specific parts of the data for analysis much more efficient. The loading/querying of data from an RDBMS typically involves the selection of specific observations (rows) and covariates (columns) from different tables. Due to the indexing, observations are selected efficiently, and the defined relations between tables (via keys) facilitate the joining of columns to a new table (the queried data). 7.3.2 Efficient data access: indices and joins in SQLite So far we have only had a look at the very basics of writing SQL code. Let us now further explore SQLite as an easy-to-use and easy-to-set-up relational database solution. In a second step we then look at how to connect to a local SQLite database from within R. First, we switch to the Terminal tab in RStudio, set up a new database called air.sqlite, and import the csv-file flights.csv (used in previous chapters) as a first table. # switch to data directory cd data # create database and run sqlite sqlite3 air.sqlite -- import csvs .mode csv .import flights.csv flights We check if everything worked out well via the .tables and .schema commands. .tables .schema flights In flights, each row describes a flight (the day it took place, its origin, its destination etc.). It contains a covariate carrier containing the unique ID of the respective airline/carrier carrying out the flight as well as the covariates origin and dest. The latter two variables contain the unique IATA-codes of the airports from which the flights departed and where they arrived, respectively. In flights we thus have observations at the level of individual flights. Now we extend our database in a meaningful way, following the relational data model idea. First we download two additional csv files containing data that relate to the flights table: airports.csv: Describes the locations of US Airports (relates to origin and dest). carriers.csv: A listing of carrier codes with full names (relates to the carrier-column in flights. In this code example, the two csvs have already been downloaded to the materials/data-folder. -- import airport data .mode csv .import airports.csv airports .import carriers.csv carriers -- inspect the result .tables .schema airports .schema carriers Now we can run our first query involving the relation between tables. The aim of the exercise is to query flights data (information on departure delays per flight number and date; from the flights-table) for all United Air Lines Inc.-flights (information from the carriers table ) departing from Newark Intl airport (information from the airports-table). In addition, we want the resulting table ordered by flight number. For the sake of the exercise, we only show the first 10 results of this query (LIMIT 10). SELECT year, month, day, dep_delay, flight FROM (flights INNER JOIN airports ON flights.origin=airports.iata) INNER JOIN carriers ON flights.carrier = carriers.Code WHERE carriers.Description = &#39;United Air Lines Inc.&#39; AND airports.airport = &#39;Newark Intl&#39; ORDER BY flight LIMIT 10; Table 7.1: Displaying records 1 - 10 year month day dep_delay flight 2013 1 4 0 1 2013 1 5 -2 1 2013 3 6 1 1 2013 2 13 -2 3 2013 2 16 -9 3 2013 2 20 3 3 2013 2 23 -5 3 2013 2 26 24 3 2013 2 27 10 3 2013 1 5 3 10 Note that this query has been executed without indexing any of the tables first. Thus SQLite could not take any ‘shortcuts’ when matching the ID columns in order to join the tables for the query output. That is, SQLite had to scan the entire columns to find the matches. Now we index the respective id columns and re-run the query. CREATE INDEX iata_airports ON airports (iata); CREATE INDEX origin_flights ON flights (origin); CREATE INDEX carrier_flights ON flights (carrier); CREATE INDEX code_carriers ON carriers (code); Note that SQLite optimizes the efficiency of the query without our explicit instructions. If there are indices it can use to speed up the query, it will do so. SELECT year, month, day, dep_delay, flight FROM (flights INNER JOIN airports ON flights.origin=airports.iata) INNER JOIN carriers ON flights.carrier = carriers.Code WHERE carriers.Description = &#39;United Air Lines Inc.&#39; AND airports.airport = &#39;Newark Intl&#39; ORDER BY flight LIMIT 10; Table 7.2: Displaying records 1 - 10 year month day dep_delay flight 2013 1 4 0 1 2013 1 5 -2 1 2013 3 6 1 1 2013 2 13 -2 3 2013 2 16 -9 3 2013 2 20 3 3 2013 2 23 -5 3 2013 2 26 24 3 2013 2 27 10 3 2013 1 5 3 10 You find the final air.sqlite, including all the indices and tables as materials/data/air_final.sqlite in the course’s code repository. 7.4 Connecting R to RDBMS The R-package RSQLite embeds SQLite in R. That is, it provides functions that allow us to use SQLite directly from within R. You will see that the combinaiton of SQLite with R is a simple but very practical approach to work with very efficiently (and locally) stored data sets. In the following example, we explore how RSQLite can be used to set up and query the air.sqlite shown in the example above. 7.4.1 Creating a new database with RSQLite Similarly to the raw SQLite-syntax, connecting to a database that does not exist yet, actually creates this (empty database). Note that for all interactions with the database from within R, we need to refer to the connection (here: con_air). # load packages library(RSQLite) # initiate the database con_air &lt;- dbConnect(SQLite(), &quot;data/air.sqlite&quot;) 7.4.2 Importing data With RSQLite we can easily add data.frames as SQLite tables to the database. # import data into current R sesssion flights &lt;- fread(&quot;data/flights.csv&quot;) airports &lt;- fread(&quot;data/airports.csv&quot;) carriers &lt;- fread(&quot;data/carriers.csv&quot;) # add tables to database dbWriteTable(con_air, &quot;flights&quot;, flights) dbWriteTable(con_air, &quot;airports&quot;, airports) dbWriteTable(con_air, &quot;carriers&quot;, carriers) 7.4.3 Issue queries Now we can query the database from within R. By default, RSQLite returns the query results as data.frames. Queries are simply character strings written in SQLite. # define query delay_query &lt;- &quot;SELECT year, month, day, dep_delay, flight FROM (flights INNER JOIN airports ON flights.origin=airports.iata) INNER JOIN carriers ON flights.carrier = carriers.Code WHERE carriers.Description = &#39;United Air Lines Inc.&#39; AND airports.airport = &#39;Newark Intl&#39; ORDER BY flight LIMIT 10; &quot; # issue query delays_df &lt;- dbGetQuery(con_air, delay_query) delays_df When done working with the database, we close the connection to the database with dbDisconnect(con). 7.5 Cloud solutions for (big) data storage As outlined in the previous section, RDBMSs are a very practical tool to store the structured data of an analytics project locally in a database. A local SQLite database can easily be set up and accessed via R, allowing to write the whole data pipeline from data gathering to filtering, aggregating and finally analyzing in R. In contrast to directly working with CSV files, using SQLite has the advantage of organizing the data access much more efficiently in terms of RAM. Only the final result of a query is really loaded fully into R’s memory. If mass storage space is too sparse or if RAM is nevertheless not sufficient, even when organizing data access via SQLite, several cloud solutions come to the rescue. Although you could also rent a traditional web server and host a SQL database there, this is usually not worth the while for a data analytics project. In the next section we thus look at three important cases of how to store data as part of an analytics project: RDBMS in the cloud, a serverless data warehouse solution for large datasets called Google BigQuery, and a simple storage service to use as a data lake called AWS S3. All of these solutions are discussed from a data analytics perspective, and for all of these solutions we will look at how to make use of them from within R. 7.5.1 Easy-to-use RDBMS in the cloud: AWS RDS Once we have set up RStudio Server on an EC2 instance, we can run the SQLite examples shown above on it. There are no additional steps needed to install SQLite. However, when using RDBMSs in the cloud, we typically have a more sophisticated implementation than SQLite in mind. Particularly, we want to set up an actual RDBMS-server running in the cloud to which several clients can connect (e.g., via RStudio Server). AWS’ Relational Database Service (RDS) provides an easy way to set up and run a SQL database in the cloud. The great advantage for users new to RDBMS/SQL is that you do not have to manually set up a server (e.g. a EC2 instance) and install/configure the SQL server. Instead you can directly set up a fully functioning relational database in the cloud. In a first step, open the AWS console and search for/select “RDS” in the search bar. Then, click on “Create database” in the lower part of the landing page. Figure 7.1: Create a managed relational database on AWS RDS. On the next page, select “Easy create,” “MySQL,” and the “Free tier” DB instance size. Further down you will have to set the database instance identifier the user name and a password. Figure 7.2: Easy creation of a RDS MySQL DB. Once the database instance is ready, you will see it in the databases overview. Click on the DB identifier (the name of your database shown in the list of databases) and click on modify (button in the upper-right corner). In the “Connectivity” panel under “Additional configuration,” select Publicly accessible (this is necessary to interact with the DB from your local machine), and save the settings. Back on the overview page of your database, under “Connectivity &amp; security,” click on the link under the VPC security groups, scroll down and select the “Inbound rules” tab. Edit the inbound rule to allow any IP4 inbound traffic.34 Figure 7.3: Allow all IP4 inbound traffic (set Source to 0.0.0.0/0). Now we can connect to the instance via the RMySQL package. Before loading data, we first have to initiate a new database (in contrast, this is done automatically when connecting to a SQLite database). # load packages library(RMySQL) library(data.table) # fix vars RDS_ENDPOINT &lt;- &quot;MY-ENDPOINT&quot; # replace this with the Endpoint shown in the AWS RDS console PW &lt;- &quot;MY-PW&quot; # replace this with the password you have set when initiating the RDS DB on AWS # connect to DB con_rds &lt;- dbConnect(RMySQL::MySQL(), host=RDS_ENDPOINT, port=3306, username=&quot;admin&quot;, password=PW) # initiate a new database on the MySQL RDS instance dbSendQuery(con_rds, &quot;CREATE DATABASE air&quot;) # disconnect and re-connect directly to the new DB dbDisconnect(con_rds) con_rds &lt;- dbConnect(RMySQL::MySQL(), host=RDS_ENDPOINT, port=3306, username=&quot;admin&quot;, dbname=&quot;air&quot;, password=PW) RMySQL and RSQLite are both building on the DBI package, which generalizes how we can interact with SQL-type databases via R. This makes it straightforward to apply what we have learned so far by interacting with our local SQLite database to interactions with other databases. As soon as the connection to the new database is established, we can essentially use the same R functions as above to create new tables and import data. # import data into current R sesssion flights &lt;- fread(&quot;data/flights.csv&quot;) airports &lt;- fread(&quot;data/airports.csv&quot;) carriers &lt;- fread(&quot;data/carriers.csv&quot;) # add tables to database dbWriteTable(con_rds, &quot;flights&quot;, flights) dbWriteTable(con_rds, &quot;airports&quot;, airports) dbWriteTable(con_rds, &quot;carriers&quot;, carriers) Finally, we can query our RDS MySQL database on AWS. # define query delay_query &lt;- &quot;SELECT year, month, day, dep_delay, flight FROM (flights INNER JOIN airports ON flights.origin=airports.iata) INNER JOIN carriers ON flights.carrier = carriers.Code WHERE carriers.Description = &#39;United Air Lines Inc.&#39; AND airports.airport = &#39;Newark Intl&#39; ORDER BY flight LIMIT 10; &quot; # issue query delays_df &lt;- dbGetQuery(con_rds, delay_query) delays_df 7.5.2 Database server in the cloud: MariaDB on an EC2 instance Working with an SQL database in the cloud via AWS RDS is probably sufficient for most simple use cases. However, for some projects you might want to have more flexibility regarding settings and configurations. A practical solution to this is to set up “manually” a SQL-server on an EC2 instance (and then work with it via RStudio-Server). The following example, based on Walkowiak (2016), guides you through the first step to set up such a database in the cloud. For most of the installation steps you are referred to the respective pages in Walkowiak (2016) (Chapter 5: ’MariaDB with R on a Amazon EC2 instance, pages 255ff). However, since some of the steps shown in the book are outdated, the example below hints to some alternative/additional steps needed to make the database run on an Ubuntu 18.04 machine. After launching the EC2 instance on AWS, use the following terminal commands to install R: # update ubuntu packages sudo apt-get update sudo apt-get upgrade sudo apt-get install r-base and to install RStudio Server (on Ubuntu 18.04, as of April 2020): sudo apt-get install gdebi-core wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.2.5033-amd64.deb sudo gdebi rstudio-server-1.2.5033-amd64.deb Following Walkowiak (2016) (pages 257f), we first set up a new user and give it permissions to ssh directly to the EC2 instance (this way we can then more easily upload data ‘for this user’). # create user sudo adduser umatter When prompted for additional information just hit enter (for default). Now we can grant the user the permissions sudo cp -r /home/ubuntu/.ssh /home/umatter/ cd /home/umatter/ sudo chown -R umatter:umatter .ssh Then install MariaDB as follows. sudo apt update sudo apt install mariadb-server sudo apt install libmariadbclient-dev sudo apt install libxml2-dev # needed later (dependency for some R packages) If prompted to set a password for the root database user (user with all database priviledges), type in and confirm the chosen password.35 7.5.2.1 Data import With the permissions set above, we can send data from the local machine directly to the instance via ssh. We use this to first transfer the raw data to the instance and then import it to the database. The aim is to import the same simple data set economics.csv used in the local SQLite examples of Lecture 7. Following the instructions of Walkowiak (2016), pages 252 to 254, we upload the economics.csv file (instead of the example data used in Walkowiak (2016)). Note that in all the code examples below, the username is umatter, and the IP-address will have to be replaced with the public IP-address of your EC2 instance. Open a new terminal window and send the economics.csv data as follows to the instance. # from the directory where the key-file is stored... scp -r -i &quot;mariadb_ec2.pem&quot; ~/Desktop/economics.csv umatter@ec2-184-72-202-166.compute-1.amazonaws.com:~/ Then switch back to the terminal connected to the instance and start the MariaDB server. # start the MariaDB server sudo service mysql start # log into the MariaDB client as root sudo mysql -uroot If not prompted to do so when installing MariaDB (see above), add a new root user in order to login to MariaDB without the sudo (here we simply set the password to ‘Password1’). GRANT ALL PRIVILEGES on *.* to &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;Password1&#39;; FLUSH PRIVILEGES; Restart the mysql server and log in with the database root user. # start the MariaDB server sudo service mysql restart # log into the MariaDB client as root mysql -uroot -p Now we can initiate a new database called data1. CREATE database data1; To work with the newly created database, we have to ‘select’ it. USE data1; Then, we create the first table of our database and import data into it. Note that we only have to slightly adjust the former SQLite syntax to make this work (remove double quotes for field names). In addition, note that we can use the same field types as in the SQLite DB.36 -- Create the new table CREATE TABLE econ( date DATE, pce REAL, pop INTEGER, psavert REAL, uempmed REAL, unemploy INTEGER ); After following the steps in Walkowiak (2016), pages 259-262, we can import the economics.csv-file to the econ table in MariaDB (again, assuming the username is umatter). Note that the syntax to import data to a table is quite different from the SQLite example in Lecture 7. LOAD DATA LOCAL INFILE &#39;/home/umatter/economics.csv&#39; INTO TABLE econ FIELDS TERMINATED BY &#39;,&#39; LINES TERMINATED BY &#39;\\n&#39; IGNORE 1 ROWS; Now we can start using the newly created database from within RStudio Server running on our EC2 instance (following Walkowiak (2016), pages 263ff). As in the SQLite examples in Lecture 7, we can now query the database from within the R console (this time using RMySQL instead of RSQLite, and using R from within RStudio Server in the cloud!). First, we need to connect to the newly created MariaDB database. # install package #install.packages(&quot;RMySQL&quot;) # load packages library(RMySQL) # connect to the db con &lt;- dbConnect(RMySQL::MySQL(), user = &quot;root&quot;, password = &quot;Password1&quot;, host = &quot;localhost&quot;, dbname = &quot;data1&quot;) In our first query, we select all (*) variable values of the observation of January 1968. # define the query query1 &lt;- &quot; SELECT * FROM econ WHERE date = &#39;1968-01-01&#39;; &quot; # send the query to the db and get the result jan &lt;- dbGetQuery(con, query1) jan # date pce pop psavert uempmed unemploy # 1 1968-01-01 531.5 199808 11.7 5.1 2878 Now let’s select all year/months in which there were more than 15 million unemployed, ordered by date. query2 &lt;- &quot; SELECT date FROM econ WHERE unemploy &gt; 15000 ORDER BY date; &quot; # send the query to the db and get the result unemp &lt;- dbGetQuery(con, query2) head(unemp) # date # 1 2009-09-01 # 2 2009-10-01 # 3 2009-11-01 # 4 2009-12-01 # 5 2010-01-01 # 6 2010-02-01 When done working with the database, we close the connection to the MariaDB database with dbDisconnect(con). Note that this is not generally recommendable. Only do this to get familiar with the service and to test some code.↩︎ Below it is shown how to do this ‘manually,’ if not promted at this step.↩︎ However, MariaDB is a much more sophisticated RDBMS than SQLite and comes with many more field types, see the official list of supported data types.↩︎ "],["big-data-cleaning-and-transformation.html", "Chapter 8 Big Data Cleaning and Transformation 8.1 ‘Out-of-memory’ strategies 8.2 Typical cleaning tasks", " Chapter 8 Big Data Cleaning and Transformation Preceding the filtering/selection/aggregation of raw data, data cleaning and transformation typically have to be run on large parts of the overall data set. In practice, the bottleneck is often a lack of RAM. In the following, we explore two strategies that broadly build on the idea of virtual memory (using parts of the hard disk as RAM). 8.1 ‘Out-of-memory’ strategies Virtual memory is in simple words an approach to combining the RAM and mass storage components in order to cope with a lack of RAM. Modern operating systems come with a virtual memory manager that would automatically handle the swapping between RAM and the hard-disk, when running processes that use up too much RAM. However, a virtual memory manager is not specifically developed to perform this task in the context of data analysis. Several strategies have thus been developed to build on the basic idea of virtual memory in the context of data analysis tasks. Chunked data files on disk: The data analytics software ‘partitions’ the large data set, maps, and stores the chunks of raw data on disk. What is actually ‘read’ into RAM when importing the data file with this approach is the mapping to the partitions of the actual data set (the data structure) and some metadata describing the data set. In R, this approach is implemented in the ff package and several packages building on ff. In this approach, the usage of disk space and the linking between RAM and files on disk is very explicit (and well visible to the user). Memory mapped files and shared memory: The data analytics software uses segments of virtual memory for the data set and allows different programs/processes to access it in the same memory segment. Thus, virtual memory is explicitly allocated for one or several specific data analytics tasks. In R, this approach is prominently implemented in the bigmemory package and several packages building on bigmemory. 8.1.1 Chunking data with the ff-package Before looking at the more detailed code examples in Walkowiak (2016), we investigate how the ff package (and the concept of chunked files) basically works. In order to do so, we first install and load the ff and ffbase packages, as well as the pryr package. We use the already known flights.csv-data set as an example. When importing data via the ff package, we first have to set up a directory where ff can store the partitioned data set (recall that this is explicitly/visibly done on disk). As in the code examples of the book, we call this new directory ffdf (after ff-data.frame). # SET UP -------------- # install.packages(c(&quot;ff&quot;, &quot;ffbase&quot;)) # load packages library(ff) library(ffbase) library(pryr) # create directory for ff chunks, and assign directory to ff system(&quot;mkdir ffdf&quot;) options(fftempdir = &quot;ffdf&quot;) Now we can read in the data with read.table.ffdf. In order to better understand the underlying concept, we record the change in memory in the R environment with mem_change(). mem_change( flights &lt;- read.table.ffdf(file=&quot;data/flights.csv&quot;, sep=&quot;,&quot;, VERBOSE=TRUE, header=TRUE, next.rows=100000, colClasses=NA) ) ## read.table.ffdf 1..100000 (100000) csv-read=0.407sec ffdf-write=0.065sec ## read.table.ffdf 100001..200000 (100000) csv-read=0.43sec ffdf-write=0.036sec ## read.table.ffdf 200001..300000 (100000) csv-read=0.428sec ffdf-write=0.034sec ## read.table.ffdf 300001..336776 (36776) csv-read=0.168sec ffdf-write=0.022sec ## csv-read=1.433sec ffdf-write=0.157sec TOTAL=1.59sec ## -30.1 MB Note that there are two substantial differences to what we have previously seen when using fread(). It takes much longer to import a csv into the ffdf structure. However, the RAM allocated to it is much smaller. This is exactly what we would expect, keeping in mind what read.table.ffdf() does in comparison to what fread() does. Now we can actually have a look at the data chunks created by ff. # show the files in the directory keeping the chunks head(list.files(&quot;ffdf&quot;)) ## [1] &quot;clone2c40f47b85e43.ff&quot; &quot;clone2c40f53aa671c.ff&quot; ## [3] &quot;clone2c40f7082701c.ff&quot; &quot;clone2c40f77faa60c.ff&quot; ## [5] &quot;clone2c4dd13e9825c.ff&quot; &quot;clone2c4dd56db2eb.ff&quot; 8.1.2 Memory mapping with bigmemory The bigmemory-package handles data in matrices, and therefore only accepts variables in the same data type. Before importing data via the bigmemory-package, we thus have to ensure that all variables in the raw data can be imported in a common type. This example follows the example of the package authors given here.37 # SET UP ---------------- # load packages library(bigmemory) library(biganalytics) # import the data flights &lt;- read.big.matrix(&quot;data/flights.csv&quot;, type=&quot;integer&quot;, header=TRUE, backingfile=&quot;flights.bin&quot;, descriptorfile=&quot;flights.desc&quot;) Note that, similar to the ff-example, read.big.matrix() initiates a local file-backing flights.bin on disk which is linked to the flights-object in RAM. From looking at the imported file, we see that various variable values have been discarded. This is due to the fact that we have forced all variables to be of type \"integer\" when importing the data set. summary(flights) ## min max mean ## year 2013.000 2013.000 2013.000 ## month 1.000 12.000 6.549 ## day 1.000 31.000 15.711 ## dep_time 1.000 2400.000 1349.110 ## sched_dep_time 106.000 2359.000 1344.255 ## dep_delay -43.000 1301.000 12.639 ## arr_time 1.000 2400.000 1502.055 ## sched_arr_time 1.000 2359.000 1536.380 ## arr_delay -86.000 1272.000 6.895 ## carrier 9.000 9.000 9.000 ## flight 1.000 8500.000 1971.924 ## tailnum ## origin ## dest ## air_time 20.000 695.000 150.686 ## distance 17.000 4983.000 1039.913 ## hour 1.000 23.000 13.180 ## minute 0.000 59.000 26.230 ## time_hour 2013.000 2014.000 2013.000 ## NAs ## year 0.000 ## month 0.000 ## day 0.000 ## dep_time 8255.000 ## sched_dep_time 0.000 ## dep_delay 8255.000 ## arr_time 8713.000 ## sched_arr_time 0.000 ## arr_delay 9430.000 ## carrier 318316.000 ## flight 0.000 ## tailnum 336776.000 ## origin 336776.000 ## dest 336776.000 ## air_time 9430.000 ## distance 0.000 ## hour 0.000 ## minute 0.000 ## time_hour 0.000 8.2 Typical cleaning tasks Normalize/standardize. Code additional variables (indicators, strings to categorical, etc.). Remove, add covariates. Merge data sets. Set data types. Import raw data. Clean/transform. Store for analysis. Write to file. Write to database. RAM: Raw data does not fit into memory. Transformations enlarge RAM allocation (copying). Mass Storage: Reading/Writing CPU: Parsing (data types) 8.2.1 Data Preparation with ff 8.2.1.1 Set up The following examples are based on Walkowiak (2016), Chapter 3. You can download the original data sets used in these examples from the book’s GitHub repository. The set up for our analysis script involves the loading of the ff and ffbase packages, the intitiation of fix variables to hold the paths to the data sets, as well as the creation and assignment of a new local directory ffdf in which the binary flat files-partitioned chunks of the original data sets will be stored. ## SET UP ------------------------ # create and set directory for ff files system(&quot;mkdir ffdf&quot;) options(fftempdir = &quot;ffdf&quot;) # load packages library(ff) library(ffbase) library(pryr) # fix vars FLIGHTS_DATA &lt;- &quot;data/flights_sep_oct15.txt&quot; AIRLINES_DATA &lt;- &quot;data/airline_id.csv&quot; 8.2.1.2 Data import In a first step we read (or ‘upload’) the data into R. This step involves the creation of the binary chunked files as well as the mapping of these files and the metadata. In comparison to the traditional read.csv approach, you will notice two things. On the one hand the data import takes longer, on the other hand it uses up much less RAM than than with read.csv. # DATA IMPORT ------------------ # check memory used mem_used() ## 1.71 GB # 1. Upload flights_sep_oct15.txt and airline_id.csv files from flat files. system.time(flights.ff &lt;- read.table.ffdf(file=FLIGHTS_DATA, sep=&quot;,&quot;, VERBOSE=TRUE, header=TRUE, next.rows=100000, colClasses=NA)) ## read.table.ffdf 1..100000 (100000) csv-read=0.569sec ffdf-write=0.08sec ## read.table.ffdf 100001..200000 (100000) csv-read=0.621sec ffdf-write=0.067sec ## read.table.ffdf 200001..300000 (100000) csv-read=0.574sec ffdf-write=0.058sec ## read.table.ffdf 300001..400000 (100000) csv-read=0.605sec ffdf-write=0.063sec ## read.table.ffdf 400001..500000 (100000) csv-read=0.566sec ffdf-write=0.079sec ## read.table.ffdf 500001..600000 (100000) csv-read=0.592sec ffdf-write=0.059sec ## read.table.ffdf 600001..700000 (100000) csv-read=0.573sec ffdf-write=0.056sec ## read.table.ffdf 700001..800000 (100000) csv-read=0.578sec ffdf-write=0.059sec ## read.table.ffdf 800001..900000 (100000) csv-read=0.573sec ffdf-write=0.063sec ## read.table.ffdf 900001..951111 (51111) csv-read=0.355sec ffdf-write=0.051sec ## csv-read=5.606sec ffdf-write=0.635sec TOTAL=6.241sec ## user system elapsed ## 5.767 0.555 6.244 system.time(airlines.ff &lt;- read.csv.ffdf(file= AIRLINES_DATA, VERBOSE=TRUE, header=TRUE, next.rows=100000, colClasses=NA)) ## read.table.ffdf 1..1607 (1607) csv-read=0.006sec ffdf-write=0.003sec ## csv-read=0.006sec ffdf-write=0.003sec TOTAL=0.009sec ## user system elapsed ## 0.009 0.001 0.009 # check memory used mem_used() ## 1.71 GB Comparison with read.table ##Using read.table() system.time(flights.table &lt;- read.table(FLIGHTS_DATA, sep=&quot;,&quot;, header=TRUE)) ## user system elapsed ## 5.204 0.350 5.481 gc() ## used (Mb) gc trigger (Mb) max used ## Ncells 6628799 354.1 10550368 563.5 10550368 ## Vcells 185332597 1414.0 450132776 3434.3 312469873 ## (Mb) ## Ncells 563.5 ## Vcells 2384.0 system.time(airlines.table &lt;- read.csv(AIRLINES_DATA, header = TRUE)) ## user system elapsed ## 0.002 0.000 0.002 # check memory used mem_used() ## 1.85 GB 8.2.1.3 Inspect imported files A particularly useful aspect of working with the ff-package and the packages building on them is that many of the simple R functions that work on usual data.frames in RAM also work on ffdfs. Hence, without actually having loaded the entire raw data of a large data set into RAM, we can quickly get an overview of the key characteristics such as the number of observations and the number of variables. # 2. Inspect the ffdf objects. ## For flights.ff object: class(flights.ff) ## [1] &quot;ffdf&quot; dim(flights.ff) ## [1] 951111 28 ## For airlines.ff object: class(airlines.ff) ## [1] &quot;ffdf&quot; dim(airlines.ff) ## [1] 1607 2 8.2.1.4 Data cleaning and transformation After inspecting the data, we go through several steps of cleaning and transformation, with the goal of then merging the two data sets. That is, we want to create a new data set that contains detailed flights information but with additional information on the carriers/airlines. First, we want to rename some of the variables. # step 1: ## Rename &quot;Code&quot; variable from airlines.ff to &quot;AIRLINE_ID&quot; and &quot;Description&quot; into &quot;AIRLINE_NM&quot;. names(airlines.ff) &lt;- c(&quot;AIRLINE_ID&quot;, &quot;AIRLINE_NM&quot;) names(airlines.ff) ## [1] &quot;AIRLINE_ID&quot; &quot;AIRLINE_NM&quot; str(airlines.ff[1:20,]) ## &#39;data.frame&#39;: 20 obs. of 2 variables: ## $ AIRLINE_ID: int 19031 19032 19033 19034 19035 19036 19037 19038 19039 19040 ... ## $ AIRLINE_NM: Factor w/ 1607 levels &quot;40-Mile Air: Q5&quot;,..: 945 1025 503 721 64 725 1194 99 1395 276 ... Now we can join the two data sets via the unique airline identifier \"AIRLINE_ID\". Note that these kind of operations would usually take up substantially more RAM on the spot, if both original data sets would also be fully loaded into RAM. As illustrated by the mem_change()-function, this is not the case here. All that is needed is a small chunk of RAM to keep the metadata and mapping-information of the new ffdf object, all the actual data is cached on the hard disk. # merge of ffdf objects mem_change(flights.data.ff &lt;- merge.ffdf(flights.ff, airlines.ff, by=&quot;AIRLINE_ID&quot;)) ## 777 kB #The new object is only 551.2 Kb in size class(flights.data.ff) ## [1] &quot;ffdf&quot; dim(flights.data.ff) ## [1] 951111 29 names(flights.data.ff) ## [1] &quot;YEAR&quot; &quot;MONTH&quot; ## [3] &quot;DAY_OF_MONTH&quot; &quot;DAY_OF_WEEK&quot; ## [5] &quot;FL_DATE&quot; &quot;UNIQUE_CARRIER&quot; ## [7] &quot;AIRLINE_ID&quot; &quot;TAIL_NUM&quot; ## [9] &quot;FL_NUM&quot; &quot;ORIGIN_AIRPORT_ID&quot; ## [11] &quot;ORIGIN&quot; &quot;ORIGIN_CITY_NAME&quot; ## [13] &quot;ORIGIN_STATE_NM&quot; &quot;ORIGIN_WAC&quot; ## [15] &quot;DEST_AIRPORT_ID&quot; &quot;DEST&quot; ## [17] &quot;DEST_CITY_NAME&quot; &quot;DEST_STATE_NM&quot; ## [19] &quot;DEST_WAC&quot; &quot;DEP_TIME&quot; ## [21] &quot;DEP_DELAY&quot; &quot;ARR_TIME&quot; ## [23] &quot;ARR_DELAY&quot; &quot;CANCELLED&quot; ## [25] &quot;CANCELLATION_CODE&quot; &quot;DIVERTED&quot; ## [27] &quot;AIR_TIME&quot; &quot;DISTANCE&quot; ## [29] &quot;AIRLINE_NM&quot; Inspect difference to in-memory operation ##For flights.table: names(airlines.table) &lt;- c(&quot;AIRLINE_ID&quot;, &quot;AIRLINE_NM&quot;) names(airlines.table) ## [1] &quot;AIRLINE_ID&quot; &quot;AIRLINE_NM&quot; str(airlines.table[1:20,]) ## &#39;data.frame&#39;: 20 obs. of 2 variables: ## $ AIRLINE_ID: int 19031 19032 19033 19034 19035 19036 19037 19038 19039 19040 ... ## $ AIRLINE_NM: chr &quot;Mackey International Inc.: MAC&quot; &quot;Munz Northern Airlines Inc.: XY&quot; &quot;Cochise Airlines Inc.: COC&quot; &quot;Golden Gate Airlines Inc.: GSA&quot; ... # check memory usage of merge in RAM mem_change(flights.data.table &lt;- merge(flights.table, airlines.table, by=&quot;AIRLINE_ID&quot;)) ## 161 MB #The new object is already 105.7 Mb in size #A rapid spike in RAM use when processing 8.2.1.5 Subsetting Now, we want to filter out some observations as well as select only specific variables for a subset of the overall data set. mem_used() ## 2.02 GB # Subset the ffdf object flights.data.ff: subs1.ff &lt;- subset.ffdf(flights.data.ff, CANCELLED == 1, select = c(FL_DATE, AIRLINE_ID, ORIGIN_CITY_NAME, ORIGIN_STATE_NM, DEST_CITY_NAME, DEST_STATE_NM, CANCELLATION_CODE)) dim(subs1.ff) ## [1] 4529 7 mem_used() ## 2.02 GB 8.2.1.6 Save/load/export ffdf-files In order to better organize and easily reload newly created ffdfs, we can explicitly save them to disk. # Save a newly created ffdf object to a data file: save.ffdf(subs1.ff, overwrite = TRUE) #7 files (one for each column) created in the ffdb directory If we want to reload a previously saved ffdf, we do not have to go through the chunking of a raw data file again, but can very quickly load the data mapping and metadata into RAM in order to further work with the data (stored on disk). # Loading previously saved ffdf files: rm(subs1.ff) gc() ## used (Mb) gc trigger (Mb) max used ## Ncells 6647108 355 10550368 563.5 10550368 ## Vcells 205449240 1568 450132776 3434.3 312469873 ## (Mb) ## Ncells 563.5 ## Vcells 2384.0 load.ffdf(&quot;ffdb&quot;) # check the class and structure of the loaded data class(subs1.ff) ## [1] &quot;ffdf&quot; str(subs1.ff) ## List of 3 ## $ virtual: &#39;data.frame&#39;: 7 obs. of 7 variables: ## .. $ VirtualVmode : chr &quot;integer&quot; &quot;integer&quot; &quot;integer&quot; &quot;integer&quot; ... ## .. $ AsIs : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## .. $ VirtualIsMatrix : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## .. $ PhysicalIsMatrix : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## .. $ PhysicalElementNo: int 1 2 3 4 5 6 7 ## .. $ PhysicalFirstCol : int 1 1 1 1 1 1 1 ## .. $ PhysicalLastCol : int 1 1 1 1 1 1 1 ## .. - attr(*, &quot;Dim&quot;)= int [1:2] 4529 7 ## .. - attr(*, &quot;Dimorder&quot;)= int [1:2] 1 2 ## $ physical: List of 7 ## .. $ FL_DATE : list() ## .. ..- attr(*, &quot;physical&quot;)=Class &#39;ff_pointer&#39; &lt;externalptr&gt; ## .. .. ..- attr(*, &quot;vmode&quot;)= chr &quot;integer&quot; ## .. .. ..- attr(*, &quot;maxlength&quot;)= int 4529 ## .. .. ..- attr(*, &quot;pattern&quot;)= chr &quot;ffdf&quot; ## .. .. ..- attr(*, &quot;filename&quot;)= chr &quot;/home/umatter/Dropbox/Teaching/HSG/BigData/BigData/ffdb/subs1.ff$FL_DATE.ff&quot; ## .. .. ..- attr(*, &quot;pagesize&quot;)= int 65536 ## .. .. ..- attr(*, &quot;finalizer&quot;)= chr &quot;close&quot; ## .. .. ..- attr(*, &quot;finonexit&quot;)= logi TRUE ## .. .. ..- attr(*, &quot;readonly&quot;)= logi FALSE ## .. .. ..- attr(*, &quot;caching&quot;)= chr &quot;mmnoflush&quot; ## .. ..- attr(*, &quot;virtual&quot;)= list() ## .. .. ..- attr(*, &quot;Length&quot;)= int 4529 ## .. .. ..- attr(*, &quot;Symmetric&quot;)= logi FALSE ## .. .. ..- attr(*, &quot;Levels&quot;)= chr [1:61] &quot;2015-09-01&quot; &quot;2015-09-02&quot; &quot;2015-09-03&quot; &quot;2015-09-04&quot; ... ## .. .. ..- attr(*, &quot;ramclass&quot;)= chr &quot;factor&quot; ## .. .. - attr(*, &quot;class&quot;) = chr [1:2] &quot;ff_vector&quot; &quot;ff&quot; ## .. $ AIRLINE_ID : list() ## .. ..- attr(*, &quot;physical&quot;)=Class &#39;ff_pointer&#39; &lt;externalptr&gt; ## .. .. ..- attr(*, &quot;vmode&quot;)= chr &quot;integer&quot; ## .. .. ..- attr(*, &quot;maxlength&quot;)= int 4529 ## .. .. ..- attr(*, &quot;pattern&quot;)= chr &quot;ffdf&quot; ## .. .. ..- attr(*, &quot;filename&quot;)= chr &quot;/home/umatter/Dropbox/Teaching/HSG/BigData/BigData/ffdb/subs1.ff$AIRLINE_ID.ff&quot; ## .. .. ..- attr(*, &quot;pagesize&quot;)= int 65536 ## .. .. ..- attr(*, &quot;finalizer&quot;)= chr &quot;close&quot; ## .. .. ..- attr(*, &quot;finonexit&quot;)= logi TRUE ## .. .. ..- attr(*, &quot;readonly&quot;)= logi FALSE ## .. .. ..- attr(*, &quot;caching&quot;)= chr &quot;mmnoflush&quot; ## .. ..- attr(*, &quot;virtual&quot;)= list() ## .. .. ..- attr(*, &quot;Length&quot;)= int 4529 ## .. .. ..- attr(*, &quot;Symmetric&quot;)= logi FALSE ## .. .. - attr(*, &quot;class&quot;) = chr [1:2] &quot;ff_vector&quot; &quot;ff&quot; ## .. $ ORIGIN_CITY_NAME : list() ## .. ..- attr(*, &quot;physical&quot;)=Class &#39;ff_pointer&#39; &lt;externalptr&gt; ## .. .. ..- attr(*, &quot;vmode&quot;)= chr &quot;integer&quot; ## .. .. ..- attr(*, &quot;maxlength&quot;)= int 4529 ## .. .. ..- attr(*, &quot;pattern&quot;)= chr &quot;ffdf&quot; ## .. .. ..- attr(*, &quot;filename&quot;)= chr &quot;/home/umatter/Dropbox/Teaching/HSG/BigData/BigData/ffdb/subs1.ff$ORIGIN_CITY_NAME.ff&quot; ## .. .. ..- attr(*, &quot;pagesize&quot;)= int 65536 ## .. .. ..- attr(*, &quot;finalizer&quot;)= chr &quot;close&quot; ## .. .. ..- attr(*, &quot;finonexit&quot;)= logi TRUE ## .. .. ..- attr(*, &quot;readonly&quot;)= logi FALSE ## .. .. ..- attr(*, &quot;caching&quot;)= chr &quot;mmnoflush&quot; ## .. ..- attr(*, &quot;virtual&quot;)= list() ## .. .. ..- attr(*, &quot;Length&quot;)= int 4529 ## .. .. ..- attr(*, &quot;Symmetric&quot;)= logi FALSE ## .. .. ..- attr(*, &quot;Levels&quot;)= chr [1:305] &quot;Abilene, TX&quot; &quot;Akron, OH&quot; &quot;Albany, GA&quot; &quot;Albany, NY&quot; ... ## .. .. ..- attr(*, &quot;ramclass&quot;)= chr &quot;factor&quot; ## .. .. - attr(*, &quot;class&quot;) = chr [1:2] &quot;ff_vector&quot; &quot;ff&quot; ## .. $ ORIGIN_STATE_NM : list() ## .. ..- attr(*, &quot;physical&quot;)=Class &#39;ff_pointer&#39; &lt;externalptr&gt; ## .. .. ..- attr(*, &quot;vmode&quot;)= chr &quot;integer&quot; ## .. .. ..- attr(*, &quot;maxlength&quot;)= int 4529 ## .. .. ..- attr(*, &quot;pattern&quot;)= chr &quot;ffdf&quot; ## .. .. ..- attr(*, &quot;filename&quot;)= chr &quot;/home/umatter/Dropbox/Teaching/HSG/BigData/BigData/ffdb/subs1.ff$ORIGIN_STATE_NM.ff&quot; ## .. .. ..- attr(*, &quot;pagesize&quot;)= int 65536 ## .. .. ..- attr(*, &quot;finalizer&quot;)= chr &quot;close&quot; ## .. .. ..- attr(*, &quot;finonexit&quot;)= logi TRUE ## .. .. ..- attr(*, &quot;readonly&quot;)= logi FALSE ## .. .. ..- attr(*, &quot;caching&quot;)= chr &quot;mmnoflush&quot; ## .. ..- attr(*, &quot;virtual&quot;)= list() ## .. .. ..- attr(*, &quot;Length&quot;)= int 4529 ## .. .. ..- attr(*, &quot;Symmetric&quot;)= logi FALSE ## .. .. ..- attr(*, &quot;Levels&quot;)= chr [1:52] &quot;Alabama&quot; &quot;Alaska&quot; &quot;Arizona&quot; &quot;Arkansas&quot; ... ## .. .. ..- attr(*, &quot;ramclass&quot;)= chr &quot;factor&quot; ## .. .. - attr(*, &quot;class&quot;) = chr [1:2] &quot;ff_vector&quot; &quot;ff&quot; ## .. $ DEST_CITY_NAME : list() ## .. ..- attr(*, &quot;physical&quot;)=Class &#39;ff_pointer&#39; &lt;externalptr&gt; ## .. .. ..- attr(*, &quot;vmode&quot;)= chr &quot;integer&quot; ## .. .. ..- attr(*, &quot;maxlength&quot;)= int 4529 ## .. .. ..- attr(*, &quot;pattern&quot;)= chr &quot;ffdf&quot; ## .. .. ..- attr(*, &quot;filename&quot;)= chr &quot;/home/umatter/Dropbox/Teaching/HSG/BigData/BigData/ffdb/subs1.ff$DEST_CITY_NAME.ff&quot; ## .. .. ..- attr(*, &quot;pagesize&quot;)= int 65536 ## .. .. ..- attr(*, &quot;finalizer&quot;)= chr &quot;close&quot; ## .. .. ..- attr(*, &quot;finonexit&quot;)= logi TRUE ## .. .. ..- attr(*, &quot;readonly&quot;)= logi FALSE ## .. .. ..- attr(*, &quot;caching&quot;)= chr &quot;mmnoflush&quot; ## .. ..- attr(*, &quot;virtual&quot;)= list() ## .. .. ..- attr(*, &quot;Length&quot;)= int 4529 ## .. .. ..- attr(*, &quot;Symmetric&quot;)= logi FALSE ## .. .. ..- attr(*, &quot;Levels&quot;)= chr [1:306] &quot;Abilene, TX&quot; &quot;Akron, OH&quot; &quot;Albany, GA&quot; &quot;Albany, NY&quot; ... ## .. .. ..- attr(*, &quot;ramclass&quot;)= chr &quot;factor&quot; ## .. .. - attr(*, &quot;class&quot;) = chr [1:2] &quot;ff_vector&quot; &quot;ff&quot; ## .. $ DEST_STATE_NM : list() ## .. ..- attr(*, &quot;physical&quot;)=Class &#39;ff_pointer&#39; &lt;externalptr&gt; ## .. .. ..- attr(*, &quot;vmode&quot;)= chr &quot;integer&quot; ## .. .. ..- attr(*, &quot;maxlength&quot;)= int 4529 ## .. .. ..- attr(*, &quot;pattern&quot;)= chr &quot;ffdf&quot; ## .. .. ..- attr(*, &quot;filename&quot;)= chr &quot;/home/umatter/Dropbox/Teaching/HSG/BigData/BigData/ffdb/subs1.ff$DEST_STATE_NM.ff&quot; ## .. .. ..- attr(*, &quot;pagesize&quot;)= int 65536 ## .. .. ..- attr(*, &quot;finalizer&quot;)= chr &quot;close&quot; ## .. .. ..- attr(*, &quot;finonexit&quot;)= logi TRUE ## .. .. ..- attr(*, &quot;readonly&quot;)= logi FALSE ## .. .. ..- attr(*, &quot;caching&quot;)= chr &quot;mmnoflush&quot; ## .. ..- attr(*, &quot;virtual&quot;)= list() ## .. .. ..- attr(*, &quot;Length&quot;)= int 4529 ## .. .. ..- attr(*, &quot;Symmetric&quot;)= logi FALSE ## .. .. ..- attr(*, &quot;Levels&quot;)= chr [1:52] &quot;Alabama&quot; &quot;Alaska&quot; &quot;Arizona&quot; &quot;Arkansas&quot; ... ## .. .. ..- attr(*, &quot;ramclass&quot;)= chr &quot;factor&quot; ## .. .. - attr(*, &quot;class&quot;) = chr [1:2] &quot;ff_vector&quot; &quot;ff&quot; ## .. $ CANCELLATION_CODE: list() ## .. ..- attr(*, &quot;physical&quot;)=Class &#39;ff_pointer&#39; &lt;externalptr&gt; ## .. .. ..- attr(*, &quot;vmode&quot;)= chr &quot;integer&quot; ## .. .. ..- attr(*, &quot;maxlength&quot;)= int 4529 ## .. .. ..- attr(*, &quot;pattern&quot;)= chr &quot;ffdf&quot; ## .. .. ..- attr(*, &quot;filename&quot;)= chr &quot;/home/umatter/Dropbox/Teaching/HSG/BigData/BigData/ffdb/subs1.ff$CANCELLATION_CODE.ff&quot; ## .. .. ..- attr(*, &quot;pagesize&quot;)= int 65536 ## .. .. ..- attr(*, &quot;finalizer&quot;)= chr &quot;close&quot; ## .. .. ..- attr(*, &quot;finonexit&quot;)= logi TRUE ## .. .. ..- attr(*, &quot;readonly&quot;)= logi FALSE ## .. .. ..- attr(*, &quot;caching&quot;)= chr &quot;mmnoflush&quot; ## .. ..- attr(*, &quot;virtual&quot;)= list() ## .. .. ..- attr(*, &quot;Length&quot;)= int 4529 ## .. .. ..- attr(*, &quot;Symmetric&quot;)= logi FALSE ## .. .. ..- attr(*, &quot;Levels&quot;)= chr [1:4] &quot;&quot; &quot;A&quot; &quot;B&quot; &quot;C&quot; ## .. .. ..- attr(*, &quot;ramclass&quot;)= chr &quot;factor&quot; ## .. .. - attr(*, &quot;class&quot;) = chr [1:2] &quot;ff_vector&quot; &quot;ff&quot; ## $ row.names: NULL ## - attributes: List of 2 ## .. $ names: chr [1:2] &quot;virtual&quot; &quot;physical&quot; ## .. $ class: chr &quot;ffdf&quot; dim(subs1.ff) ## [1] 4529 7 dimnames(subs1.ff) ## [[1]] ## NULL ## ## [[2]] ## [1] &quot;FL_DATE&quot; &quot;AIRLINE_ID&quot; ## [3] &quot;ORIGIN_CITY_NAME&quot; &quot;ORIGIN_STATE_NM&quot; ## [5] &quot;DEST_CITY_NAME&quot; &quot;DEST_STATE_NM&quot; ## [7] &quot;CANCELLATION_CODE&quot; In case we want to store an ffdf data set in a format more accessible for other users (such as csv), we can do so as follows. This last step is also quite common in practice. The initial raw data set is very large, thus we perform all the theoretically very memory-intense tasks of preparing the analytic data set via ff and then store the (often much smaller) analytic data set in a more accessible csv file in order to later read it into RAM and run more computationally intense analyses directly in RAM. # Export subs1.ff into CSV and TXT files: write.csv.ffdf(subs1.ff, &quot;subset1.csv&quot;) We only use a fraction of the data used in the package vignette example, the full raw data used there can be downloaded here.↩︎ "],["descriptive-statistics-and-aggregation.html", "Chapter 9 Descriptive Statistics and Aggregation 9.1 Data aggregation: The ‘split-apply-combine’ strategy 9.2 High-speed in-memory data aggregation with data.table", " Chapter 9 Descriptive Statistics and Aggregation 9.1 Data aggregation: The ‘split-apply-combine’ strategy The ‘split-apply-combine’ strategy plays an important role in many data analysis tasks, ranging from data preparation to summary statistics and model-fitting.38 The strategy can be defined as “break up a problem into manageable pieces, operate on each piece independently and then put all the pieces back together.” (Wickham 2011, 1) Many R users are familiar with the basic concept of split-apply-combine implemented in the plyr-package intended for the usual in-memory operations (data set fits into RAM). Here, we explore the options for split-apply-combine approaches to large data sets that do not fit into RAM. 9.1.1 Data aggregation with chunked data files In this tutorial we explore the world of New York’s famous Yellow Caps. In in a first step, we will focus on the ff-based approach to employ parts of the hard disk as ‘virtual memory.’ This means, all of the examples are easily scalable without risking too much memory pressure. Given the size of the entire TLC database (over 200GB), we will only use one million taxi trips records of January 2009.39 9.1.1.1 Data import First, we read the raw taxi trips records into R with the ff-package. # load packages library(ff) library(ffbase) # set up the ff directory (for data file chunks) if (!dir.exists(&quot;fftaxi&quot;)){ system(&quot;mkdir fftaxi&quot;) } options(fftempdir = &quot;fftaxi&quot;) # import a few lines of the data, setting the column classes explicitly col_classes &lt;- c(V1 = &quot;factor&quot;, V2 = &quot;POSIXct&quot;, V3 = &quot;POSIXct&quot;, V4 = &quot;integer&quot;, V5 = &quot;numeric&quot;, V6 = &quot;numeric&quot;, V7 = &quot;numeric&quot;, V8 = &quot;numeric&quot;, V9 = &quot;numeric&quot;, V10 = &quot;numeric&quot;, V11 = &quot;numeric&quot;, V12 = &quot;factor&quot;, V13 = &quot;numeric&quot;, V14 = &quot;numeric&quot;, V15 = &quot;factor&quot;, V16 = &quot;numeric&quot;, V17 = &quot;numeric&quot;, V18 = &quot;numeric&quot;) # import the first one million observations taxi &lt;- read.table.ffdf(file = &quot;data/tlc_trips.csv&quot;, sep = &quot;,&quot;, header = TRUE, next.rows = 100000, colClasses= col_classes, nrows = 1000000 ) Following the data documentation provided by TLC, we give the columns of our data set more meaningful names and remove the empty columns (some covariates are only collected in later years). # first, we remove the empty vars V8 and V9 taxi$V8 &lt;- NULL taxi$V9 &lt;- NULL # set covariate names according to the data dictionary # see https://www1.nyc.gov/assets/tlc/downloads/pdf/data_dictionary_trip_records_yellow.pdf # note instead of taxizonne ids, long/lat are provided varnames &lt;- c(&quot;vendor_id&quot;, &quot;pickup_time&quot;, &quot;dropoff_time&quot;, &quot;passenger_count&quot;, &quot;trip_distance&quot;, &quot;start_lat&quot;, &quot;start_long&quot;, &quot;dest_lat&quot;, &quot;dest_long&quot;, &quot;payment_type&quot;, &quot;fare_amount&quot;, &quot;extra&quot;, &quot;mta_tax&quot;, &quot;tip_amount&quot;, &quot;tolls_amount&quot;, &quot;total_amount&quot;) names(taxi) &lt;- varnames When inspecting the factor variables of the data set, we notice that some of the values are not standardized/normalized and the resulting factor levels are, therefore, somewhat ambiguous. We better clean this before getting into data aggregation tasks. Note the ff-specific syntax needed to recode the factor. # inspect the factor levels levels(taxi$payment_type) ## [1] &quot;Cash&quot; &quot;CASH&quot; &quot;Credit&quot; &quot;CREDIT&quot; ## [5] &quot;Dispute&quot; &quot;No Charge&quot; # recode them levels(taxi$payment_type) &lt;- tolower(levels(taxi$payment_type)) taxi$payment_type &lt;- ff(taxi$payment_type, levels = unique(levels(taxi$payment_type)), ramclass = &quot;factor&quot;) # check result levels(taxi$payment_type) ## [1] &quot;cash&quot; &quot;credit&quot; &quot;dispute&quot; &quot;no charge&quot; 9.1.1.2 Aggregation with split-apply-combine First, we have a look at whether trips paid with credit card tend to involve lower tip amounts than trips paid by cash. In order to do so, we create a table that shows the average amount of tip paid for each payment-type category. In simple words, this means we first split the data set into subsets, each of which containing all observations belonging to a distinct payment type. Then, we compute the arithmetic mean of the tip-column of each of these subsets. Finally, we combine all of these results in one table (i.e., the split-apply-combine strategy). When working with ff, the ffdfply()-function provides a user-friendly implementation of split-apply-combine type of tasks. # load packages library(doBy) # split-apply-combine procedure on data file chunks tip_pcategory &lt;- ffdfdply(taxi, split = taxi$payment_type, BATCHBYTES = 100000000, FUN = function(x) { summaryBy(tip_amount~payment_type, data = x, FUN = mean, na.rm = TRUE)}) ## 2022-05-05 22:58:07, calculating split sizes ## 2022-05-05 22:58:07, building up split locations ## 2022-05-05 22:58:08, working on split 1/2, extracting data in RAM of 1 split elements, totalling, 0.0815 GB, while max specified data specified using BATCHBYTES is 0.09313 GB ## 2022-05-05 22:58:08, ... applying FUN to selected data ## 2022-05-05 22:58:08, ... appending result to the output ffdf ## 2022-05-05 22:58:08, working on split 2/2, extracting data in RAM of 3 split elements, totalling, 0.02281 GB, while max specified data specified using BATCHBYTES is 0.09313 GB ## 2022-05-05 22:58:08, ... applying FUN to selected data ## 2022-05-05 22:58:08, ... appending result to the output ffdf Note how the output describes the procedure step by step. Now we can have a look at the resulting summary statistic in the form of a data.frame(). as.data.frame(tip_pcategory) ## payment_type tip_amount.mean ## 1 cash 0.0008162 ## 2 credit 2.1619737 ## 3 dispute 0.0035075 ## 4 no charge 0.0041056 The result would go against our initial hypothesis. However, the comparison is a little flawed. If trips paid by credit card also tend to be longer, the result is not too surprising. We should thus look at the share of tip (or percentage), given the overall amount paid for the trip. We add an additional variable percent_tip and then repeat the aggregation exercise for this variable. # add additional column with the share of tip taxi$percent_tip &lt;- (taxi$tip_amount/taxi$total_amount)*100 # recompute the aggregate stats tip_pcategory &lt;- ffdfdply(taxi, split = taxi$payment_type, BATCHBYTES = 100000000, FUN = function(x) { summaryBy(percent_tip~payment_type, # note the difference here data = x, FUN = mean, na.rm = TRUE)}) ## 2022-05-05 22:58:08, calculating split sizes ## 2022-05-05 22:58:08, building up split locations ## 2022-05-05 22:58:09, working on split 1/2, extracting data in RAM of 1 split elements, totalling, 0.08732 GB, while max specified data specified using BATCHBYTES is 0.09313 GB ## 2022-05-05 22:58:09, ... applying FUN to selected data ## 2022-05-05 22:58:09, ... appending result to the output ffdf ## 2022-05-05 22:58:09, working on split 2/2, extracting data in RAM of 3 split elements, totalling, 0.02444 GB, while max specified data specified using BATCHBYTES is 0.09313 GB ## 2022-05-05 22:58:09, ... applying FUN to selected data ## 2022-05-05 22:58:09, ... appending result to the output ffdf # show result as data frame as.data.frame(tip_pcategory) ## payment_type percent_tip.mean ## 1 cash 0.005978 ## 2 credit 16.004173 ## 3 dispute 0.045660 ## 4 no charge 0.040433 9.1.2 Cross-tabulation of ff vectors Also in relative terms, trips paid by credit card tend to be tipped more. However, are there actually many trips paid by credit card? In order to figure this out, we count the number of trips per payment type by applying the table.ff-function provided in ffbase. table.ff(taxi$payment_type) ## ## cash credit dispute no charge ## 781295 215424 536 2745 Incidentally, trips paid in cash are way more frequent than trips paid by credit card. Again using the table.ff-function, we investigate what factors might be correlated with payment types. First, we have a look at whether payment type is associated with the number of passengers in a trip. # select the subset of observations only containing trips paid by credit card or cash taxi_sub &lt;- subset.ffdf(taxi, payment_type==&quot;credit&quot; | payment_type == &quot;cash&quot;) taxi_sub$payment_type &lt;- ff(taxi_sub$payment_type, levels = c(&quot;credit&quot;, &quot;cash&quot;), ramclass = &quot;factor&quot;) # compute the cross tabulation crosstab &lt;- table.ff(taxi_sub$passenger_count, taxi_sub$payment_type ) # add names to the margins names(dimnames(crosstab)) &lt;- c(&quot;Passenger count&quot;, &quot;Payment type&quot;) # show result crosstab ## Payment type ## Passenger count credit cash ## 0 2 44 ## 1 149990 516828 ## 2 32891 133468 ## 3 7847 36439 ## 4 2909 17901 ## 5 20688 73027 ## 6 1097 3588 From the raw numbers it is hard to see whether there are significant differences between the categories cash and credit. We therefore use a visualization technique called ‘mosaic plot’ to visualize the cross-tabulation. # install.packages(vcd) # load package for mosaic plot library(vcd) ## Loading required package: grid # generate a mosaic plot mosaic(crosstab, shade = TRUE) The plot suggests that trips involving more than one passenger tend to be paid rather by cash than by credit card. 9.2 High-speed in-memory data aggregation with data.table For large data sets that still fit into RAM, the data.table-package provides very fast and elegant functions to compute aggregate statistics. 9.2.0.1 Data import We use the already familiar fread() to import the same first million observations from the January 2009 taxi trips records. # load packages library(data.table) # import data into RAM (needs around 200MB) taxi &lt;- fread(&quot;data/tlc_trips.csv&quot;, nrows = 1000000) 9.2.0.2 Data preparation We prepare/clean the data as in the ff-approach above. # first, we remove the empty vars V8 and V9 taxi$V8 &lt;- NULL taxi$V9 &lt;- NULL # set covariate names according to the data dictionary # see https://www1.nyc.gov/assets/tlc/downloads/pdf/data_dictionary_trip_records_yellow.pdf # note instead of taxizonne ids, long/lat are provided varnames &lt;- c(&quot;vendor_id&quot;, &quot;pickup_time&quot;, &quot;dropoff_time&quot;, &quot;passenger_count&quot;, &quot;trip_distance&quot;, &quot;start_lat&quot;, &quot;start_long&quot;, &quot;dest_lat&quot;, &quot;dest_long&quot;, &quot;payment_type&quot;, &quot;fare_amount&quot;, &quot;extra&quot;, &quot;mta_tax&quot;, &quot;tip_amount&quot;, &quot;tolls_amount&quot;, &quot;total_amount&quot;) names(taxi) &lt;- varnames # clean the factor levels taxi$payment_type &lt;- tolower(taxi$payment_type) taxi$payment_type &lt;- factor(taxi$payment_type, levels = unique(taxi$payment_type)) Note the simpler syntax of essentially doing the same thing, but all in-memory. 9.2.0.3 data.table-syntax for ‘split-apply-combine’ operations With the []-syntax we index/subset usual data.frame objects in R. When working with data.tables, much more can be done in the step of ‘sub-setting’ the frame.40 For example, we can directly compute on columns. taxi[, mean(tip_amount/total_amount)] ## [1] 0.03452 Moreover, in the same step, we can ‘split’ the rows by specific groups and apply the function to each subset. taxi[, .(percent_tip = mean((tip_amount/total_amount)*100)), by = payment_type] ## payment_type percent_tip ## 1: cash 0.005978 ## 2: credit 16.004173 ## 3: no charge 0.040433 ## 4: dispute 0.045660 Similarly, we can use data.table’s dcast() for cross-tabulation-like operations. dcast(taxi[payment_type %in% c(&quot;credit&quot;, &quot;cash&quot;)], passenger_count~payment_type, fun.aggregate = length, value.var = &quot;vendor_id&quot;) ## passenger_count cash credit ## 1: 0 44 2 ## 2: 1 516828 149990 ## 3: 2 133468 32891 ## 4: 3 36439 7847 ## 5: 4 17901 2909 ## 6: 5 73027 20688 ## 7: 6 3588 1097 Moreover, ‘split-apply-combine’ is closely related to a core strategy of Big Data analytics with distributed systems: Map/Reduce - more on this in the lecture on distributed systems.↩︎ Note that the code examples below could also be run based on the entire TLC database (provided that there is enough hard-disk space available). But, creating the ff chunked file structure for a 200GB CSV would take hours or even days.↩︎ See https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html for a detailed introduction to the syntax.↩︎ "],["big-data-visualization.html", "Chapter 10 (Big) Data Visualization 10.1 Data exploration with ggplot2 10.2 Excursus: modify and create themes 10.3 Visualize Time and Space 10.4 Excursus: change color schemes", " Chapter 10 (Big) Data Visualization 10.1 Data exploration with ggplot2 In this tutorial we will work with the TLC data used in the data aggregation session. The raw data consists of several monthly CSV-files and can be downloaded via the TLC’s website. Again, we work only with the first million observations. In order to better understand the large data set at hand (particularly regarding the determinants of tips paid) we use ggplot2 to visualize some key aspects of the data. First, let’s look at the raw relationship between fare paid and the tip paid. We set up the canvas with ggplot. # load packages library(ggplot2) # set up the canvas taxiplot &lt;- ggplot(taxi, aes(y=tip_amount, x= fare_amount)) taxiplot Now we visualize the co-distribution of the two variables with a simple scatter-plot. # simple x/y plot taxiplot + geom_point() Note that this took quite a while, as R had to literally plot one million dots on the canvas. Moreover many dots fall within the same area, making it impossible to recognize how much mass there actually is. This is typical for visualization exercises with large data sets. One way to improve this, is by making the dots more transparent by setting the alpha parameter. # simple x/y plot taxiplot + geom_point(alpha=0.2) Alternatively, we can compute two-dimensional bins. Thereby, the canvas is split into rectangles and the number of observations falling into each respective rectangle is computed. The visualization is based on plotting the rectangles with counts greater than 0 and the shading of the rectangles indicates the count values. # 2-dimensional bins taxiplot + geom_bin2d() A large part of the tip/fare observations seem to be in the very lower-left corner of the pane, while most other trips seem to be evenly distributed. However, we fail to see slighter differences in this visualization. In order to reduce the dominance of the 2d-bins with very high counts, we display the natural logarithm of counts and display the bins as points. # 2-dimensional bins taxiplot + stat_bin_2d(geom=&quot;point&quot;, mapping= aes(size = log(..count..))) + guides(fill = FALSE) We note that there are many cases with very low fare amounts, many cases with no or hardly any tip, and quite a lot of cases with very high tip amounts (in relation to the rather low fare amount). In the following, we dissect this picture by having a closer look at ‘typical’ tip amounts and whether they differ by type of payment. # compute frequency of per tip amount and payment method taxi[, n_same_tip:= .N, by= c(&quot;tip_amount&quot;, &quot;payment_type&quot;)] frequencies &lt;- unique(taxi[payment_type %in% c(&quot;credit&quot;, &quot;cash&quot;), c(&quot;n_same_tip&quot;, &quot;tip_amount&quot;, &quot;payment_type&quot;)][order(n_same_tip, decreasing = TRUE)]) # plot top 20 frequent tip amounts fare &lt;- ggplot(data = frequencies[1:20], aes(x = factor(tip_amount), y = n_same_tip)) fare + geom_bar(stat = &quot;identity&quot;) Indeed, paying no tip at all is quite frequent, overall.41 The bar plot also indicates that there seem to be some ‘focal points’ in the amount of tips paid. Clearly, paying one USD or two USD is more common than paying fractions. However, fractions of dollars might be more likely if tips are paid in cash and customers simply add some loose change to the fare amount paid. fare + geom_bar(stat = &quot;identity&quot;) + facet_wrap(&quot;payment_type&quot;) Clearly, it looks like trips paid in cash tend not to be tipped (at least in this subsample). Let’s try to tease this information out of the initial points plot. Trips paid in cash are often not tipped, we thus should indicate the payment method. Moreover, tips paid in full dollar amounts might indicate a habit. # indicate natural numbers taxi[, dollar_paid := ifelse(tip_amount == round(tip_amount,0), &quot;Full&quot;, &quot;Fraction&quot;),] # extended x/y plot taxiplot + geom_point(alpha=0.2, aes(color=payment_type)) + facet_wrap(&quot;dollar_paid&quot;) Now the picture is getting clearer. Paying tip seems to follow certain rules of thumb. Certain fixed amounts tend to be paid independent of the fare amount (visible in the straight lines of dots on the right-hand panel). At the same time, the pattern in the left panel indicates another habit: computing the amount of tip as a linear function of the total fare amount (‘pay 10% tip’). A third habit might be to determine the amount of tip by ‘rounding up’ the total amount paid. In the following, we try to tease the latter out, only focusing on credit card payments. taxi[, rounded_up := ifelse(fare_amount + tip_amount == round(fare_amount + tip_amount, 0), &quot;Rounded up&quot;, &quot;Not rounded&quot;)] # extended x/y plot taxiplot + geom_point(data= taxi[payment_type == &quot;credit&quot;], alpha=0.2, aes(color=rounded_up)) + facet_wrap(&quot;dollar_paid&quot;) Now we can start modelling. A reasonable first shot is to model the tip amount as a linear function of the fare amount, conditional on the no-zero tip amounts paid as fractions of a dollar. modelplot &lt;- ggplot(data= taxi[payment_type == &quot;credit&quot; &amp; dollar_paid == &quot;Fraction&quot; &amp; 0 &lt; tip_amount], aes(x = fare_amount, y = tip_amount)) modelplot + geom_point(alpha=0.2, colour=&quot;darkgreen&quot;) + geom_smooth(method = &quot;lm&quot;, colour = &quot;black&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; Finally, we prepare the plot for reporting. ggplot2 provides several predefined ‘themes’ for plots which define all kind of aspects of a plot (background color, line colors, font size etc.). The easiest way to tweak the design of your final plot in a certain direction is to just add such a pre-defined theme at the end of your plot. Some of the pre-defined themes allow you to change a few aspects such as the font type and the base size of all the texts in the plot (labels and tick numbers etc.). Here, we use the theme_bw(), increase the font size and switch to serif-type font. theme_bw() is one of the complete themes already shipped with the basic ggplot2 installation.42 Many more themes can be found in additional R packages (see, for example, the ggthemes package). modelplot &lt;- ggplot(data= taxi[payment_type == &quot;credit&quot; &amp; dollar_paid == &quot;Fraction&quot; &amp; 0 &lt; tip_amount], aes(x = fare_amount, y = tip_amount)) modelplot + geom_point(alpha=0.2, colour=&quot;darkgreen&quot;) + geom_smooth(method = &quot;lm&quot;, colour = &quot;black&quot;) + ylab(&quot;Amount of tip paid (in USD)&quot;) + xlab(&quot;Amount of fare paid (in USD)&quot;) + theme_bw(base_size = 18, base_family = &quot;serif&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; 10.2 Excursus: modify and create themes Apart from using pre-defined themes as illustrated above, we can use the theme() function to further modify the design of a plot. For example, we can print the axis labels (‘axis titles’) in bold. modelplot &lt;- ggplot(data= taxi[payment_type == &quot;credit&quot; &amp; dollar_paid == &quot;Fraction&quot; &amp; 0 &lt; tip_amount], aes(x = fare_amount, y = tip_amount)) modelplot + geom_point(alpha=0.2, colour=&quot;darkgreen&quot;) + geom_smooth(method = &quot;lm&quot;, colour = &quot;black&quot;) + ylab(&quot;Amount of tip paid (in USD)&quot;) + xlab(&quot;Amount of fare paid (in USD)&quot;) + theme_bw(base_size = 18, base_family = &quot;serif&quot;) + theme(axis.title = element_text(face=&quot;bold&quot;)) ## `geom_smooth()` using formula &#39;y ~ x&#39; There is a large list of plot design aspects that can be modified in this way (see ?theme() for details). 10.2.1 Create your own theme: simple approach Extensive design modifications via theme() can involve many lines of code, making your plot code harder to read/understand. In practice, you might want to define your specific theme once and then apply this theme to all of your plots. In order to do so it makes sense to choose one of the existing themes as a basis and then modify its design aspects until you have the design you are looking for. Following the design choices in the examples above, we can create our own theme_my_serif() as follows. # &#39;define&#39; a new theme theme_my_serif &lt;- theme_bw(base_size = 18, base_family = &quot;serif&quot;) + theme(axis.title = element_text(face=&quot;bold&quot;)) # apply it modelplot + geom_point(alpha=0.2, colour=&quot;darkgreen&quot;) + geom_smooth(method = &quot;lm&quot;, colour = &quot;black&quot;) + ylab(&quot;Amount of tip paid (in USD)&quot;) + xlab(&quot;Amount of fare paid (in USD)&quot;) + theme_my_serif ## `geom_smooth()` using formula &#39;y ~ x&#39; This practical approach does not require you to define every aspect of a theme. If you indeed want completely define every aspect of a theme, you can set complete=TRUE when calling the theme function. # &#39;define&#39; a new theme my_serif_theme &lt;- theme_bw(base_size = 18, base_family = &quot;serif&quot;) + theme(axis.title = element_text(face=&quot;bold&quot;), complete = TRUE) # apply it modelplot + geom_point(alpha=0.2, colour=&quot;darkgreen&quot;) + geom_smooth(method = &quot;lm&quot;, colour = &quot;black&quot;) + ylab(&quot;Amount of tip paid (in USD)&quot;) + xlab(&quot;Amount of fare paid (in USD)&quot;) + theme_my_serif ## `geom_smooth()` using formula &#39;y ~ x&#39; Note that since we have only defined one aspect (bold axis titles), the rest of the elements follow the default theme. Importantly, the approach outlined above does technically not really create a new theme like theme_bw(), as these pre-defined themes are implemented as functions. Note that we add the new theme simply with + theme_my_serif to the plot (no parentheses). In practice this is the most simple approach and it provides all the functionality you need in order to apply your own ‘theme’ to each of your plots. 10.2.2 Implementing actual themes as functions. If you really want to implement a theme as a function. The following blueprint can get you started. # define own theme theme_my_serif &lt;- function(base_size = 15, base_family = &quot;&quot;, base_line_size = base_size/170, base_rect_size = base_size/170){ theme_bw(base_size = base_size, base_family = base_family, base_line_size = base_size/170, base_rect_size = base_size/170) %+replace% # use theme_bw() as a basis but replace some design elements theme( axis.title = element_text(face=&quot;bold&quot;) ) } # apply the theme # apply it modelplot + geom_point(alpha=0.2, colour=&quot;darkgreen&quot;) + geom_smooth(method = &quot;lm&quot;, colour = &quot;black&quot;) + ylab(&quot;Amount of tip paid (in USD)&quot;) + xlab(&quot;Amount of fare paid (in USD)&quot;) + theme_my_serif(base_size = 18, base_family=&quot;serif&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; 10.3 Visualize Time and Space The previous visualization exercises were focused on visually exploring patterns in the tipping behavior of people taking a NYC yellow cap ride. Based on the same data set, will explore the time dimension and spatial dimension of the TLC Yellow Cap data. That is, we explore where trips tend to start and end, depending on the time of the day. 10.3.1 Preparations For the visualization of spatial data we first load additional packages that give R some GIS features. # load GIS packages library(rgdal) library(rgeos) Moreover, we download and import a so-called ‘shape file’ (a geospatial data format) of New York City. This will be the basis for our visualization of the spatial dimension of taxi trips. The file is downloaded from New York’s Department of City Planning and indicates the city’s community district borders.43 # download the zipped shapefile to a temporary file, unzip URL &lt;- &quot;https://www1.nyc.gov/assets/planning/download/zip/data-maps/open-data/nycd_19a.zip&quot; tmp_file &lt;- tempfile() download.file(URL, tmp_file) file_path &lt;- unzip(tmp_file, exdir= &quot;data&quot;) # delete the temporary file unlink(tmp_file) Now we can import the shape file and have a look at how the GIS data is structured. # read GIS data nyc_map &lt;- readOGR(file_path[1], verbose = FALSE) # have a look at the GIS data summary(nyc_map) ## Object of class SpatialPolygonsDataFrame ## Coordinates: ## min max ## x 913175 1067383 ## y 120122 272844 ## Is projected: TRUE ## proj4string : ## [+proj=lcc +lat_0=40.1666666666667 +lon_0=-74 ## +lat_1=41.0333333333333 +lat_2=40.6666666666667 ## +x_0=300000 +y_0=0 +datum=NAD83 +units=us-ft ## +no_defs] ## Data attributes: ## BoroCD Shape_Leng Shape_Area ## Min. :101 Min. : 23963 Min. :2.43e+07 ## 1st Qu.:206 1st Qu.: 36611 1st Qu.:4.84e+07 ## Median :308 Median : 52246 Median :8.27e+07 ## Mean :297 Mean : 74890 Mean :1.19e+08 ## 3rd Qu.:406 3rd Qu.: 85711 3rd Qu.:1.37e+08 ## Max. :595 Max. :270660 Max. :5.99e+08 Note that the coordinates are not in the usual longitude and latitude units. The original map uses a different projection than the TLC data of cap trips records. Before plotting, we thus have to change the projection to be in line with the TLC data. # transform the projection nyc_map &lt;- spTransform(nyc_map, CRS(&quot;+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0&quot;)) # check result summary(nyc_map) ## Object of class SpatialPolygonsDataFrame ## Coordinates: ## min max ## x -74.26 -73.70 ## y 40.50 40.92 ## Is projected: FALSE ## proj4string : [+proj=longlat +datum=WGS84 +no_defs] ## Data attributes: ## BoroCD Shape_Leng Shape_Area ## Min. :101 Min. : 23963 Min. :2.43e+07 ## 1st Qu.:206 1st Qu.: 36611 1st Qu.:4.84e+07 ## Median :308 Median : 52246 Median :8.27e+07 ## Mean :297 Mean : 74890 Mean :1.19e+08 ## 3rd Qu.:406 3rd Qu.: 85711 3rd Qu.:1.37e+08 ## Max. :595 Max. :270660 Max. :5.99e+08 One last preparatory step is to convert the map data to a data.frame for plotting with ggplot. nyc_map &lt;- fortify(nyc_map) 10.3.2 Pick-up and drop-off locations Since trips might actually start or end outside of NYC, we first restrict the sample of trips to those within the boundary box of the map. For the sake of the exercise, we only select a random sample of 50000 trips from the remaining trip records. # taxi trips plot data taxi_trips &lt;- taxi[start_long &lt;= max(nyc_map$long) &amp; start_long &gt;= min(nyc_map$long) &amp; dest_long &lt;= max(nyc_map$long) &amp; dest_long &gt;= min(nyc_map$long) &amp; start_lat &lt;= max(nyc_map$lat) &amp; start_lat &gt;= min(nyc_map$lat) &amp; dest_lat &lt;= max(nyc_map$lat) &amp; dest_lat &gt;= min(nyc_map$lat) ] taxi_trips &lt;- taxi_trips[base::sample(1:nrow(taxi_trips), 50000)] In order to visualize how the cap traffic is changing over the course of the day, we add an additional variable called start_time in which we store the time (hour) of the day a trip started. taxi_trips$start_time &lt;- hour(taxi_trips$pickup_time) Particularly, we want to look at differences between, morning, afternoon, and evening/night. # define new variable for facets taxi_trips$time_of_day &lt;- &quot;Morning&quot; taxi_trips[start_time &gt; 12 &amp; start_time &lt; 17]$time_of_day &lt;- &quot;Afternoon&quot; taxi_trips[start_time %in% c(17:24, 0:5)]$time_of_day &lt;- &quot;Evening/Night&quot; taxi_trips$time_of_day &lt;- factor(taxi_trips$time_of_day, levels = c(&quot;Morning&quot;, &quot;Afternoon&quot;, &quot;Evening/Night&quot;)) We initiate the plot by first setting up the canvas with our taxi trips data. Then, we add the map as a first layer. # set up the canvas locations &lt;- ggplot(taxi_trips, aes(x=long, y=lat)) # add the map geometry locations &lt;- locations + geom_map(data = nyc_map, map = nyc_map, aes(map_id = id)) locations Now we can start adding the pick-up and drop-off locations of cap trips. # add pick-up locations to plot locations + geom_point(aes(x=start_long, y=start_lat), color=&quot;orange&quot;, size = 0.1, alpha = 0.2) As to be expected, most of the trips start in Manhattan. Now let’s look at where trips end. # add pick-up locations to plot locations + geom_point(aes(x=dest_long, y=dest_lat), color=&quot;steelblue&quot;, size = 0.1, alpha = 0.2) + geom_point(aes(x=start_long, y=start_lat), color=&quot;orange&quot;, size = 0.1, alpha = 0.2) Incidentally, more trips tend to end outside of Manhattan. And the destinations seem to be broader spread across the city then the pick-up locations. Most destinations are still in Manhattan, though. Now let’s have a look at how this picture changes depending on the time of the day. # pick-up locations locations + geom_point(aes(x=start_long, y=start_lat), color=&quot;orange&quot;, size = 0.1, alpha = 0.2) + facet_wrap(vars(time_of_day)) # drop-off locations locations + geom_point(aes(x=dest_long, y=dest_lat), color=&quot;steelblue&quot;, size = 0.1, alpha = 0.2) + facet_wrap(vars(time_of_day)) Alternatively, we can plot the hours on a continuous scale. # drop-off locations locations + geom_point(aes(x=dest_long, y=dest_lat, color = start_time ), size = 0.1, alpha = 0.2) + scale_colour_gradient2( low = &quot;red&quot;, mid = &quot;yellow&quot;, high = &quot;red&quot;, midpoint = 12) 10.4 Excursus: change color schemes In the example above we use scale_colour_gradient2() to modify the color gradient used to visualize the start time of taxi trips. By default, ggplot would plot the following (default gradient color setting): # drop-off locations locations + geom_point(aes(x=dest_long, y=dest_lat, color = start_time ), size = 0.1, alpha = 0.2) ggplot2 offers various functions to modify the color scales used in a plot. In the case of the example above, we visualize values of a continuous variable. Hence we use a gradient color scale. In case of categorical variables we need to modify the default discrete color scale. Recall the plot illustrating tipping behavior, where we highlight in which observations the client payd with credit card, cash, etc. # indicate natural numbers taxi[, dollar_paid := ifelse(tip_amount == round(tip_amount,0), &quot;Full&quot;, &quot;Fraction&quot;),] # extended x/y plot taxiplot + geom_point(alpha=0.2, aes(color=payment_type)) + facet_wrap(&quot;dollar_paid&quot;) Since we do not further specify the discrete color scheme to be used, ggplot simply uses its default color scheme for this plot. We can change this as follows. # indicate natural numbers taxi[, dollar_paid := ifelse(tip_amount == round(tip_amount,0), &quot;Full&quot;, &quot;Fraction&quot;),] # extended x/y plot taxiplot + geom_point(alpha=0.2, aes(color=payment_type)) + facet_wrap(&quot;dollar_paid&quot;) + scale_color_discrete(type = c(&quot;red&quot;, &quot;steelblue&quot;, &quot;orange&quot;, &quot;purple&quot;)) Or, could there be another explanation for this pattern in the data?↩︎ See the ggplot2 documentation for a list of all pre-defined themes shipped with the basic installation.↩︎ Similar files are provided online by most city authorities in developed countries. See, for example, GIS Data for the City and Canton of Zurich: https://maps.zh.ch/.↩︎ "],["bottle-necks-in-local-big-data-analytics.html", "Chapter 11 Bottle Necks in Local Big Data Analytics 11.1 Case study: Data Import and Memory Allocation 11.2 Case Study: Loops, Memory, and Vectorization 11.3 Case study: Bootstrapping and Parallel Processing 11.4 Case Study: Efficient Fixed Effects Estimation", " Chapter 11 Bottle Necks in Local Big Data Analytics 11.1 Case study: Data Import and Memory Allocation Consider the first steps of a data pipeline in R. The first part of our script to import and clean the data looks as follows. ########################################################### # Big Data Statistics: Flights data import and preparation # # U. Matter, January 2019 ########################################################### # SET UP ----------------- # fix variables DATA_PATH &lt;- &quot;data/flights.csv&quot; # DATA IMPORT ---------------- flights &lt;- read.csv(DATA_PATH) # DATA PREPARATION -------- flights &lt;- flights[,-1:-3] When running this script, we notice that some of the steps need a certain amount of time to process. Moreover, while none of these steps obviously involves a lot of computation (such as a matrix inversion or numerical optimization), it quite likely involves memory allocation. We first read data into RAM (allocated to R by our operating system). It turns out that there are different ways to allocate RAM when reading data from a CSV file. Depending on the amount of data to be read in, one or the other approach might be faster. We first investigate the RAM allocation in R with mem_change() and mem_used(). # SET UP ----------------- # fix variables DATA_PATH &lt;- &quot;data/flights.csv&quot; # load packages library(pryr) # check how much memory is used by R (overall) mem_used() ## 2.3 GB # check the change in memory due to each step # DATA IMPORT ---------------- mem_change(flights &lt;- read.csv(DATA_PATH)) ## 33 MB # DATA PREPARATION -------- flights &lt;- flights[,-1:-3] # check how much memory is used by R now mem_used() ## 2.33 GB The last result is kind of interesting. The object flights must have been larger right after importing it than at the end of the script. We have thrown out several variables, after all. Why does R still use that much memory? R does by default not ‘clean up’ memory unless it is really necessary (meaning no more memory is available). In this case, R has still way more memory available from the operating system, thus there is no need to ‘collect the garbage’ yet. However, we can force R to collect the garbage on the spot with gc(). This can be helpful to better keep track of the memory needed by an analytics script. gc() ## used (Mb) gc trigger (Mb) max used ## Ncells 8413645 449.4 14599147 779.7 14014979 ## Vcells 232036526 1770.3 451501444 3444.7 451501444 ## (Mb) ## Ncells 748.5 ## Vcells 3444.7 Now, let’s see how we can improve the performance of this script with regard to memory allocation. Most memory is allocated when importing the file. Obviously, any improvement of the script must still result in importing all the data. However, there are different ways to read data into RAM. read.csv() reads all lines of a csv file consecutively. In contrast, data.table::fread() first ‘maps’ the data file into memory and only then actually reads it in line by line. This involves an additional initial step, but the larger the file, the less relevant is this first step with regard to the total time needed to read all the data into memory. By switching on the verbose option, we can actually see what fread is doing. # load packages library(data.table) # DATA IMPORT ---------------- flights &lt;- fread(DATA_PATH, verbose = TRUE) ## OpenMP version (_OPENMP) 201511 ## omp_get_num_procs() 12 ## R_DATATABLE_NUM_PROCS_PERCENT unset (default 50) ## R_DATATABLE_NUM_THREADS unset ## R_DATATABLE_THROTTLE unset (default 1024) ## omp_get_thread_limit() 2147483647 ## omp_get_max_threads() 12 ## OMP_THREAD_LIMIT unset ## OMP_NUM_THREADS unset ## RestoreAfterFork true ## data.table is using 6 threads with throttle==1024. See ?setDTthreads. ## freadR.c has been passed a filename: data/flights.csv ## [01] Check arguments ## Using 6 threads (omp_get_max_threads()=12, nth=6) ## NAstrings = [&lt;&lt;NA&gt;&gt;] ## None of the NAstrings look like numbers. ## show progress = 0 ## 0/1 column will be read as integer ## [02] Opening the file ## Opening file data/flights.csv ## File opened, size = 29.53MB (30960660 bytes). ## Memory mapped ok ## [03] Detect and skip BOM ## [04] Arrange mmap to be \\0 terminated ## \\n has been found in the input and different lines can end with different line endings (e.g. mixed \\n and \\r\\n in one file). This is common and ideal. ## [05] Skipping initial rows if needed ## Positioned on line 1 starting: &lt;&lt;year,month,day,dep_time,sched_&gt;&gt; ## [06] Detect separator, quoting rule, and ncolumns ## Detecting sep automatically ... ## sep=&#39;,&#39; with 100 lines of 19 fields using quote rule 0 ## Detected 19 columns on line 1. This line is either column names or first data row. Line starts as: &lt;&lt;year,month,day,dep_time,sched_&gt;&gt; ## Quote rule picked = 0 ## fill=false and the most number of columns found is 19 ## [07] Detect column types, good nrow estimate and whether first row is column names ## Number of sampling jump points = 100 because (30960659 bytes from row 1 to eof) / (2 * 8882 jump0size) == 1742 ## Type codes (jump 000) : 555555555C5CCC5555B Quote rule 0 ## Type codes (jump 100) : 555555555C5CCC5555B Quote rule 0 ## &#39;header&#39; determined to be true due to column 1 containing a string on row 1 and a lower type (int32) in the rest of the 10048 sample rows ## ===== ## Sampled 10048 rows (handled \\n inside quoted fields) at 101 jump points ## Bytes from first data row on line 2 to the end of last row: 30960501 ## Line length: mean=92.03 sd=3.56 min=68 max=98 ## Estimated number of rows: 30960501 / 92.03 = 336403 ## Initial alloc = 370043 rows (336403 + 9%) using bytes/max(mean-2*sd,min) clamped between [1.1*estn, 2.0*estn] ## ===== ## [08] Assign column names ## [09] Apply user overrides on column types ## After 0 type and 0 drop user overrides : 555555555C5CCC5555B ## [10] Allocate memory for the datatable ## Allocating 19 column slots (19 - 0 dropped) with 370043 rows ## [11] Read the data ## jumps=[0..30), chunk_size=1032016, total_size=30960501 ## Read 336776 rows x 19 columns from 29.53MB (30960660 bytes) file in 00:00.078 wall clock time ## [12] Finalizing the datatable ## Type counts: ## 14 : int32 &#39;5&#39; ## 1 : float64 &#39;B&#39; ## 4 : string &#39;C&#39; ## ============================= ## 0.000s ( 0%) Memory map 0.029GB file ## 0.003s ( 4%) sep=&#39;,&#39; ncol=19 and header detection ## 0.000s ( 0%) Column type detection using 10048 sample rows ## 0.001s ( 1%) Allocation of 370043 rows x 19 cols (0.033GB) of which 336776 ( 91%) rows used ## 0.074s ( 95%) Reading 30 chunks (0 swept) of 0.984MB (each chunk 11225 rows) using 6 threads ## + 0.014s ( 18%) Parse to row-major thread buffers (grown 0 times) ## + 0.037s ( 48%) Transpose ## + 0.023s ( 29%) Waiting ## 0.000s ( 0%) Rereading 0 columns due to out-of-sample type exceptions ## 0.078s Total Let’s put it all together and look at the memory changes and usage. For a fair comparison, we first have to delete flights and collect the garbage with gc(). # SET UP ----------------- # fix variables DATA_PATH &lt;- &quot;data/flights.csv&quot; # load packages library(pryr) library(data.table) # housekeeping flights &lt;- NULL gc() ## used (Mb) gc trigger (Mb) max used ## Ncells 8406018 449 14599147 779.7 14014979 ## Vcells 228874122 1746 451501444 3444.7 451501444 ## (Mb) ## Ncells 748.5 ## Vcells 3444.7 # check the change in memory due to each step # DATA IMPORT ---------------- mem_change(flights &lt;- fread(DATA_PATH)) ## 35.6 MB 11.2 Case Study: Loops, Memory, and Vectorization 11.2.1 Preparation We first read the economics data set into R and extend it by duplicating its rows in order to get a slightly larger data set (this step can easily be adapted to create a very large data set). # read dataset into R economics &lt;- read.csv(&quot;data/economics.csv&quot;) # have a look at the data head(economics, 2) ## date pce pop psavert uempmed unemploy ## 1 1967-07-01 507.4 198712 12.5 4.5 2944 ## 2 1967-08-01 510.5 198911 12.5 4.7 2945 # create a &#39;large&#39; dataset out of this for (i in 1:3) { economics &lt;- rbind(economics, economics) } dim(economics) ## [1] 4592 6 11.2.2 Naïve Approach (ignorant of R) The goal of this code example is to compute the real personal consumption expenditures, assuming that pce in the economics data set provides the nominal personal consumption expenditures. Thus, we divide each value in the vector pce by a deflator 1.05. The first approach we take is based on a simple for-loop. In each iteration one element in pce is divided by the deflator and the resulting value is stored as a new element in the vector pce_real. # Naïve approach (ignorant of R) deflator &lt;- 1.05 # define deflator # iterate through each observation pce_real &lt;- c() n_obs &lt;- length(economics$pce) for (i in 1:n_obs) { pce_real &lt;- c(pce_real, economics$pce[i]/deflator) } # look at the result head(pce_real, 2) ## [1] 483.2 486.2 How long does it take? # Naïve approach (ignorant of R) deflator &lt;- 1.05 # define deflator # iterate through each observation pce_real &lt;- list() n_obs &lt;- length(economics$pce) time_elapsed &lt;- system.time( for (i in 1:n_obs) { pce_real &lt;- c(pce_real, economics$pce[i]/deflator) }) time_elapsed ## user system elapsed ## 0.088 0.000 0.088 Assuming a linear time algorithm (\\(O(n)\\)), we need that much time for one additional row of data: time_per_row &lt;- time_elapsed[3]/n_obs time_per_row ## elapsed ## 1.916e-05 If we deal with big data, say 100 million rows, that is # in seconds (time_per_row*100^4) ## elapsed ## 1916 # in minutes (time_per_row*100^4)/60 ## elapsed ## 31.94 # in hours (time_per_row*100^4)/60^2 ## elapsed ## 0.5323 Can we improve this? 11.2.3 Improvement 1: Pre-allocation of memory In the naïve approach taken above, each iteration of the loop causes R to re-allocate memory because the number of elements in vector pce_element is changing. In simple terms, this means that R needs to execute more steps in each iteration. We can improve this with a simple trick by initiating the vector in the right size to begin with (filled with NA values). # Improve memory allocation (still somewhat ignorant of R) deflator &lt;- 1.05 # define deflator n_obs &lt;- length(economics$pce) # allocate memory beforehand # Initiate the vector in the right size pce_real &lt;- rep(NA, n_obs) # iterate through each observation time_elapsed &lt;- system.time( for (i in 1:n_obs) { pce_real[i] &lt;- economics$pce[i]/deflator }) Let’s see if this helped to make the code faster. time_per_row &lt;- time_elapsed[3]/n_obs time_per_row ## elapsed ## 1.524e-06 Again, we can extrapolate (approximately) the computation time, assuming the data set had millions of rows. # in seconds (time_per_row*100^4) ## elapsed ## 152.4 # in minutes (time_per_row*100^4)/60 ## elapsed ## 2.541 # in hours (time_per_row*100^4)/60^2 ## elapsed ## 0.04234 This looks much better, but we can do even better. 11.2.4 Improvement 2: Exploit vectorization In this approach, we exploit the fact that in R ‘everything is a vector’ and that many of the basic R functions (such as math operators) are vectorized. In simple terms, this means that a vectorized operation is implemented in such a way that it can take advantage of the similarity of each of the vector’s elements. That is, R only has to figure out once how to apply a given function to a vector element in order to apply it to all elements of the vector. In a simple loop, R has to go through the same ‘preparatory’ steps again and again in each iteration, this is time-intensive. In this example, we specifically exploit that the division operator / is actually a vectorized function. Thus, the division by our deflator is applied to each element of economics$pce. # Do it &#39;the R way&#39; deflator &lt;- 1.05 # define deflator # Exploit R&#39;s vectorization! time_elapsed &lt;- system.time( pce_real &lt;- economics$pce/deflator ) # same result head(pce_real, 2) ## [1] 483.2 486.2 Now this is much faster. In fact, system.time() is not precise enough to capture the time elapsed… time_per_row &lt;- time_elapsed[3]/n_obs # in seconds (time_per_row*100^4) ## elapsed ## 0 # in minutes (time_per_row*100^4)/60 ## elapsed ## 0 # in hours (time_per_row*100^4)/60^2 ## elapsed ## 0 In order to measure the improvement, we use microbenchmark::microbenchmark() to measure the elapsed time in microseconds (millionth of a second). library(microbenchmark) # measure elapsed time in microseconds (avg.) time_elapsed &lt;- summary(microbenchmark(pce_real &lt;- economics$pce/deflator))$mean # per row (in sec) time_per_row &lt;- (time_elapsed/n_obs)/10^6 Now we get a more precise picture regarding the improvement due to vectorization (again, assuming 100 million rows): # in seconds (time_per_row*100^4) ## [1] 0.153 # in minutes (time_per_row*100^4)/60 ## [1] 0.00255 # in hours (time_per_row*100^4)/60^2 ## [1] 4.25e-05 11.3 Case study: Bootstrapping and Parallel Processing In this example, we estimate a simple regression model that aims to assess racial discrimination in the context of police stops.44 The example is based on the ‘Minneapolis Police Department 2017 Stop Dataset,’ containing data on nearly all stops made by the Minneapolis Police Department for the year 2017. We start with importing the data into R. url &lt;- &quot;https://vincentarelbundock.github.io/Rdatasets/csv/carData/MplsStops.csv&quot; stopdata &lt;- data.table::fread(url) We specify a simple linear probability model that aims to test whether a person identified as ‘white’ is less likely to have her vehicle searched when stopped by the police. In order to take into account level-differences between different police precincts, we add precinct-indicators to the regression specification First, let’s remove observations with missing entries (NA) and code our main explanatory variable and the dependent variable. # remove incomplete obs stopdata &lt;- na.omit(stopdata) # code dependent var stopdata$vsearch &lt;- 0 stopdata$vsearch[stopdata$vehicleSearch==&quot;YES&quot;] &lt;- 1 # code explanatory var stopdata$white &lt;- 0 stopdata$white[stopdata$race==&quot;White&quot;] &lt;- 1 We specify our baseline model as follows. model &lt;- vsearch ~ white + factor(policePrecinct) And estimate the linear probability model via OLS (the lm function). fit &lt;- lm(model, stopdata) summary(fit) ## ## Call: ## lm(formula = model, data = stopdata) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.1394 -0.0633 -0.0547 -0.0423 0.9773 ## ## Coefficients: ## Estimate Std. Error t value ## (Intercept) 0.05473 0.00515 10.62 ## white -0.01955 0.00446 -4.38 ## factor(policePrecinct)2 0.00856 0.00676 1.27 ## factor(policePrecinct)3 0.00341 0.00648 0.53 ## factor(policePrecinct)4 0.08464 0.00623 13.58 ## factor(policePrecinct)5 -0.01246 0.00637 -1.96 ## Pr(&gt;|t|) ## (Intercept) &lt; 2e-16 *** ## white 1.2e-05 *** ## factor(policePrecinct)2 0.21 ## factor(policePrecinct)3 0.60 ## factor(policePrecinct)4 &lt; 2e-16 *** ## factor(policePrecinct)5 0.05 . ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.254 on 19078 degrees of freedom ## Multiple R-squared: 0.025, Adjusted R-squared: 0.0248 ## F-statistic: 97.9 on 5 and 19078 DF, p-value: &lt;2e-16 A potential problem with this approach (and there might be many more in this simple example) is that observations stemming from different police precincts might be correlated over time. If that is the case, we likely underestimate the coefficient’s standard errors. There is a standard approach to compute estimates for so-called cluster-robust standard errors which would take the problem of correlation over time within clusters into consideration (and deliver a more conservative estimate of the SEs). However, this approach only works well if the number of clusters in the data is roughly 50 or more. Here we only have 5. The alternative approach is to compute bootstrapped clustered standard errors. That is, we apply the bootstrap resampling procedure at the cluster level. Specifically, we draw \\(B\\) samples (with replacement), estimate and record for each bootstrap-sample the coefficient vector, and then estimate \\(SE_{boot}\\) based on the standard deviation of all respective estimated coefficient values. # load packages library(data.table) # set the &#39;seed&#39; for random numbers (makes the example reproducible) set.seed(2) # set number of bootstrap iterations B &lt;- 10 # get selection of precincts precincts &lt;- unique(stopdata$policePrecinct) # container for coefficients boot_coefs &lt;- matrix(NA, nrow = B, ncol = 2) # draw bootstrap samples, estimate model for each sample for (i in 1:B) { # draw sample of precincts (cluster level) precincts_i &lt;- sample(precincts, size = 5, replace = TRUE) # get observations bs_i &lt;- lapply(precincts_i, function(x) stopdata[stopdata$policePrecinct==x,]) bs_i &lt;- rbindlist(bs_i) # estimate model and record coefficients boot_coefs[i,] &lt;- coef(lm(model, bs_i))[1:2] # ignore FE-coefficients } Finally, let’s compute \\(SE_{boot}\\). se_boot &lt;- apply(boot_coefs, MARGIN = 2, FUN = sd) se_boot ## [1] 0.004043 0.004690 Note that even with a very small \\(B\\), computing \\(SE_{boot}\\) takes up some time to compute. When setting \\(B\\) to over 500, computation time will be substantial. Also note that running this code does hardly use up more memory than the very simple approach without bootstrapping (after all, in each bootstrap iteration the data set used to estimate the model is approximately the same size as the original data set). There is little we can do to improve the script’s performance regarding memory. However we can tell R how to allocate CPU resources more efficiently to handle that many regression estimates. Particularly, we can make use of the fact that most modern computing environments (such as a laptop) have CPUs with several cores. We can exploit this fact by instructing the computer to run the computations in parallel (simultaneously computing on several cores). The following code is a parallel implementation of our bootstrap procedure which does exactly that. # install.packages(&quot;doSNOW&quot;, &quot;parallel&quot;) # load packages for parallel processing library(doSNOW) # get the number of cores available ncores &lt;- parallel::detectCores() # set cores for parallel processing ctemp &lt;- makeCluster(ncores) # registerDoSNOW(ctemp) # set number of bootstrap iterations B &lt;- 10 # get selection of precincts precincts &lt;- unique(stopdata$policePrecinct) # container for coefficients boot_coefs &lt;- matrix(NA, nrow = B, ncol = 2) # bootstrapping in parallel boot_coefs &lt;- foreach(i = 1:B, .combine = rbind, .packages=&quot;data.table&quot;) %dopar% { # draw sample of precincts (cluster level) precincts_i &lt;- sample(precincts, size = 5, replace = TRUE) # get observations bs_i &lt;- lapply(precincts_i, function(x) stopdata[stopdata$policePrecinct==x,]) bs_i &lt;- rbindlist(bs_i) # estimate model and record coefficients coef(lm(model, bs_i))[1:2] # ignore FE-coefficients } # be a good citizen and stop the snow clusters stopCluster(cl = ctemp) As a last step, we compute again \\(SE_{boot}\\). se_boot &lt;- apply(boot_coefs, MARGIN = 2, FUN = sd) se_boot ## (Intercept) white ## 0.004347 0.005371 11.3.1 Parallelization with an EC2 instance Now, let’s go through the bootstrap example. First, let’s run the non-parallel implementation of the script. When executing the code below line-by-line, you will notice that essentially all parts of the script work exactly as on your local machine. This is one of the great advantages of running R/RStudio Server in the cloud. You can implement your entire data analysis locally (based on a small sample), test it locally, and then move it to the cloud and run it on a larger scale in exactly the same way (even with the same GUI). # CASE STUDY: PARALLEL --------------------------- # install packages install.packages(&quot;data.table&quot;) install.packages(&quot;doSNOW&quot;) # load packages library(data.table) ## ------------------------------------------------------------------------ stopdata &lt;- read.csv(&quot;https://vincentarelbundock.github.io/Rdatasets/csv/carData/MplsStops.csv&quot;) ## ------------------------------------------------------------------------ # remove incomplete obs stopdata &lt;- na.omit(stopdata) # code dependent var stopdata$vsearch &lt;- 0 stopdata$vsearch[stopdata$vehicleSearch==&quot;YES&quot;] &lt;- 1 # code explanatory var stopdata$white &lt;- 0 stopdata$white[stopdata$race==&quot;White&quot;] &lt;- 1 ## ------------------------------------------------------------------------ model &lt;- vsearch ~ white + factor(policePrecinct) ## ------------------------------------------------------------------------ fit &lt;- lm(model, stopdata) summary(fit) # bootstrapping: normal approach ## ----message=FALSE------------------------------------------------------- # set the &#39;seed&#39; for random numbers (makes the example reproducible) set.seed(2) # set number of bootstrap iterations B &lt;- 50 # get selection of precincts precincts &lt;- unique(stopdata$policePrecinct) # container for coefficients boot_coefs &lt;- matrix(NA, nrow = B, ncol = 2) # draw bootstrap samples, estimate model for each sample for (i in 1:B) { # draw sample of precincts (cluster level) precincts_i &lt;- sample(precincts, size = 5, replace = TRUE) # get observations bs_i &lt;- lapply(precincts_i, function(x) stopdata[stopdata$policePrecinct==x,]) bs_i &lt;- rbindlist(bs_i) # estimate model and record coefficients boot_coefs[i,] &lt;- coef(lm(model, bs_i))[1:2] # ignore FE-coefficients } ## ------------------------------------------------------------------------ se_boot &lt;- apply(boot_coefs, MARGIN = 2, FUN = sd) se_boot So far, we have only demonstrated that the simple implementation (non-parallel) works both locally and in the cloud. The real purpose of using an EC2 instance in this example is to make use of the fact that we can scale up our instance to have more CPU cores available for the parallel implementation of our bootstrap procedure. Recall that running the script below on our local machine will employ all cores available to an compute the bootstrap resampling in parallel on all these cores. Exactly the same thing happens when running the code below on our simple t2.micro instance. However this type of EC2 instance only has one core. You can check this when running the following line of code in RStudio Server (assuming the doSNOW package is installed and loaded): parallel::detectCores() When running the entire parallel implementation below, you will thus notice that it won’t compute the bootstrap SE any faster than with the non-parallel version above. However, by simply initiating another EC2 type with more cores, we can distribute the workload across many CPU cores, using exactly the same R-script. # bootstrapping: parallel approaach ## ----message=FALSE------------------------------------------------------- # install.packages(&quot;doSNOW&quot;, &quot;parallel&quot;) # load packages for parallel processing library(doSNOW) # get the number of cores available ncores &lt;- parallel::detectCores() # set cores for parallel processing ctemp &lt;- makeCluster(ncores) # registerDoSNOW(ctemp) # set number of bootstrap iterations B &lt;- 50 # get selection of precincts precincts &lt;- unique(stopdata$policePrecinct) # container for coefficients boot_coefs &lt;- matrix(NA, nrow = B, ncol = 2) # bootstrapping in parallel boot_coefs &lt;- foreach(i = 1:B, .combine = rbind, .packages=&quot;data.table&quot;) %dopar% { # draw sample of precincts (cluster level) precincts_i &lt;- sample(precincts, size = 5, replace = TRUE) # get observations bs_i &lt;- lapply(precincts_i, function(x) stopdata[stopdata$policePrecinct==x,]) bs_i &lt;- rbindlist(bs_i) # estimate model and record coefficients coef(lm(model, bs_i))[1:2] # ignore FE-coefficients } # be a good citizen and stop the snow clusters stopCluster(cl = ctemp) ## ------------------------------------------------------------------------ se_boot &lt;- apply(boot_coefs, MARGIN = 2, FUN = sd) se_boot 11.4 Case Study: Efficient Fixed Effects Estimation In this case study we look into a very common computational problem in applied econometrics: estimation of a fixed effects model with various fixed-effects units (i.e., many intercepts). We look at this in the context of the study on “Friends in High Places” by Cohen and Malloy (2014). Cohen and Malloy show that US Senators who are alumni of the same university/college tend to help each other out in votes on industrial policies if the corresponding policy is highly relevant for the state of one senator but not relevant for the state of the other senator. The data is provided along the published article and can be accessed here: http://doi.org/10.3886/E114873V1. The data (and code) is provided in STATA format. We can import the main data set with the foreign package. # SET UP ------------------ # load packages library(foreign) library(data.table) library(lmtest) # fix vars DATA_PATH &lt;- &quot;data/data_for_tables.dta&quot; # import data cm &lt;- as.data.table(read.dta(DATA_PATH)) # keep only clean obs cm &lt;- cm[!(is.na(yes)|is.na(pctsumyessameparty)|is.na(pctsumyessameschool)|is.na(pctsumyessamestate))] As part of this case study, we will replicate parts of Table 3 of the main article (p. 73). Specifically, we will estimate specifications (1) and (2). In both specifications, the dependent variable is an indicator yes that is equal to 1 if the corresponding senator voted Yes on the given bill and 0 otherwise. The main explanatory variables of interest are pctsumyessameschool (the percentage of senators from the same school as the corresponding senator who voted Yes on the given bill), pctsumyessamestate (the percentage of senators from the same state as the corresponding senator who voted Yes on the given bill), and pctsumyessameparty (the percentage of senators from the same party as the corresponding senator who voted Yes on the given bill) Specification 1 accounts for congress (time) fixed effects and senator (individual) fixed effects, and specification 2 account for congress-session-vote fixed effects and senator fixed effects. First, let us look at a very simple example to highlight where the computational burden in the estimation of such specifications is coming from. In terms of the regression model 1, the fixed effect specification means that we introduce an indicator variable (an intercept) for \\(N-1\\) senators and \\(M-1\\) congresses. That is, while the simple model matrix (\\(X\\)) without accounting for fixed effects has dimensions \\(425653\\times4\\). # pooled model (no FE) model0 &lt;- yes ~ pctsumyessameschool + pctsumyessamestate + pctsumyessameparty dim(model.matrix(model0, data=cm)) ## [1] 425653 4 In contrast, the model matrix of specification (1) is of dimensions \\(425653\\times221\\), and the model matrix of specification (2) even of \\(425653\\times6929\\). model1 &lt;- yes ~ pctsumyessameschool + pctsumyessamestate + pctsumyessameparty + factor(congress) + factor(id) -1 mm1 &lt;- model.matrix(model1, data=cm) dim(mm1) ## [1] 425653 168 Using OLS to estimate such a model thus involves the computation of a very large matrix inversion (because \\(\\hat{\\beta}_{OLS} = (\\mathbf{X}^\\intercal\\mathbf{X})^{-1}\\mathbf{X}^{\\intercal}\\mathbf{y}\\)). In addition, the model matrix for specification 2 is about 22GB, which might further slow down the computer due to a lack of physical memory or even crash the R session altogether. In order to set a point of reference, we first estimate specification (1) with standard OLS. # fit specification (1) runtime &lt;- system.time(fit1 &lt;- lm(data = cm, formula = model1)) coeftest(fit1)[2:4,] ## Estimate Std. Error t value ## pctsumyessamestate 0.11861 0.001085 109.275 ## pctsumyessameparty 0.92640 0.001397 662.910 ## factor(congress)101 -0.01458 0.006429 -2.269 ## Pr(&gt;|t|) ## pctsumyessamestate 0.0000 ## pctsumyessameparty 0.0000 ## factor(congress)101 0.0233 # median amount of time needed for estimation runtime[3] ## elapsed ## 12.59 As expected, this takes quite some time to compute. However, there is an alternative approach to estimating such models that substantially reduces the computational burden by “sweeping out the fixed effects dummies.” In the simple case of only one fixed effect variable (e.g., only individual fixed effects), the trick is called “within transformation” or “demeaning” and is quite simple to implement. For each of the categories in the fixed effect variable the mean of the covariate and subtract the mean from the covariate’s value. # illustration of within transformation for the senator fixed effects cm_within &lt;- with(cm, data.table(yes = yes - ave(yes, id), pctsumyessameschool = pctsumyessameschool - ave(pctsumyessameschool, id), pctsumyessamestate = pctsumyessamestate - ave(pctsumyessamestate, id), pctsumyessameparty = pctsumyessameparty - ave(pctsumyessameparty, id) )) # comparison of dummy fixed effects estimator and within estimator dummy_time &lt;- system.time(fit_dummy &lt;- lm(yes ~ pctsumyessameschool + pctsumyessamestate + pctsumyessameparty + factor(id) -1, data = cm )) within_time &lt;- system.time(fit_within &lt;- lm(yes ~ pctsumyessameschool + pctsumyessamestate + pctsumyessameparty -1, data = cm_within)) # computation time comparison as.numeric(within_time[3])/as.numeric(dummy_time[3]) ## [1] 0.003896 # comparison of estimates coeftest(fit_dummy)[1:3,] ## Estimate Std. Error t value ## pctsumyessameschool 0.04424 0.001352 32.73 ## pctsumyessamestate 0.11864 0.001085 109.30 ## pctsumyessameparty 0.92615 0.001397 662.93 ## Pr(&gt;|t|) ## pctsumyessameschool 1.205e-234 ## pctsumyessamestate 0.000e+00 ## pctsumyessameparty 0.000e+00 coeftest(fit_within) ## ## t test of coefficients: ## ## Estimate Std. Error t value ## pctsumyessameschool 0.04424 0.00135 32.7 ## pctsumyessamestate 0.11864 0.00109 109.3 ## pctsumyessameparty 0.92615 0.00140 663.0 ## Pr(&gt;|t|) ## pctsumyessameschool &lt;2e-16 *** ## pctsumyessamestate &lt;2e-16 *** ## pctsumyessameparty &lt;2e-16 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Unfortunately, we cannot simply apply the same procedure in a specification with several fixed effects variables. However, Gaure (2013b) provides a generalization of the linear within-estimator to several fixed effects variables. This method is implemented in the lfe package (Gaure (2013a)). With this package, we can easily estimate both fixed-effect specifications (as well as the corresponding cluster-robust standard errors) in order to replicate the original results by Cohen and Malloy (2014). library(lfe) # model and clustered SE specifications model1 &lt;- yes ~ pctsumyessameschool + pctsumyessamestate + pctsumyessameparty |congress+id|0|id model2 &lt;- yes ~ pctsumyessameschool + pctsumyessamestate + pctsumyessameparty |congress_session_votenumber+id|0|id # estimation fit1 &lt;- felm(model1, data=cm) fit2 &lt;- felm(model2, data=cm) Finally we can display the regression table. stargazer::stargazer(fit1,fit2, type=&quot;text&quot;, dep.var.labels = &quot;Vote (yes/no)&quot;, covariate.labels = c(&quot;School Connected Votes&quot;, &quot;State Votes&quot;, &quot;Party Votes&quot;), keep.stat = c(&quot;adj.rsq&quot;, &quot;n&quot;)) ## ## Dependent variable: ## Vote (yes/no) ## (1) (2) ## School Connected Votes 0.045*** 0.052*** ## (0.016) (0.016) ## State Votes 0.119*** 0.122*** ## (0.013) (0.012) ## Party Votes 0.926*** 0.945*** ## (0.022) (0.024) ## Observations 425,653 425,653 ## Adjusted R2 0.641 0.641 ## Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 Note that this example aims to illustrate a point about computation in an applied econometrics context. It does not make any argument about identification or the broader research question whatsoever.↩︎ "],["gpus-and-machine-learning.html", "Chapter 12 GPUs and Machine Learning 12.1 Tensorflow/Keras example: predict housing prices 12.2 Data preparation 12.3 Model specification 12.4 Training and prediction", " Chapter 12 GPUs and Machine Learning A most common application of GPUs for scientific computing is machine learning, in particular deep learning (machine learning based on artificial neural networks). Training deep learning models can be very computationally intense and to an important part depends on tensor (matrix) multiplications. This is also an area where you might come across highly parallelized computing based on GPUs without even noticing it, as the now commonly used software to build and train deep neural nets (tensorflow, and the high-level Keras API) can easily be run on a CPU or GPU without any further configuration/preparation (apart from the initial installation of these programs). The example below is a simple illustration of how such techniques can be used in an econometrics context. 12.1 Tensorflow/Keras example: predict housing prices In this example we train a simple sequential model with two hidden layers in order to predict the median value of owner-occupied homes (in USD 1,000) in the Boston area (data are from the 1970s). The original data and a detailed description can be found here. The example follows closely this keras tutorial published by RStudio. See RStudio’s keras installation guide for how to install keras (and tensorflow) and the corresponding R package keras.45 While the purpose of the example here is to demonstrate a typical (but very simple!) usage case of GPUs in machine learning, the same code should also run on a normal machine (without using GPUs) with a default installation of keras. Apart from keras, we load packages to prepare the data and visualize the output. Via dataset_boston_housing(), we load the dataset (shipped with the keras installation) in the format preferred by the keras library. # load packages library(keras) library(tibble) library(ggplot2) library(tfdatasets) # load data boston_housing &lt;- dataset_boston_housing() str(boston_housing) ## List of 2 ## $ train:List of 2 ## ..$ x: num [1:404, 1:13] 1.2325 0.0218 4.8982 0.0396 3.6931 ... ## ..$ y: num [1:404(1d)] 15.2 42.3 50 21.1 17.7 18.5 11.3 15.6 15.6 14.4 ... ## $ test :List of 2 ## ..$ x: num [1:102, 1:13] 18.0846 0.1233 0.055 1.2735 0.0715 ... ## ..$ y: num [1:102(1d)] 7.2 18.8 19 27 22.2 24.5 31.2 22.9 20.5 23.2 ... 12.2 Data preparation In a first step, we split the data into a training set and a test set. The latter is used to monitor the out-of-sample performance of the model fit. Testing the validity of an estimated model by looking at how it performs out-of-sample is of particular relevance when working with (deep) neural networks, as they can easily lead to over-fitting. Validity checks based on the test sample are, therefore, often an integral part of modelling with tensorflow/keras. # assign training and test data/labels c(train_data, train_labels) %&lt;-% boston_housing$train c(test_data, test_labels) %&lt;-% boston_housing$test In order to better understand and interpret the dataset we add the original variable names, and convert it to a tibble. library(dplyr) column_names &lt;- c(&#39;CRIM&#39;, &#39;ZN&#39;, &#39;INDUS&#39;, &#39;CHAS&#39;, &#39;NOX&#39;, &#39;RM&#39;, &#39;AGE&#39;, &#39;DIS&#39;, &#39;RAD&#39;, &#39;TAX&#39;, &#39;PTRATIO&#39;, &#39;B&#39;, &#39;LSTAT&#39;) train_df &lt;- train_data %&gt;% as_tibble(.name_repair = &quot;minimal&quot;) %&gt;% setNames(column_names) %&gt;% mutate(label = train_labels) test_df &lt;- test_data %&gt;% as_tibble(.name_repair = &quot;minimal&quot;) %&gt;% setNames(column_names) %&gt;% mutate(label = test_labels) Next, we have a close look at the data. Note the usage of the term ‘label’ for what is usually called the ‘dependent variable’ in econometrics.46 As the aim of the exercise is to predict median prices of homes, the output of the model will be a continuous value (‘labels’). # check example data dimensions and content paste0(&quot;Training entries: &quot;, length(train_data), &quot;, labels: &quot;, length(train_labels)) ## [1] &quot;Training entries: 5252, labels: 404&quot; summary(train_data) ## V1 V2 V3 ## Min. : 0.01 Min. : 0.0 Min. : 0.46 ## 1st Qu.: 0.08 1st Qu.: 0.0 1st Qu.: 5.13 ## Median : 0.27 Median : 0.0 Median : 9.69 ## Mean : 3.75 Mean : 11.5 Mean :11.10 ## 3rd Qu.: 3.67 3rd Qu.: 12.5 3rd Qu.:18.10 ## Max. :88.98 Max. :100.0 Max. :27.74 ## V4 V5 V6 ## Min. :0.0000 Min. :0.385 Min. :3.56 ## 1st Qu.:0.0000 1st Qu.:0.453 1st Qu.:5.88 ## Median :0.0000 Median :0.538 Median :6.20 ## Mean :0.0619 Mean :0.557 Mean :6.27 ## 3rd Qu.:0.0000 3rd Qu.:0.631 3rd Qu.:6.61 ## Max. :1.0000 Max. :0.871 Max. :8.72 ## V7 V8 V9 ## Min. : 2.9 Min. : 1.13 Min. : 1.00 ## 1st Qu.: 45.5 1st Qu.: 2.08 1st Qu.: 4.00 ## Median : 78.5 Median : 3.14 Median : 5.00 ## Mean : 69.0 Mean : 3.74 Mean : 9.44 ## 3rd Qu.: 94.1 3rd Qu.: 5.12 3rd Qu.:24.00 ## Max. :100.0 Max. :10.71 Max. :24.00 ## V10 V11 V12 ## Min. :188 Min. :12.6 Min. : 0.3 ## 1st Qu.:279 1st Qu.:17.2 1st Qu.:374.7 ## Median :330 Median :19.1 Median :391.2 ## Mean :406 Mean :18.5 Mean :354.8 ## 3rd Qu.:666 3rd Qu.:20.2 3rd Qu.:396.2 ## Max. :711 Max. :22.0 Max. :396.9 ## V13 ## Min. : 1.73 ## 1st Qu.: 6.89 ## Median :11.39 ## Mean :12.74 ## 3rd Qu.:17.09 ## Max. :37.97 summary(train_labels) # Display first 10 entries ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 5.0 16.7 20.8 22.4 24.8 50.0 As the dataset contains variables ranging from per capita crime rate to indicators for highway access, the variables are obviously measured in different units and hence displayed on different scales. This is not per se a problem for the fitting procedure. However, fitting is more efficient when all features (variables) are normalized. spec &lt;- feature_spec(train_df, label ~ . ) %&gt;% step_numeric_column(all_numeric(), normalizer_fn = scaler_standard()) %&gt;% fit() ## Warning: replacing previous import ## &#39;lifecycle::last_warnings&#39; by &#39;rlang::last_warnings&#39; ## when loading &#39;hms&#39; layer &lt;- layer_dense_features( feature_columns = dense_features(spec), dtype = tf$float32 ) layer(train_df) ## tf.Tensor( ## [[ 0.81205493 0.44752213 -0.2565147 ... -0.1762239 -0.59443307 ## -0.48301655] ## [-1.9079947 0.43137115 -0.2565147 ... 1.8920003 -0.34800112 ## 2.9880793 ] ## [ 1.1091131 0.2203439 -0.2565147 ... -1.8274226 1.563349 ## -0.48301655] ## ... ## [-1.6359899 0.07934052 -0.2565147 ... -0.3326088 -0.61246467 ## 0.9895695 ] ## [ 1.0554279 -0.98642045 -0.2565147 ... -0.7862657 -0.01742171 ## -0.48301655] ## [-1.7970455 0.23288251 -0.2565147 ... 0.47467488 -0.84687555 ## 2.0414166 ]], shape=(404, 13), dtype=float32) 12.3 Model specification We specify the model as a linear stack of layers: The input (all 13 explanatory variables), two densely connected hidden layers (each with a 64-dimensional output space), and finally the one-dimensional output layer (the ‘dependent variable’). # Create the model # model specification input &lt;- layer_input_from_dataset(train_df %&gt;% select(-label)) output &lt;- input %&gt;% layer_dense_features(dense_features(spec)) %&gt;% layer_dense(units = 64, activation = &quot;relu&quot;) %&gt;% layer_dense(units = 64, activation = &quot;relu&quot;) %&gt;% layer_dense(units = 1) model &lt;- keras_model(input, output) In order to fit the model, we first have to compile it (configure it for training). At this step we set the configuration parameters that will guide the training/optimization procedure. We use the mean squared errors loss function (mse) typically used for regressions. We chose the RMSProp optimizer to find the minimum loss. # compile the model model %&gt;% compile( loss = &quot;mse&quot;, optimizer = optimizer_rmsprop(), metrics = list(&quot;mean_absolute_error&quot;) ) Now we can get a summary of the model we are about to fit to the data. # get a summary of the model model ## Model ## Model: &quot;model&quot; ## _______________________________________________________ ## Layer (type) Output Shap Param Connected to ## ======================================================= ## AGE (InputLayer) [(None,)] 0 ## _______________________________________________________ ## B (InputLayer) [(None,)] 0 ## _______________________________________________________ ## CHAS (InputLayer) [(None,)] 0 ## _______________________________________________________ ## CRIM (InputLayer) [(None,)] 0 ## _______________________________________________________ ## DIS (InputLayer) [(None,)] 0 ## _______________________________________________________ ## INDUS (InputLayer [(None,)] 0 ## _______________________________________________________ ## LSTAT (InputLayer [(None,)] 0 ## _______________________________________________________ ## NOX (InputLayer) [(None,)] 0 ## _______________________________________________________ ## PTRATIO (InputLay [(None,)] 0 ## _______________________________________________________ ## RAD (InputLayer) [(None,)] 0 ## _______________________________________________________ ## RM (InputLayer) [(None,)] 0 ## _______________________________________________________ ## TAX (InputLayer) [(None,)] 0 ## _______________________________________________________ ## ZN (InputLayer) [(None,)] 0 ## _______________________________________________________ ## dense_features_1 (None, 13) 0 AGE[0][0] ## B[0][0] ## CHAS[0][0] ## CRIM[0][0] ## DIS[0][0] ## INDUS[0][0] ## LSTAT[0][0] ## NOX[0][0] ## PTRATIO[0][0] ## RAD[0][0] ## RM[0][0] ## TAX[0][0] ## ZN[0][0] ## _______________________________________________________ ## dense_2 (Dense) (None, 64) 896 dense_features_1[0] ## _______________________________________________________ ## dense_1 (Dense) (None, 64) 4160 dense_2[0][0] ## _______________________________________________________ ## dense (Dense) (None, 1) 65 dense_1[0][0] ## ======================================================= ## Total params: 5,121 ## Trainable params: 5,121 ## Non-trainable params: 0 ## _______________________________________________________ 12.4 Training and prediction Given the relatively simple model and small dataset, we set the maximum number of epochs to 500 and allow for early stopping in case the validation loss (based on test data) is not improving for a while. # Set max. number of epochs epochs &lt;- 500 Finally, we fit the model while preserving the training history, and visualize the training progress. # Fit the model and store training stats history &lt;- model %&gt;% fit( x = train_df %&gt;% select(-label), y = train_df$label, epochs = epochs, validation_split = 0.2, verbose = 0 ) plot(history) 12.4.1 A word of caution From just comparing the number of threads of a modern CPU with the number of threads of a modern GPU, one might get the impression that parallel tasks should always be implemented for GPU computing. However, whether one approach or the other is faster can depend a lot on the overall task and the data at hand. Moreover, the parallel implementation of tasks can be done more or less well on either system. Really efficient parallel implementation of tasks can take a lot of coding time (particularly when done for GPUs).47. This might involve the installation of additional packages and software outside the R environment.↩︎ Typical textbook examples in machine learning deal with classification (e.g. a logit model), while in microeconometrics the typical example is usually a linear model (continuous dependent variable).↩︎ For a more detailed discussion of the relevant factors for well done parallelization (either on CPUs or GPUs), see Matloff (2015)↩︎ "],["applied-econometrics-with-spark.html", "Chapter 13 Applied Econometrics with Spark 13.1 Regression analysis with sparklyr", " Chapter 13 Applied Econometrics with Spark 13.1 Regression analysis with sparklyr Suppose we want to conduct a correlation study of what factors are associated with more or less arrival delay in air travel. Spark provides via its built-in ‘MLib’ library several high-level functions to conduct regression analyses. When calling these functions via sparklyr (or SparkR), their usage is actually very similar to the usual R packages/functions commonly used to run regressions in R. As a simple point of reference, we first estimate a linear model with the usual R approach (all computed in the R environment). First, we load the data as a common data.table. We could also convert a copy of the entire SparkDataFrame object to a data.frame or data.table and get essentially the same outcome. However, collecting the data from the RDD structure would take much longer than parsing the csv with fread. In addition, we only import the first 300 rows. Running regression analysis with relatively large datasets in Spark on a small local machine might fail or be rather slow.48 # flights_r &lt;- collect(flights) # very slow! flights_r &lt;- data.table::fread(&quot;data/flights.csv&quot;, nrows = 300) Now we run a simple linear regression (OLS) and show the summary output. # specify the linear model model1 &lt;- arr_delay ~ dep_delay + distance # fit the model with ols fit1 &lt;- lm(model1, flights_r) # compute t-tests etc. summary(fit1) ## ## Call: ## lm(formula = model1, data = flights_r) ## ## Residuals: ## Min 1Q Median 3Q Max ## -42.39 -9.96 -1.91 9.87 48.02 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.182662 1.676560 -0.11 0.91 ## dep_delay 0.989553 0.017282 57.26 &lt;2e-16 *** ## distance 0.000114 0.001239 0.09 0.93 ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 15.5 on 297 degrees of freedom ## Multiple R-squared: 0.917, Adjusted R-squared: 0.917 ## F-statistic: 1.65e+03 on 2 and 297 DF, p-value: &lt;2e-16 Now we aim to compute essentially the same model estimate in sparklyr.49 In order to use Spark via the sparklyr package we need to first load the package and establish a connection with Spark (similar to SparkR::sparkR.session()). library(sparklyr) # connect with default configuration sc &lt;- spark_connect(master = &quot;local&quot;, version = &quot;3.1.2&quot;) We then copy the data.table flights_r (previously loaded into our R session) to Spark. Again, working on a normal laptop this seems trivial, but the exact same command would allow us (when connected with Spark on a cluster computer in the cloud) to properly load and distribute the data.table on the cluster. Finally, we then fit the model with ml_linear_regression() and compute # load data to spark flights3 &lt;- copy_to(sc, flights_r, &quot;flights3&quot;) # fit the model fit1_spark &lt;- ml_linear_regression(flights3, formula = model1) # compute summary stats summary(fit1_spark) ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -42.39 -9.96 -1.91 9.87 48.02 ## ## Coefficients: ## (Intercept) dep_delay distance ## -0.182662 0.989553 0.000114 ## ## R-Squared: 0.9172 ## Root Mean Squared Error: 15.42 Alternatively, we can use the spark_apply() function to run the regression analysis in R via the original R lm()-function. # fit the model spark_apply(flights3, function(df) broom::tidy(lm(arr_delay ~ dep_delay + distance, df)), names = c(&quot;term&quot;, &quot;estimate&quot;, &quot;std.error&quot;, &quot;statistic&quot;, &quot;p.value&quot;) ) ## # Source: spark&lt;?&gt; [?? x 5] ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) -0.183 1.68 -0.109 9.13e- 1 ## 2 dep_delay 0.990 0.0173 57.3 1.63e-162 ## 3 distance 0.000114 0.00124 0.0920 9.27e- 1 Again, it is important to keep in mind that running Spark on a small local machine is only optimal for learning and testing code (based on relatively small samples). The whole framework is not optimized to be run on a small machine but for cluster computers.↩︎ Most regression models commonly used in traditional applied econometrics are in some form provided in sparklyr or SparkR. See the package documentations for more details.↩︎ "],["appendix-a.html", "A Appendix A A.1 GitHub", " A Appendix A A.1 GitHub A.1.1 Initiate a new repository Log in to your GitHub account and click on the plus-sign in the upper right corner. From the drop-down-menu select New repository. Give your repository a name, for example bigdatastat. Then, click on the big green button Create repository. You have just created a new repository. Open Rstudio and and navigate to a place on your hard-disk where you want to have the local copy of your repository. Then create the local repository as suggested by GitHub (see the page shown right after you have clicked on Create repository: “…or create a new repository on the command line”). In order to do so, you have to switch to the Terminal window in RStudio and type (or copy paste) the commands as given by GitHub. This should look similar to echo &quot;# bigdatastat&quot; &gt;&gt; README.md git init git add README.md git commit -m &quot;first commit&quot; git remote add origin https://github.com/umatter/bigdatastat.git git push -u origin master Refresh the page of your newly created GitHub repository. You should now see the result of your first commit. Open README.md in RStudio and add a few words describing what this repository is all about. A.1.2 Clone this course’s repository In RStudio, navigate to a folder on your hard-disk where you want to have a local copy of this course’s GitHub repository. Open a new browser window and go to www.github.com/umatter/BigData. Click on Clone or download and copy the link. In RStudio, switch to the Terminal, and type the following command (pasting the copied link). git clone https://github.com/umatter/BigData.git You have now a local copy of the repository which is linked to the one on GitHub. You can see this by changing to the newly created directory, containing the local copy of the repository: cd BigData Whenever there are some updates to the course’s repository on GitHub, you can update your local copy with: git pull (Make sure you are in the BigData folder when running git pull.) A.1.3 Fork this course’s repository Go to https://github.com/umatter/BigData, click on the ‘Fork’ button in the upper-right corner (follow the instructions). Clone the forked repository (see the cloning of a repository above for details). Assuming you called your forked repository BigData-forked, you run the following command in the terminal (replacing &lt;yourgithubusername&gt;: git clone https://github.com/`&lt;yourgithubusername&gt;`/BigData-forked.git Switch into the newly created directory: cd BigData-forked Set a remote connection to the original repository git remote add upstream https://github.com/umatter/BigData.git You can verify the remotes of your local clone of your forked repository as follows git remote -v You should see something like origin https://github.com/&lt;yourgithubusername&gt;/BigData-forked.git (fetch) origin https://github.com/&lt;yourgithubusername&gt;/BigData-forked.git (push) upstream https://github.com/umatter/BigData.git (fetch) upstream https://github.com/umatter/BigData.git (push) Fetch changes from the original repository. New material has been added to the original course repository and you want to merge it with your forked repository. In order to do so, you first fetch the changes from the original repository: git fetch upstream Make sure you are on the master branch of your local repository: git checkout master Merge the changes fetched from the original repo with the master of your (local clone of the) forked repo. git merge upstream/master Push the changes to your forked repository on GitHub. git push Now your forked repo on GitHub also contains the commits (changes) in the original repository. If you make changes to the files in your forked repo. you can add, commit, and push them as in any repository. Example: open README.md in a text editor (e.g. RStudio), add # HELLO WORLD to the last line of README.md, and save the changes. Then: git add README.md git commit -m &quot;hello world&quot; git push "],["appendix-b.html", "B Appendix B", " B Appendix B B.0.1 Data types and memory/storage Data loaded into RAM can be interpreted differently by R depending on the data type. Some operators or functions in R only accept data of a specific type as arguments. For example, we can store the numeric values 1.5 and 3 in the variables a and b, respectively. a &lt;- 1.5 b &lt;- 3 a + b ## [1] 4.5 R interprets this data as type double (class ‘numeric’): typeof(a) ## [1] &quot;double&quot; class(a) ## [1] &quot;numeric&quot; object.size(a) ## 56 bytes If, however, we define a and b as follows, R will interpret the values stored in a and b as text (character). a &lt;- &quot;1.5&quot; b &lt;- &quot;3&quot; a + b typeof(a) ## [1] &quot;double&quot; class(a) ## [1] &quot;numeric&quot; object.size(a) ## 56 bytes Note that the symbols 1.5 take up more or less memory depending on the data-type they are stored in. This directly links to how data/information is stored/represented in binary code, which in turn is reflected in how much memory is used to store these symbols in an object as well as what we can do with it. B.0.1.1 Example in R: Data types and information storage Given the fact that computers only understand 0s and 1s, different approaches are taken to map these digital values to other symbols or images (text, decimal numbers, pictures, etc.) that we humans can more easily make sense of. Regarding text and numbers, these mappings involve character encodings (in which combinations of 0s and 1s represent a character in a specific alphabet) and data types. Let’s illustrate the main concepts with the simple numerical example from above. When we see the decimal number 139 written somewhere, we know that it means ‘one-hundred-and-thirty-nine.’ The fact that our computer is able to print 139 on the screen means that our computer can somehow map a sequence of 0s and 1s to the symbols 1, 3, and 9. Depending on what we want to do with the data value 139 on our computer, there are different ways of how the computer can represent this value internally. Inter alia, we could load it into RAM as a string (‘text’/‘character’) or as an integer (‘natural number’) or double (numeric, floating point number). All of them can be printed on screen but only the latter two can be used for arithmetic computations. This concept can easily be illustrated in R. We initiate a new variable with the value 139. By using this syntax, R by default initiates the variable as an object of type double. We then can use this variable in arithmetic operations. my_number &lt;- 139 # check the class typeof(my_number) ## [1] &quot;double&quot; # arithmetic my_number*2 ## [1] 278 When we change the data type to ‘character’ (string) such operations are not possible. # change and check type/class my_number_string &lt;- as.character(my_number) typeof(my_number_string) ## [1] &quot;character&quot; # try to multiply my_number_string*2 ## Error in my_number_string * 2: non-numeric argument to binary operator If we change the variable to type integer, we can still use math operators. # change and check type/class my_number_int &lt;- as.integer(my_number) typeof(my_number_int) ## [1] &quot;integer&quot; # arithmetics my_number_int*2 ## [1] 278 Having all variables in the right type is relevant for data analytics with all kind of sample sizes. However, given the fact that different data types have to be represented differently internally, different types might take up more or less memory and therefore substantially affect the performance when dealing with massive amounts of data. We can illustrate this point with object.size(): object.size(&quot;139&quot;) ## 112 bytes object.size(139) ## 56 bytes B.0.2 Data structures For now, we have only looked at individual bytes of data. An entire data set can consist of gigabytes of data and contain both text and numeric values. R provides several classes of objects providing different data structures. Both the choice of data types and data structures to store data in can affect how much memory is needed to contain a dataset in RAM. B.0.3 Vectors vs Factors in R Vectors are collections of values of the same type. They can contain either all numeric values or all character values. For example, we can initiate a character vector containing information on the home towns of persons participating in a survey. hometown &lt;- c(&quot;St.Gallen&quot;, &quot;Basel&quot;, &quot;St.Gallen&quot;) hometown ## [1] &quot;St.Gallen&quot; &quot;Basel&quot; &quot;St.Gallen&quot; object.size(hometown) ## 200 bytes Unlike in the data types example above, it would likely be not that practical to store these values as type numeric to save memory. R would not know how to translate these strings into floating point numbers. Alternatively, we could think of a correspondence table that assigns a numeric (id) code to each unique town name in the data set. This way we would save memory but it would mean additional effort to work with the data. Fortunately, basic R already implements exactly this idea in a user-friendly way in a data-structure called factor. Factors are sets of categories. Thus, the values come from a fixed set of possible values. Considering the same example as above, we can store the same information in an object of type class factor. hometown_f &lt;- factor(c(&quot;St.Gallen&quot;, &quot;Basel&quot;, &quot;St.Gallen&quot;)) hometown_f ## [1] St.Gallen Basel St.Gallen ## Levels: Basel St.Gallen object.size(hometown_f) ## 584 bytes At first sight, the fact that hometown_f takes up more memory than its character vector sibling seems odd. But, we have encountered this kind of ‘paradox’ before. Again, the more sophisticated approach involves an ‘overhead’ (here not in terms of computing time but in terms of structure encoded in an object). hometown_f has more ‘structure’ (i.e., a mapping of numbers to ‘factor levels’/category labels). This additional structure is also information that needs to be stored somewhere. As in previous examples of this ‘overhead costs,’ this disadvantage is diminishing with larger data sets: # create a large character vector hometown_large &lt;- rep(hometown, times = 1000) # and the same content as factor hometown_large_f &lt;- factor(hometown_large) # compare size object.size(hometown_large) ## 24168 bytes object.size(hometown_large_f) ## 12568 bytes B.0.3.1 Matrices/Arrays Matrices are two-dimensional collections of values, arrays higher-dimensional collections of values, of the same type. For example, we can initiate a three-row/two-column numeric matrix as follows. my_matrix &lt;- matrix(c(1,2,3,4,5,6), nrow = 3) my_matrix ## [,1] [,2] ## [1,] 1 4 ## [2,] 2 5 ## [3,] 3 6 And a three-dimensional numeric array as follows. my_array &lt;- array(c(1,2,3,4,5,6), dim = 3) my_array ## [1] 1 2 3 B.0.3.2 Data frames, tibbles, and data tables Recall that data frames are the typical representation of a (table-like) data set in R. Each column can contain a vector of a given data type (or a factor), but all columns need to be of identical length. Thus in the context of data analysis, we would say that each row of a data frame contains an observation, and each column contains a characteristic of this observation. The historical implementation of data frames in R is not very comfortable to work with large data sets.50 Several newer implementations of the data-frame concept in R aim to make data processing faster. One is called tibbles, implemented and used in the tidyverse packages. The other is called data table, implemented in the data.table-package. In this course we will focus on the data.table-package. Here is how we define a data.table in R: # load package library(data.table) # initiate a data.table dt &lt;- data.table(person = c(&quot;Alice&quot;, &quot;Ben&quot;), age = c(50, 30), gender = c(&quot;f&quot;, &quot;m&quot;)) dt ## person age gender ## 1: Alice 50 f ## 2: Ben 30 m B.0.3.3 Lists Similar to data frames and data tables, lists can contain different types of data in each element. For example, a list could contain different other lists, data frames, and vectors with differing numbers of elements. This flexibility can easily be demonstrated by combining some of the data structures created in the examples above: my_list &lt;- list(my_array, my_matrix, dt) my_list ## [[1]] ## [1] 1 2 3 ## ## [[2]] ## [,1] [,2] ## [1,] 1 4 ## [2,] 2 5 ## [3,] 3 6 ## ## [[3]] ## person age gender ## 1: Alice 50 f ## 2: Ben 30 m B.0.4 R-tools to investigate structures and types package function purpose utils str() Compactly display the structure of an arbitrary R object. base class() Prints the class(es) of an R object. base typeof() Determines the (R-internal) type or storage mode of an object. In the early days of R this was not really an issue because data sets that are rather large by today’s standards (in the Gigabytes) could not have been handled properly by normal computers anyhow (due to a lack of RAM).↩︎ "],["appendix-c.html", "C Appendix C", " C Appendix C C.0.0.1 Install Hadoop (on Ubuntu Linux) # download binary wget https://dlcdn.apache.org/hadoop/common/hadoop-2.10.1/hadoop-2.10.1.tar.gz # download checksum wget https://dlcdn.apache.org/hadoop/common/hadoop-2.10.1/hadoop-2.10.1.tar.gz.sha512 # run the verification shasum -a 512 hadoop-2.10.1.tar.gz # compare with value in mds file cat hadoop-2.10.1.tar.gz.sha512 # if all is fine, unpack tar -xzvf hadoop-2.10.1.tar.gz # move to proper place sudo mv hadoop-2.10.1 /usr/local/hadoop # then point to this version from hadoop # open the file /usr/local/hadoop/etc/hadoop/hadoop-env.sh # in a text editor and add (where export JAVA_HOME=...) export JAVA_HOME=$(readlink -f /usr/bin/java | sed &quot;s:bin/java::&quot;) # clean up rm hadoop-2.10.1.tar.gz rm hadoop-2.10.1.tar.gz.sha512 After running all of the steps above, run the following line in the terminal to check the installation # check installation /usr/local/hadoop/bin/hadoop "],["references.html", "References", " References Burns, Patrick. 2011. The r Inferno. Lulu Press, Inc. https://www.burns-stat.com/pages/Tutor/R_inferno.pdf. Cohen, Lauren, and Christopher J. Malloy. 2014. “Friends in High Places.” American Economic Journal: Economic Policy 6 (3): 63–91. https://doi.org/10.1257/pol.6.3.63. Dhillon, Paramveer, Yichao Lu, Dean P. Foster, and Lyle Ungar. 2013. “New Subsampling Algorithms for Fast Least Squares Regression.” In Advances in Neural Information Processing Systems 26, 360–68. Donoho, David. 2017. “50 Years of Data Science.” Journal of Computational and Graphical Statistics 26 (4): 745–66. https://doi.org/10.1080/10618600.2017.1384734. Fatahalian, K., J. Sugerman, and P. Hanrahan. 2004. “Understanding the Efficiency of GPU Algorithms for Matrix-Matrix Multiplication.” In Proceedings of the ACM SIGGRAPH/EUROGRAPHICS Conference on Graphics Hardware, 133–37. HWWS ’04. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1058129.1058148. Gaure, Simen. 2013a. “lfe: Linear Group Fixed Effects.” The R Journal 5 (2): 104–16. https://doi.org/10.32614/RJ-2013-031. ———. 2013b. “OLS with Multiple High Dimensional Category Variables.” Computational Statistics &amp; Data Analysis 66: 8–18. https://doi.org/https://doi.org/10.1016/j.csda.2013.03.024. Karami, Amir, Aryya Gangopadhyay, Bin Zhou, and Hadi Kharrazi. 2017. “Fuzzy Approach Topic Discovery in Health and Medical Corpora.” International Journal of Fuzzy Systems 20: 1334–45. Matloff, Norman. 2015. Parallel Computing for Data Science. Boca Raton, FL: CRC Press. Walkowiak, Simkon. 2016. Big Data Analytics with r. Birmingham, UK: PACKT Publishing. Wickham, Hadley. 2011. “The Split-Apply-Combine Strategy for Data Analysis.” Journal of Statistical Software 40. "]]
